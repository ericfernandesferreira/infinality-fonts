From 30fe5e762e062612fdf4b56b50d813525a5aa311 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sun, 4 Oct 2015 13:08:08 +0200
Subject: [PATCH 022/110] [base] Replace left shifts with multiplication
 (#46118).

* src/base/ftglyph.c (ft_bitmap_glyph_bbox, FT_Get_Glyph): Do it.
---
 ChangeLog          |  6 ++++++
 src/base/ftglyph.c | 14 +++++++-------
 2 files changed, 13 insertions(+), 7 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index f5ca59f..2479af3 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,11 @@
 2015-10-04  Werner Lemberg  <wl@gnu.org>
 
+	[base] Replace left shifts with multiplication (#46118).
+
+	* src/base/ftglyph.c (ft_bitmap_glyph_bbox, FT_Get_Glyph): Do it.
+
+2015-10-04  Werner Lemberg  <wl@gnu.org>
+
 	* Version 2.6.1 released.
 	=========================
 
diff --git a/src/base/ftglyph.c b/src/base/ftglyph.c
index cb7fc37..2778743 100644
--- a/src/base/ftglyph.c
+++ b/src/base/ftglyph.c
@@ -125,10 +125,10 @@
     FT_BitmapGlyph  glyph = (FT_BitmapGlyph)bitmap_glyph;
 
 
-    cbox->xMin = glyph->left << 6;
-    cbox->xMax = cbox->xMin + (FT_Pos)( glyph->bitmap.width << 6 );
-    cbox->yMax = glyph->top << 6;
-    cbox->yMin = cbox->yMax - (FT_Pos)( glyph->bitmap.rows << 6 );
+    cbox->xMin = glyph->left * 64;
+    cbox->xMax = cbox->xMin + (FT_Pos)( glyph->bitmap.width * 64 );
+    cbox->yMax = glyph->top * 64;
+    cbox->yMin = cbox->yMax - (FT_Pos)( glyph->bitmap.rows * 64 );
   }
 
 
@@ -403,9 +403,9 @@
     if ( error )
       goto Exit;
 
-    /* copy advance while converting it to 16.16 format */
-    glyph->advance.x = slot->advance.x << 10;
-    glyph->advance.y = slot->advance.y << 10;
+    /* copy advance while converting 26.6 to 16.16 format */
+    glyph->advance.x = slot->advance.x * 1024;
+    glyph->advance.y = slot->advance.y * 1024;
 
     /* now import the image from the glyph slot */
     error = clazz->glyph_init( glyph, slot );
-- 
2.6.2

From 066a49139b904aa1f8a47d3b4fd45c0a1d4c7aca Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 6 Oct 2015 07:55:32 +0200
Subject: [PATCH 023/110] [cff] Return correct PS names from pure CFF (#46130).

* src/cff/cffdrivr.c (cff_get_ps_name): Use SFNT service only for
SFNT.
---
 ChangeLog          | 7 +++++++
 src/cff/cffdrivr.c | 2 +-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 2479af3..f167eae 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-06  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Return correct PS names from pure CFF (#46130).
+
+	* src/cff/cffdrivr.c (cff_get_ps_name): Use SFNT service only for
+	SFNT.
+
 2015-10-04  Werner Lemberg  <wl@gnu.org>
 
 	[base] Replace left shifts with multiplication (#46118).
diff --git a/src/cff/cffdrivr.c b/src/cff/cffdrivr.c
index a718b7a..6221c0c 100644
--- a/src/cff/cffdrivr.c
+++ b/src/cff/cffdrivr.c
@@ -444,7 +444,7 @@
     /* following the OpenType specification 1.7, we return the name stored */
     /* in the `name' table for a CFF wrapped into an SFNT container        */
 
-    if ( sfnt )
+    if ( FT_IS_SFNT( FT_FACE( face ) ) && sfnt )
     {
       FT_Library             library     = FT_FACE_LIBRARY( face );
       FT_Module              sfnt_module = FT_Get_Module( library, "sfnt" );
-- 
2.6.2

From 6eb6158dd787dfbd7576904f99346f5b18a72ee7 Mon Sep 17 00:00:00 2001
From: Alexei Podtelezhnikov <apodtele@gmail.com>
Date: Tue, 6 Oct 2015 22:39:54 -0400
Subject: [PATCH 024/110] [smooth] Faster alternative line renderer.

This implementation renders the entire line segment at once without
subdividing it into scanlines.  The main speed improvement comes from
reducing the number of divisions to just two per line segment, which
is a bare minimum to calculate cell coverage in a smooth rasterizer.
Notably, the progression from cell to cell does not itself require any
divisions at all.  The speed improvement is more noticeable at larger
sizes.

* src/smooth/ftgrays.c (gray_render_line): New implementation.
---
 ChangeLog            |  14 +++++
 src/smooth/ftgrays.c | 153 ++++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 165 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index f167eae..f076420 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,17 @@
+2015-10-01  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[smooth] Faster alternative line renderer.
+
+	This implementation renders the entire line segment at once without
+	subdividing it into scanlines.  The main speed improvement comes from
+	reducing the number of divisions to just two per line segment, which
+	is a bare minimum to calculate cell coverage in a smooth rasterizer.
+	Notably, the progression from cell to cell does not itself require any
+	divisions at all.  The speed improvement is more noticeable at larger
+	sizes.
+
+	* src/smooth/ftgrays.c (gray_render_line): New implementation.
+
 2015-10-06  Werner Lemberg  <wl@gnu.org>
 
 	[cff] Return correct PS names from pure CFF (#46130).
diff --git a/src/smooth/ftgrays.c b/src/smooth/ftgrays.c
index ba29445..9a43c07 100644
--- a/src/smooth/ftgrays.c
+++ b/src/smooth/ftgrays.c
@@ -135,8 +135,10 @@
 #include <string.h>
 #include <setjmp.h>
 #include <limits.h>
-#define FT_UINT_MAX  UINT_MAX
-#define FT_INT_MAX   INT_MAX
+#define FT_CHAR_BIT   CHAR_BIT
+#define FT_UINT_MAX   UINT_MAX
+#define FT_INT_MAX    INT_MAX
+#define FT_ULONG_MAX  ULONG_MAX
 
 #define ft_memset   memset
 
@@ -366,6 +368,15 @@ typedef ptrdiff_t  FT_PtrDist;
 #endif /* __arm__ */
 
 
+  /* These macros speed up repetitive divisions by replacing them */
+  /* with multiplications and right shifts.                       */ 
+#define FT_UDIVPREP( b )                                       \
+  long  b ## _r = (long)( FT_ULONG_MAX >> PIXEL_BITS ) / ( b )
+#define FT_UDIV( a, b )                                        \
+  ( ( (unsigned long)( a ) * (unsigned long)( b ## _r ) ) >>   \
+    ( sizeof( long ) * FT_CHAR_BIT - PIXEL_BITS ) )
+
+
   /*************************************************************************/
   /*                                                                       */
   /*   TYPE DEFINITIONS                                                    */
@@ -678,6 +689,7 @@ typedef ptrdiff_t  FT_PtrDist;
     gray_set_cell( RAS_VAR_ ex, ey );
   }
 
+#if 0
 
   /*************************************************************************/
   /*                                                                       */
@@ -910,6 +922,143 @@ typedef ptrdiff_t  FT_PtrDist;
     ras.y       = to_y;
   }
 
+#else
+
+  /*************************************************************************/
+  /*                                                                       */
+  /* Render a straight line across multiple cells in any direction.        */
+  /*                                                                       */
+  static void
+  gray_render_line( RAS_ARG_ TPos  to_x,
+                             TPos  to_y )
+  {
+    TPos    dx, dy, fx1, fy1, fx2, fy2;
+    TCoord  ex1, ex2, ey1, ey2;
+
+
+    ex1 = TRUNC( ras.x );
+    ex2 = TRUNC( to_x );
+    ey1 = TRUNC( ras.y );
+    ey2 = TRUNC( to_y );
+
+    /* perform vertical clipping */
+    if ( ( ey1 >= ras.max_ey && ey2 >= ras.max_ey ) ||
+         ( ey1 <  ras.min_ey && ey2 <  ras.min_ey ) )
+      goto End;
+
+    dx = to_x - ras.x;
+    dy = to_y - ras.y;
+
+    fx1 = ras.x - SUBPIXELS( ex1 );
+    fy1 = ras.y - SUBPIXELS( ey1 );
+
+    if ( ex1 == ex2 && ey1 == ey2 )       /* inside one cell */
+      ;
+    else if ( dy == 0 ) /* ex1 != ex2 */  /* any horizontal line */
+    {
+      ex1 = ex2;
+      gray_set_cell( RAS_VAR_ ex1, ey1 );
+    }
+    else if ( dx == 0 )
+    {
+      if ( dy > 0 )                       /* vertical line up */
+        do
+        {
+          fy2 = ONE_PIXEL;
+          ras.cover += ( fy2 - fy1 );
+          ras.area  += ( fy2 - fy1 ) * fx1 * 2;
+          fy1 = 0;
+          ey1++;
+          gray_set_cell( RAS_VAR_ ex1, ey1 );
+        } while ( ey1 != ey2 );
+      else                                /* vertical line down */
+        do
+        {
+          fy2 = 0;
+          ras.cover += ( fy2 - fy1 );
+          ras.area  += ( fy2 - fy1 ) * fx1 * 2;
+          fy1 = ONE_PIXEL;
+          ey1--;
+          gray_set_cell( RAS_VAR_ ex1, ey1 );
+        } while ( ey1 != ey2 );
+    }
+    else                                  /* any other line */
+    {
+      TArea  prod = dx * fy1 - dy * fx1;
+      FT_UDIVPREP( dx );
+      FT_UDIVPREP( dy );
+
+
+      /* The fundamental value `prod' determines which side and the  */
+      /* exact coordinate where the line exits current cell.  It is  */
+      /* also easily updated when moving from one cell to the next.  */
+      do
+      {
+        if      ( prod                                   <= 0 &&
+                  prod - dx * ONE_PIXEL                  >  0 ) /* left */
+        {
+          fx2 = 0;
+          fy2 = (TPos)FT_UDIV( -prod, -dx );
+          prod -= dy * ONE_PIXEL;
+          ras.cover += ( fy2 - fy1 );
+          ras.area  += ( fy2 - fy1 ) * ( fx1 + fx2 );
+          fx1 = ONE_PIXEL;
+          fy1 = fy2;
+          ex1--;
+        }
+        else if ( prod - dx * ONE_PIXEL                  <= 0 &&
+                  prod - dx * ONE_PIXEL + dy * ONE_PIXEL >  0 ) /* up */
+        {
+          prod -= dx * ONE_PIXEL;
+          fx2 = (TPos)FT_UDIV( -prod, dy );
+          fy2 = ONE_PIXEL;
+          ras.cover += ( fy2 - fy1 );
+          ras.area  += ( fy2 - fy1 ) * ( fx1 + fx2 );
+          fx1 = fx2;
+          fy1 = 0;
+          ey1++;
+        }
+        else if ( prod - dx * ONE_PIXEL + dy * ONE_PIXEL <= 0 &&
+                  prod                  + dy * ONE_PIXEL >= 0 ) /* right */
+        {
+          prod += dy * ONE_PIXEL;
+          fx2 = ONE_PIXEL;
+          fy2 = (TPos)FT_UDIV( prod, dx );
+          ras.cover += ( fy2 - fy1 );
+          ras.area  += ( fy2 - fy1 ) * ( fx1 + fx2 );
+          fx1 = 0;
+          fy1 = fy2;
+          ex1++;
+        }
+        else /* ( prod                  + dy * ONE_PIXEL <  0 &&
+                  prod                                   >  0 )    down */
+        {
+          fx2 = (TPos)FT_UDIV( prod, -dy );
+          fy2 = 0;
+          prod += dx * ONE_PIXEL;
+          ras.cover += ( fy2 - fy1 );
+          ras.area  += ( fy2 - fy1 ) * ( fx1 + fx2 );
+          fx1 = fx2;
+          fy1 = ONE_PIXEL;
+          ey1--;
+        }
+
+        gray_set_cell( RAS_VAR_ ex1, ey1 );
+      } while ( ex1 != ex2 || ey1 != ey2 );
+    }
+
+    fx2 = to_x - SUBPIXELS( ex2 );
+    fy2 = to_y - SUBPIXELS( ey2 );
+
+    ras.cover += ( fy2 - fy1 );
+    ras.area  += ( fy2 - fy1 ) * ( fx1 + fx2 );
+
+  End:
+    ras.x       = to_x;
+    ras.y       = to_y;
+  }
+
+#endif
 
   static void
   gray_split_conic( FT_Vector*  base )
-- 
2.6.2

From dde84f2539b4244cf3e636bce6f20e38bd390f98 Mon Sep 17 00:00:00 2001
From: Kostya Serebryany <kcc@google.com>
Date: Wed, 7 Oct 2015 22:18:22 +0200
Subject: [PATCH 025/110] [ftfuzzer] Add support for LLVM's LibFuzzer.

* src/tools/ftfuzzer/ftfuzzer.cc, src/tools/runinput.cc: New files.
---
 ChangeLog                      |  6 ++++
 src/tools/ftfuzzer/ftfuzzer.cc | 79 ++++++++++++++++++++++++++++++++++++++++++
 src/tools/ftfuzzer/runinput.cc | 44 +++++++++++++++++++++++
 3 files changed, 129 insertions(+)
 create mode 100644 src/tools/ftfuzzer/ftfuzzer.cc
 create mode 100644 src/tools/ftfuzzer/runinput.cc

diff --git a/ChangeLog b/ChangeLog
index f076420..5286ee8 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,9 @@
+2015-10-07  Kostya Serebryany  <kcc@google.com>
+
+	[ftfuzzer] Add support for LLVM's LibFuzzer.
+
+	* src/tools/ftfuzzer/ftfuzzer.cc, src/tools/runinput.cc: New files.
+
 2015-10-01  Alexei Podtelezhnikov  <apodtele@gmail.com>
 
 	[smooth] Faster alternative line renderer.
diff --git a/src/tools/ftfuzzer/ftfuzzer.cc b/src/tools/ftfuzzer/ftfuzzer.cc
new file mode 100644
index 0000000..7b71973
--- /dev/null
+++ b/src/tools/ftfuzzer/ftfuzzer.cc
@@ -0,0 +1,79 @@
+#include <assert.h>
+#include <stdint.h>
+
+#include <ft2build.h>
+
+#include FT_FREETYPE_H
+#include FT_GLYPH_H
+#include FT_CACHE_H
+#include FT_CACHE_CHARMAP_H
+#include FT_CACHE_IMAGE_H
+#include FT_CACHE_SMALL_BITMAPS_H
+#include FT_SYNTHESIS_H
+#include FT_ADVANCES_H
+#include FT_OUTLINE_H
+#include FT_BBOX_H
+#include FT_MODULE_H
+#include FT_CFF_DRIVER_H
+#include FT_TRUETYPE_DRIVER_H
+
+
+  static FT_Library  library;
+  static int         InitResult = FT_Init_FreeType( &library );
+
+
+  extern "C" int
+  LLVMFuzzerTestOneInput( const uint8_t*  data,
+                          size_t          size )
+  {
+    assert( !InitResult );
+
+    if ( size < 1 )
+      return 0;
+
+    FT_Face         face;
+    FT_Int32        load_flags  = FT_LOAD_DEFAULT;
+    FT_Render_Mode  render_mode = FT_RENDER_MODE_NORMAL;
+
+    if ( !FT_New_Memory_Face( library, data, size, 0, &face ) )
+    {
+      unsigned int  first_index = 0;
+
+      for ( unsigned i = first_index;
+            i < (unsigned int)face->num_glyphs;
+            i++ )
+      {
+        if ( FT_Load_Glyph( face, i, load_flags ) )
+          continue;
+
+        // Rendering is the most expensive and the least interesting part.
+        //
+        // if ( FT_Render_Glyph( face->glyph, render_mode) )
+        //   continue;
+        // FT_GlyphSlot_Embolden( face->glyph );
+
+#if 0
+        FT_Glyph  glyph;
+
+        if ( !FT_Get_Glyph( face->glyph, &glyph ) )
+          FT_Done_Glyph( glyph );
+
+        FT_Outline*  outline = &face->glyph->outline;
+        FT_Matrix    rot30   = { 0xDDB4, -0x8000, 0x8000, 0xDDB4 };
+
+        FT_Outline_Transform( outline, &rot30 );
+
+        FT_BBox  bbox;
+
+        FT_Outline_Get_BBox( outline, &bbox );
+#endif
+      }
+
+      FT_Done_Face( face );
+    }
+
+    return 0;
+  }
+
+
+/* END */
diff --git a/src/tools/ftfuzzer/runinput.cc b/src/tools/ftfuzzer/runinput.cc
new file mode 100644
index 0000000..9de6fb6
--- /dev/null
+++ b/src/tools/ftfuzzer/runinput.cc
@@ -0,0 +1,44 @@
+#include <assert.h>
+#include <stdio.h>
+#include <string.h>
+#include <stdlib.h>
+#include <stdint.h>
+
+
+  extern "C" void
+  LLVMFuzzerTestOneInput( const uint8_t*  data,
+                          size_t          size );
+
+
+  unsigned char a[1 << 24];
+
+
+  int
+  main( int     argc,
+        char*  *argv )
+  {
+    assert( argc >= 2 );
+
+    for ( int i = 1; i < argc; i++ )
+    {
+      fprintf( stderr, "%s\n", argv[i] );
+
+      FILE*  f = fopen( argv[i], "r" );
+      assert( f );
+
+      size_t  n = fread( a, 1, sizeof ( a ), f );
+      fclose( f );
+      if ( !n )
+        continue;
+
+      unsigned char*  b = (unsigned char*)malloc( n );
+      memcpy( b, a, n );
+
+      LLVMFuzzerTestOneInput( b, n );
+
+      free( b );
+    }
+  }
+
+
+/* END */
-- 
2.6.2

From 121122416d36126d3ce46287e9617690722b83e9 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 8 Oct 2015 08:55:15 +0200
Subject: [PATCH 026/110] [type1] Protect against invalid number of subroutines
 (#46150).

* src/type1/t1load.c (parse_subrs): Check number of
`Subrs' dictionary entries against size of data stream.
---
 ChangeLog          |  7 +++++++
 src/type1/t1load.c | 15 +++++++++++++++
 2 files changed, 22 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 5286ee8..8fb955e 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-08  Werner Lemberg  <wl@gnu.org>
+
+	[type1] Protect against invalid number of subroutines (#46150).
+
+	* src/type1/t1load.c (parse_subrs): Check number of
+	`Subrs' dictionary entries against size of data stream.
+
 2015-10-07  Kostya Serebryany  <kcc@google.com>
 
 	[ftfuzzer] Add support for LLVM's LibFuzzer.
diff --git a/src/type1/t1load.c b/src/type1/t1load.c
index dbf4eaf..01fb60f 100644
--- a/src/type1/t1load.c
+++ b/src/type1/t1load.c
@@ -1420,6 +1420,21 @@
     }
 
     num_subrs = (FT_Int)T1_ToInt( parser );
+    if ( num_subrs < 0 )
+    {
+      parser->root.error = FT_THROW( Invalid_File_Format );
+      return;
+    }
+
+    /* we certainly need more than 8 bytes per subroutine */
+    if ( num_subrs > ( parser->root.limit - parser->root.cursor ) >> 3 )
+    {
+      FT_TRACE0(( "parse_subrs: adjusting number of subroutines"
+                  " (from %d to %d)\n",
+                  num_subrs,
+                  ( parser->root.limit - parser->root.cursor ) >> 3 ));
+      num_subrs = ( parser->root.limit - parser->root.cursor ) >> 3;
+    }
 
     /* position the parser right before the `dup' of the first subr */
     T1_Skip_PS_Token( parser );         /* `array' */
-- 
2.6.2

From 983b00ec8667baf6cd6b23c420d94c681ffd2ec4 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 8 Oct 2015 18:44:45 +0200
Subject: [PATCH 027/110] [sfnt] Fix some signed overflows (#46149).

* src/sfnt/ttsbit.c (tt_face_load_strike_metrics)
<TT_SBIT_TABLE_TYPE_SBIX>: Use `FT_MulDiv'.
---
 ChangeLog         |  7 +++++++
 src/sfnt/ttsbit.c | 24 +++++++++++++-----------
 2 files changed, 20 insertions(+), 11 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 8fb955e..066136a 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-08  Werner Lemberg  <wl@gnu.org>
 
+	[sfnt] Fix some signed overflows (#46149).
+
+	* src/sfnt/ttsbit.c (tt_face_load_strike_metrics)
+	<TT_SBIT_TABLE_TYPE_SBIX>: Use `FT_MulDiv'.
+
+2015-10-08  Werner Lemberg  <wl@gnu.org>
+
 	[type1] Protect against invalid number of subroutines (#46150).
 
 	* src/type1/t1load.c (parse_subrs): Check number of
diff --git a/src/sfnt/ttsbit.c b/src/sfnt/ttsbit.c
index 3b351ec..8235255 100644
--- a/src/sfnt/ttsbit.c
+++ b/src/sfnt/ttsbit.c
@@ -269,11 +269,11 @@
     case TT_SBIT_TABLE_TYPE_SBIX:
       {
         FT_Stream       stream = face->root.stream;
-        FT_UInt         offset, upem;
-        FT_UShort       ppem, resolution;
+        FT_UInt         offset;
+        FT_UShort       upem, ppem, resolution;
         TT_HoriHeader  *hori;
         FT_ULong        table_size;
-        FT_Pos          ppem_, upem_; /* to reduce casts */
+        FT_Pos          ppem_; /* to reduce casts */
 
         FT_Error  error;
         FT_Byte*  p;
@@ -307,14 +307,16 @@
         metrics->y_ppem = ppem;
 
         ppem_ = (FT_Pos)ppem;
-        upem_ = (FT_Pos)upem;
-
-        metrics->ascender    = ppem_ * hori->Ascender * 64 / upem_;
-        metrics->descender   = ppem_ * hori->Descender * 64 / upem_;
-        metrics->height      = ppem_ * ( hori->Ascender -
-                                         hori->Descender +
-                                         hori->Line_Gap ) * 64 / upem_;
-        metrics->max_advance = ppem_ * hori->advance_Width_Max * 64 / upem_;
+
+        metrics->ascender =
+          FT_MulDiv( hori->Ascender, ppem_ * 64, upem );
+        metrics->descender =
+          FT_MulDiv( hori->Descender, ppem_ * 64, upem );
+        metrics->height =
+          FT_MulDiv( hori->Ascender - hori->Descender + hori->Line_Gap,
+                     ppem_ * 64, upem );
+        metrics->max_advance =
+          FT_MulDiv( hori->advance_Width_Max, ppem_ * 64, upem );
 
         return error;
       }
-- 
2.6.2

From 06c2d3324e8a8dbe153d51129adadd8d8eb4f834 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 8 Oct 2015 21:31:57 +0200
Subject: [PATCH 028/110] [type42] Protect against invalid number of glyphs
 (#46159).

* src/type42/t42parse.c (t42_parse_charstrings): Check number of
`CharStrings' dictionary entries against size of data stream.
---
 ChangeLog             |  7 +++++++
 src/type42/t42parse.c | 11 +++++++++++
 2 files changed, 18 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 066136a..f4e30c6 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-08  Werner Lemberg  <wl@gnu.org>
 
+	[type42] Protect against invalid number of glyphs (#46159).
+
+	* src/type42/t42parse.c (t42_parse_charstrings): Check number of
+	`CharStrings' dictionary entries against size of data stream.
+
+2015-10-08  Werner Lemberg  <wl@gnu.org>
+
 	[sfnt] Fix some signed overflows (#46149).
 
 	* src/sfnt/ttsbit.c (tt_face_load_strike_metrics)
diff --git a/src/type42/t42parse.c b/src/type42/t42parse.c
index 003b63e..a32d496 100644
--- a/src/type42/t42parse.c
+++ b/src/type42/t42parse.c
@@ -795,6 +795,17 @@
         error = FT_THROW( Invalid_File_Format );
         goto Fail;
       }
+
+      /* we certainly need more than 4 bytes per glyph */
+      if ( loader->num_glyphs > ( limit - parser->root.cursor ) >> 2 )
+      {
+        FT_TRACE0(( "t42_parse_charstrings: adjusting number of glyphs"
+                    " (from %d to %d)\n",
+                    loader->num_glyphs,
+                    ( limit - parser->root.cursor ) >> 2 ));
+        loader->num_glyphs = ( limit - parser->root.cursor ) >> 2;
+      }
+
     }
     else if ( *parser->root.cursor == '<' )
     {
-- 
2.6.2

From d98053c9971b6305861d301a9d5e9ed6fe18a4f9 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 8 Oct 2015 23:17:41 +0200
Subject: [PATCH 029/110] [pcf] Protect against invalid number of TOC entries
 (#46159).

* src/pcf/pcfread.c (pcf_read_TOC): Check number of TOC entries
against size of data stream.
---
 ChangeLog         |  7 +++++++
 src/pcf/pcfread.c | 14 +++++++++++---
 2 files changed, 18 insertions(+), 3 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index f4e30c6..a22466b 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-08  Werner Lemberg  <wl@gnu.org>
 
+	[pcf] Protect against invalid number of TOC entries (#46159).
+
+	* src/pcf/pcfread.c (pcf_read_TOC): Check number of TOC entries
+	against size of data stream.
+
+2015-10-08  Werner Lemberg  <wl@gnu.org>
+
 	[type42] Protect against invalid number of glyphs (#46159).
 
 	* src/type42/t42parse.c (t42_parse_charstrings): Check number of
diff --git a/src/pcf/pcfread.c b/src/pcf/pcfread.c
index afa1480..afad278 100644
--- a/src/pcf/pcfread.c
+++ b/src/pcf/pcfread.c
@@ -102,11 +102,19 @@ THE SOFTWARE.
          FT_STREAM_READ_FIELDS( pcf_toc_header, toc ) )
       return FT_THROW( Cannot_Open_Resource );
 
-    if ( toc->version != PCF_FILE_VERSION                 ||
-         toc->count   >  FT_ARRAY_MAX( face->toc.tables ) ||
-         toc->count   == 0                                )
+    if ( toc->version != PCF_FILE_VERSION ||
+         toc->count   == 0                )
       return FT_THROW( Invalid_File_Format );
 
+    /* we need 16 bytes per TOC entry */
+    if ( toc->count > stream->size >> 4 )
+    {
+      FT_TRACE0(( "pcf_read_TOC: adjusting number of tables"
+                  " (from %d to %d)\n",
+                  toc->count, stream->size >> 4 ));
+      toc->count = stream->size >> 4;
+    }
+
     if ( FT_NEW_ARRAY( face->toc.tables, toc->count ) )
       return FT_THROW( Out_Of_Memory );
 
-- 
2.6.2

From c12956e700641ed330c6a2ef764963b57ccdabc4 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Fri, 9 Oct 2015 09:38:32 +0200
Subject: [PATCH 030/110] * src/gzip/ftgzip.c (FT_Stream_OpenGzip): Use real
 stream size.

---
 ChangeLog         | 4 ++++
 src/gzip/ftgzip.c | 6 +++++-
 2 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index a22466b..afd34e9 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,7 @@
+2015-10-09  Werner Lemberg  <wl@gnu.org>
+
+	* src/gzip/ftgzip.c (FT_Stream_OpenGzip): Use real stream size.
+
 2015-10-08  Werner Lemberg  <wl@gnu.org>
 
 	[pcf] Protect against invalid number of TOC entries (#46159).
diff --git a/src/gzip/ftgzip.c b/src/gzip/ftgzip.c
index 422035c..27c6254 100644
--- a/src/gzip/ftgzip.c
+++ b/src/gzip/ftgzip.c
@@ -691,9 +691,13 @@
         }
         error = FT_Err_Ok;
       }
+
+      if ( zip_size )
+        stream->size = zip_size;
+      else
+        stream->size  = 0x7FFFFFFFL;  /* don't know the real size! */
     }
 
-    stream->size  = 0x7FFFFFFFL;  /* don't know the real size! */
     stream->pos   = 0;
     stream->base  = NULL;
     stream->read  = ft_gzip_stream_io;
-- 
2.6.2

From d353f6e0123a0acffe5068b2e5d0cd2b5c93d196 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 10 Oct 2015 06:54:46 +0200
Subject: [PATCH 031/110] * src/pcf/pcfread.c (pcf_read_TOC): Check stream size
 (#46162).

---
 ChangeLog         | 4 ++++
 src/pcf/pcfread.c | 3 +++
 2 files changed, 7 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index afd34e9..4cc2e53 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,7 @@
+2015-10-10  Werner Lemberg  <wl@gnu.org>
+
+	* src/pcf/pcfread.c (pcf_read_TOC): Check stream size (#46162).
+
 2015-10-09  Werner Lemberg  <wl@gnu.org>
 
 	* src/gzip/ftgzip.c (FT_Stream_OpenGzip): Use real stream size.
diff --git a/src/pcf/pcfread.c b/src/pcf/pcfread.c
index afad278..6a248cf 100644
--- a/src/pcf/pcfread.c
+++ b/src/pcf/pcfread.c
@@ -106,6 +106,9 @@ THE SOFTWARE.
          toc->count   == 0                )
       return FT_THROW( Invalid_File_Format );
 
+    if ( stream->size < 16 )
+      return FT_THROW( Invalid_File_Format );
+
     /* we need 16 bytes per TOC entry */
     if ( toc->count > stream->size >> 4 )
     {
-- 
2.6.2

From c220d8b498a66e241872ea4b39a8902177e5fac3 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 10 Oct 2015 08:13:04 +0200
Subject: [PATCH 032/110] [truetype] Better protection against malformed GX
 data (#46166).

* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Correctly
handle empty `localpoints' array.
---
 ChangeLog              | 7 +++++++
 src/truetype/ttgxvar.c | 3 +++
 2 files changed, 10 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 4cc2e53..20e8b47 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-10  Werner Lemberg  <wl@gnu.org>
 
+	[truetype] Better protection against malformed GX data (#46166).
+
+	* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Correctly
+	handle empty `localpoints' array.
+
+2015-10-10  Werner Lemberg  <wl@gnu.org>
+
 	* src/pcf/pcfread.c (pcf_read_TOC): Check stream size (#46162).
 
 2015-10-09  Werner Lemberg  <wl@gnu.org>
diff --git a/src/truetype/ttgxvar.c b/src/truetype/ttgxvar.c
index dd9e250..e838b87 100644
--- a/src/truetype/ttgxvar.c
+++ b/src/truetype/ttgxvar.c
@@ -1950,6 +1950,9 @@
 #endif
       }
 
+      else if ( localpoints == NULL )
+        ; /* failure, ignore it */
+
       else
       {
 #ifdef FT_DEBUG_LEVEL_TRACE
-- 
2.6.2

From da34673e54e2fd03f25b69a3a3c5bf2c6862c866 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 10 Oct 2015 10:21:27 +0200
Subject: [PATCH 033/110] [truetype] More sanity tests for GX handling.

These tests should mainly help avoid unnecessarily large memory
allocations in case of malformed fonts.

* src/truetype/ttgxvar.c (ft_var_readpackedpoints,
ft_var_readpackeddeltas): Check number of points against stream
size.
(ft_var_load_avar): Check `pairCount' against table length.
(ft_var_load_gvar): Check `globalCoordCount' and `glyphCount'
against table length.
(tt_face_vary_cvt): Check `tupleCount' and `offsetToData'.
Fix trace.
(TT_Vary_Apply_Glyph_Deltas): Fix trace.
Free `sharedpoints' to avoid memory leak.
---
 ChangeLog              | 18 +++++++++++++
 src/truetype/ttgxvar.c | 69 ++++++++++++++++++++++++++++++++++++++++----------
 2 files changed, 74 insertions(+), 13 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 20e8b47..9062221 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,23 @@
 2015-10-10  Werner Lemberg  <wl@gnu.org>
 
+	[truetype] More sanity tests for GX handling.
+
+	These tests should mainly help avoid unnecessarily large memory
+	allocations in case of malformed fonts.
+
+	* src/truetype/ttgxvar.c (ft_var_readpackedpoints,
+	ft_var_readpackeddeltas): Check number of points against stream
+	size.
+	(ft_var_load_avar): Check `pairCount' against table length.
+	(ft_var_load_gvar): Check `globalCoordCount' and `glyphCount'
+	against table length.
+	(tt_face_vary_cvt): Check `tupleCount' and `offsetToData'.
+	Fix trace.
+	(TT_Vary_Apply_Glyph_Deltas): Fix trace.
+	Free `sharedpoints' to avoid memory leak.
+
+2015-10-10  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] Better protection against malformed GX data (#46166).
 
 	* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Correctly
diff --git a/src/truetype/ttgxvar.c b/src/truetype/ttgxvar.c
index e838b87..b8ff141 100644
--- a/src/truetype/ttgxvar.c
+++ b/src/truetype/ttgxvar.c
@@ -149,6 +149,12 @@
       n  |= FT_GET_BYTE();
     }
 
+    if ( n > stream->size - stream->pos )
+    {
+      FT_TRACE1(( "ft_var_readpackedpoints: number of points too large\n" ));
+      return NULL;
+    }
+
     if ( FT_NEW_ARRAY( points, n ) )
       return NULL;
 
@@ -233,6 +239,12 @@
     FT_UNUSED( error );
 
 
+    if ( delta_cnt > stream->size - stream->pos )
+    {
+      FT_TRACE1(( "ft_var_readpackeddeltas: number of points too large\n" ));
+      return NULL;
+    }
+
     if ( FT_NEW_ARRAY( deltas, delta_cnt ) )
       return NULL;
 
@@ -341,7 +353,8 @@
       FT_TRACE5(( "  axis %d:\n", i ));
 
       segment->pairCount = FT_GET_USHORT();
-      if ( FT_NEW_ARRAY( segment->correspondence, segment->pairCount ) )
+      if ( (FT_ULong)segment->pairCount * 4 > table_len                ||
+           FT_NEW_ARRAY( segment->correspondence, segment->pairCount ) )
       {
         /* Failure.  Free everything we have done so far.  We must do */
         /* it right now since loading the `avar' table is optional.   */
@@ -447,10 +460,6 @@
     if ( FT_STREAM_READ_FIELDS( gvar_fields, &gvar_head ) )
       goto Exit;
 
-    blend->tuplecount  = gvar_head.globalCoordCount;
-    blend->gv_glyphcnt = gvar_head.glyphCount;
-    offsetToData       = gvar_start + gvar_head.offsetToData;
-
     if ( gvar_head.version != 0x00010000L )
     {
       FT_TRACE1(( "bad table version\n" ));
@@ -458,8 +467,6 @@
       goto Exit;
     }
 
-    FT_TRACE2(( "loaded\n" ));
-
     if ( gvar_head.axisCount != (FT_UShort)blend->mmvar->num_axis )
     {
       FT_TRACE1(( "ft_var_load_gvar: number of axes in `gvar' and `cvar'\n"
@@ -468,6 +475,27 @@
       goto Exit;
     }
 
+    /* rough sanity check, ignoring offsets */
+    if ( (FT_ULong)gvar_head.globalCoordCount * gvar_head.axisCount >
+           table_len / 2 )
+    {
+      FT_TRACE1(( "ft_var_load_gvar:"
+                  " invalid number of global coordinates\n" ));
+      error = FT_THROW( Invalid_Table );
+      goto Exit;
+    }
+
+    /* rough sanity check: offsets can be either 2 or 4 bytes, */
+    /* and a single variation needs at least 4 bytes per glyph */
+    if ( (FT_ULong)gvar_head.glyphCount *
+           ( ( gvar_head.flags & 1 ) ? 8 : 6 ) > table_len )
+
+    FT_TRACE2(( "loaded\n" ));
+
+    blend->tuplecount  = gvar_head.globalCoordCount;
+    blend->gv_glyphcnt = gvar_head.glyphCount;
+    offsetToData       = gvar_start + gvar_head.offsetToData;
+
     FT_TRACE5(( "gvar: there are %d shared coordinates:\n",
                 blend->tuplecount ));
 
@@ -1353,13 +1381,25 @@
       goto FExit;
 
     tupleCount   = FT_GET_USHORT();
-    offsetToData = table_start + FT_GET_USHORT();
+    offsetToData = FT_GET_USHORT();
+
+    /* rough sanity test */
+    if ( offsetToData + tupleCount * 4 > table_len )
+    {
+      FT_TRACE2(( "tt_face_vary_cvt:"
+                  " invalid CVT variation array header\n" ));
+
+      error = FT_THROW( Invalid_Table );
+      goto FExit;
+    }
+
+    offsetToData += table_start;
 
-    /* The documentation implies there are flags packed into the        */
-    /* tuplecount, but John Jenkins says that shared points don't apply */
-    /* to `cvar', and no other flags are defined.                       */
+    /* The documentation implies there are flags packed into              */
+    /* `tupleCount', but John Jenkins says that shared points don't apply */
+    /* to `cvar', and no other flags are defined.                         */
 
-    FT_TRACE5(( "cvar: there are %d tuples:\n", tupleCount ));
+    FT_TRACE5(( "cvar: there are %d tuples:\n", tupleCount & 0xFFF ));
 
     for ( i = 0; i < ( tupleCount & 0xFFF ); i++ )
     {
@@ -1833,7 +1873,8 @@
       FT_Stream_SeekSet( stream, here );
     }
 
-    FT_TRACE5(( "gvar: there are %d tuples:\n", tupleCount ));
+    FT_TRACE5(( "gvar: there are %d tuples:\n",
+                tupleCount & GX_TC_TUPLE_COUNT_MASK ));
 
     for ( i = 0; i < ( tupleCount & GX_TC_TUPLE_COUNT_MASK ); i++ )
     {
@@ -2013,6 +2054,8 @@
 
       if ( localpoints != ALL_POINTS )
         FT_FREE( localpoints );
+      if ( sharedpoints != ALL_POINTS )
+        FT_FREE( sharedpoints );
       FT_FREE( deltas_x );
       FT_FREE( deltas_y );
 
-- 
2.6.2

From 8de39a7919ad1bbd433dd62810c91272b7095455 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 10 Oct 2015 13:34:11 +0200
Subject: [PATCH 034/110] [sfnt] Fix infinite loops with broken cmaps (#46167).

* src/sfnt/ttcmap.c (tt_cmap8_char_next, tt_cmap12_next): Take care
of border condidions (i.e., if the loops exit naturally).
---
 ChangeLog         | 7 +++++++
 src/sfnt/ttcmap.c | 6 ++++++
 2 files changed, 13 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 9062221..a3c7ac1 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-10  Werner Lemberg  <wl@gnu.org>
 
+	[sfnt] Fix infinite loops with broken cmaps (#46167).
+
+	* src/sfnt/ttcmap.c (tt_cmap8_char_next, tt_cmap12_next): Take care
+	of border condidions (i.e., if the loops exit naturally).
+
+2015-10-10  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] More sanity tests for GX handling.
 
 	These tests should mainly help avoid unnecessarily large memory
diff --git a/src/sfnt/ttcmap.c b/src/sfnt/ttcmap.c
index c4d9abd..f572508 100644
--- a/src/sfnt/ttcmap.c
+++ b/src/sfnt/ttcmap.c
@@ -1891,7 +1891,10 @@
         /* if `gindex' is invalid, the remaining values */
         /* in this group are invalid, too               */
         if ( gindex >= (FT_UInt)face->num_glyphs )
+        {
+          gindex = 0;
           continue;
+        }
 
         result = char_code;
         break;
@@ -2277,7 +2280,10 @@
         /* if `gindex' is invalid, the remaining values */
         /* in this group are invalid, too               */
         if ( gindex >= (FT_UInt)face->num_glyphs )
+        {
+          gindex = 0;
           continue;
+        }
 
         cmap->cur_charcode = char_code;
         cmap->cur_gindex   = gindex;
-- 
2.6.2

From c14ae9c5fd35342ca37523761f681656cbba07bb Mon Sep 17 00:00:00 2001
From: Alexei Podtelezhnikov <apodtele@gmail.com>
Date: Sat, 10 Oct 2015 22:28:26 -0400
Subject: [PATCH 035/110] * src/base/ftoutln.c (FT_Outline_Get_Orientation):
 Fix overflow (#46149).

---
 ChangeLog          |  7 ++++++-
 src/base/ftoutln.c | 11 +++++++----
 2 files changed, 13 insertions(+), 5 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index a3c7ac1..4bfbe61 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,8 @@
+2015-10-10  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	* src/base/ftoutln.c (FT_Outline_Get_Orientation): Fix overflow
+	(#46149).
+
 2015-10-10  Werner Lemberg  <wl@gnu.org>
 
 	[sfnt] Fix infinite loops with broken cmaps (#46167).
@@ -72,7 +77,7 @@
 
 	* src/tools/ftfuzzer/ftfuzzer.cc, src/tools/runinput.cc: New files.
 
-2015-10-01  Alexei Podtelezhnikov  <apodtele@gmail.com>
+2015-10-06  Alexei Podtelezhnikov  <apodtele@gmail.com>
 
 	[smooth] Faster alternative line renderer.
 
diff --git a/src/base/ftoutln.c b/src/base/ftoutln.c
index 35cc9f5..34cf74e 100644
--- a/src/base/ftoutln.c
+++ b/src/base/ftoutln.c
@@ -1074,13 +1074,16 @@
       FT_Int  last = outline->contours[c];
 
 
-      v_prev = points[last];
+      v_prev.x = points[last].x >> xshift;
+      v_prev.y = points[last].y >> yshift;
 
       for ( n = first; n <= last; n++ )
       {
-        v_cur = points[n];
-        area += ( ( v_cur.y - v_prev.y ) >> yshift ) *
-                ( ( v_cur.x + v_prev.x ) >> xshift );
+        v_cur.x = points[n].x >> xshift;
+        v_cur.y = points[n].y >> yshift;
+
+        area += ( v_cur.y - v_prev.y ) * ( v_cur.x + v_prev.x );
+
         v_prev = v_cur;
       }
 
-- 
2.6.2

From a724dcf5c36aa426719c1c12b88eab94a3b53f25 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sun, 11 Oct 2015 05:50:07 +0200
Subject: [PATCH 036/110] Split off ChangeLog.25.

---
 ChangeLog    | 5148 +--------------------------------------------------------
 ChangeLog.25 | 5161 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 5163 insertions(+), 5146 deletions(-)
 create mode 100644 ChangeLog.25

diff --git a/ChangeLog b/ChangeLog
index 4bfbe61..9464b14 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -8,7 +8,7 @@
 	[sfnt] Fix infinite loops with broken cmaps (#46167).
 
 	* src/sfnt/ttcmap.c (tt_cmap8_char_next, tt_cmap12_next): Take care
-	of border condidions (i.e., if the loops exit naturally).
+	of border conditions (i.e., if the loops exit naturally).
 
 2015-10-10  Werner Lemberg  <wl@gnu.org>
 
@@ -2843,5154 +2843,10 @@
 	This starts a series of patches that simplifies the code of the
 	bytecode interpreter.
 
-2014-12-30  Werner Lemberg  <wl@gnu.org>
-
-	* Version 2.5.5 released.
-	=========================
-
-
-	Tag sources with `VER-2-5-5'.
-
-	* docs/VERSION.DLL: Update documentation and bump version number to
-	2.5.5.
-
-	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
-	builds/windows/vc2005/index.html,
-	builds/windows/vc2008/freetype.vcproj,
-	builds/windows/vc2008/index.html,
-	builds/windows/vc2010/freetype.vcxproj,
-	builds/windows/vc2010/index.html,
-	builds/windows/visualc/freetype.dsp,
-	builds/windows/visualc/freetype.vcproj,
-	builds/windows/visualc/index.html,
-	builds/windows/visualce/freetype.dsp,
-	builds/windows/visualce/freetype.vcproj,
-	builds/windows/visualce/index.html,
-	builds/wince/vc2005-ce/freetype.vcproj,
-	builds/wince/vc2005-ce/index.html,
-	builds/wince/vc2008-ce/freetype.vcproj,
-	builds/wince/vc2008-ce/index.html: s/2.5.4/2.5.5/, s/254/255/.
-
-	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 5.
-
-	* builds/unix/configure.raw (version_info): Set to 17:4:11.
-	* CMakeLists.txt (VERSION_PATCH): Set to 5.
-	* docs/CHANGES: Updated.
-
-	* builds/toplevel.mk (dist): Fix typos.
-
-2014-12-24  Alexei Podtelezhnikov <apodtele@gmail.com>
-
-	[base] Formatting and nanooptimizations.
-
-	* src/base/ftcalc.c,
-	* src/base/fttrigon.c: Revise sign restoration.
-
-2014-12-13  Werner Lemberg  <wl@gnu.org>
-
-	* src/pcf/pcfread.c (pcf_read_TOC): Improve fix from 2014-12-08.
-
-2014-12-11  Werner Lemberg  <wl@gnu.org>
-
-	* builds/toplevel.mk (dist): Use older POSIX standard for `tar'.
-
-	Apparently, BSD tar isn't capable yet of handling POSIX-1.2001
-	(contrary to GNU tar), so force the POSIX-1.1988 format.
-
-	Problem reported by Stephen Fisher <sfisher@SDF.ORG>.
-
-2014-12-11  Werner Lemberg  <wl@gnu.org>
-
-	* src/type42/t42parse.c (t42_parse_sfnts): Reject invalid TTF size.
-
-2014-12-11  Werner Lemberg  <wl@gnu.org>
-
-	* src/base/ftobjs.c (FT_Get_Glyph_Name): Fix off-by-one check.
-
-	Problem reported by Dennis Felsing <dennis@felsin9.de>.
-
-2014-12-11  Werner Lemberg  <wl@gnu.org>
-
-	* src/type42/t42parse.c (t42_parse_sfnts): Check `string_size'.
-
-	Problem reported by Dennis Felsing <dennis@felsin9.de>.
-
-2014-12-09  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	[gxvalid] Fix a naming convention conflicting with ftvalid.
-
-	See previous changeset for otvalid.
-
-	* src/gxvalid/{gxvcommn.h, gxvmort.h, gxvmorx.h}: Replace
-	`valid' by `gxvalid'.
-	* src/gxvalid/{gxvbsln.c, gxvcommn.c, gxvfeat.c, gxvjust.c,
-	gxvkern.c, gxvlcar.c, gxvmort.c, gxvmort0.c, gxvmort1.c,
-	gxvmort2.c, gxvmort4.c, gxvmort5.c, gxvmorx.c, gxvmorx0.c,
-	gxvmorx1.c, gxvmorx2.c, gxvmorx4.c, gxvmorx5.c, gxvopbd.c,
-	gxvprop.c, gxvtrak.c}: Replace `valid' by `gxvalid' if
-	it is typed as GXV_Validator.
-
-2014-12-09  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	[otvalid] Fix a naming convention conflicting with ftvalid.
-
-	Some prototypes in ftvalid.h use `valid' for the variables
-	typed as FT_Validator.  Their implementations in src/base/
-	ftobjs.c and utilizations in src/sfnt/ttcmap.c do similar.
-
-	Some macros in otvcommn.h assume the exist of the variable
-	`valid' typed as OTV_Validator in the caller.
-
-	Mixing these two conventions cause invalid pointer conversion
-	and unexpected SEGV in longjmp.  To prevent it, all variables
-	typed as OTV_Validator are renamed to `otvalid'.
-
-	* src/otvalid/otvcommn.h: Replace `valid' by `otvalid'.
-	* src/otvalid/{otvcommn.c, otvbase.c, otvgdef.c, otvgpos.c,
-	otvgsub.c, otvjstf.c, otvmath.c}: Replace `valid' by `otvalid'
-	if it is typed as OTV_Validator.
-
-2014-12-09  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	[ftvalid] Introduce FT_THROW() in FT_INVALID_XXX macros.
-
-	Original patch is designed by Werner Lemberg.  Extra part
-	for otvalid and gxvalid are added by suzuki toshiya, see
-	discussion:
-	http://lists.nongnu.org/archive/html/freetype-devel/2014-12/msg00002.html
-	http://lists.nongnu.org/archive/html/freetype-devel/2014-12/msg00007.html
-
-	* include/internal/ftvalid.h: Introduce FT_THROW() in FT_INVALID_().
-	* src/gxvalid/gxvcommn.h: Ditto.
-	* src/otvalid/otvcommn.h: Ditto.
-
-2014-12-08  Werner Lemberg  <wl@gnu.org>
-
-	[pcf] Fix Savannah bug #43774.
-
-	Work around `features' of X11's `pcfWriteFont' and `pcfReadFont'
-	functions.  Since the PCF format doesn't have an official
-	specification, we have to exactly follow these functions' behaviour.
-
-	The problem was unveiled with a patch from 2014-11-06, fixing issue
-	#43547.
-
-	* src/pcf/pcfread.c (pcf_read_TOC): Don't check table size for last
-	element.  Instead, assign real size.
-
-2014-12-07  Werner Lemberg  <wl@gnu.org>
-
-	Work around a bug in Borland's C++ compiler.
-
-	See
-
-	  http://qc.embarcadero.com/wc/qcmain.aspx?d=118998
-
-	for Borland's bug tracker entry.
-
-	Reported by Yuliana Zigangirova <zigangirova@inbox.ru>,
-	http://lists.gnu.org/archive/html/freetype-devel/2014-04/msg00001.html.
-
-	* include/internal/ftvalid.h (FT_ValidatorRec), src/smooth/ftgrays.c
-	(gray_TWorker_): Move `ft_jmp_buf' field to be the first element.
-
-2014-12-07  Werner Lemberg  <wl@gnu.org>
-
-	*/*: Decorate hex constants with `U' and `L' where appropriate.
-
-2014-12-07  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Prevent memory leak for buggy fonts.
-
-	* src/truetype/ttobjs.c (tt_size_done): Unconditionally call
-	`tt_size_done_bytecode'.
-
-2014-12-06  Werner Lemberg  <wl@gnu.org>
-
-	* Version 2.5.4 released.
-	=========================
-
-
-	Tag sources with `VER-2-5-4'.
-
-	* docs/VERSION.DLL: Update documentation and bump version number to
-	2.5.4.
-
-	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
-	builds/windows/vc2005/index.html,
-	builds/windows/vc2008/freetype.vcproj,
-	builds/windows/vc2008/index.html,
-	builds/windows/vc2010/freetype.vcxproj,
-	builds/windows/vc2010/index.html,
-	builds/windows/visualc/freetype.dsp,
-	builds/windows/visualc/freetype.vcproj,
-	builds/windows/visualc/index.html,
-	builds/windows/visualce/freetype.dsp,
-	builds/windows/visualce/freetype.vcproj,
-	builds/windows/visualce/index.html,
-	builds/wince/vc2005-ce/freetype.vcproj,
-	builds/wince/vc2005-ce/index.html,
-	builds/wince/vc2008-ce/freetype.vcproj,
-	builds/wince/vc2008-ce/index.html: s/2.5.3/2.5.4/, s/253/254/.
-
-	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 4.
-
-	* builds/unix/configure.raw (version_info): Set to 17:3:11.
-	* CMakeLists.txt (VERSION_PATCH): Set to 4.
-	* docs/CHANGES: Updated.
-
-2014-12-04  Werner Lemberg  <wl@gnu.org>
-
-	docs/CHANGES: Updated, formatted.
-
-2014-12-04  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Modify an FT_ASSERT.
-
-	* src/cff/cf2hints.c (cf2_hintmap_map): After the fix for Savannah
-	bug #43661, the test font `...aspartam.otf' still triggers an
-	FT_ASSERT.  Since hintmap still works with count==0, ...
-	(cf2_glyphpath_lineTo, cf2_glyphpath_curveTo): ... add that term to
-	suppress the assert.
-
-2014-12-04  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Fix Savannah bug #43661.
-
-	* src/cff/cf2intrp.c (cf2_interpT2CharString) <cf2_cmdHSTEM,
-	cf2_cmdVSTEM, cf2_cmdHINTMASK>: Don't append to stem arrays after
-	hintmask is constructed.
-
-	* src/cff/cf2hints.c (cf2_hintmap_build): Add defensive code to
-	avoid reading past end of hintmask.
-
-2014-12-03  Werner Lemberg  <wl@gnu.org>
-
-	docs/CHANGES: Updated.
-
-2014-12-03  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Better fix for conversion specifiers in debug messages.
-
-	Using `%ld' for pointer differences causes warnings on 32bit
-	platforms.  The correct type would be (the relatively new) `%td',
-	however, this is missing on some important platforms.
-
-	This patch improves the change from 2014-11-28.
-
-	* src/autofit/afhints.c (AF_INDEX_NUM): Use `int' typecast.  Our
-	pointer differences are always sufficiently small.
-	(af_glyph_hints_dump_points, af_glyph_hints_dump_segments,
-	af_glyph_hints_dump_edge): Revert to `%d' and use `AF_INDEX_NUM'.
-
-2014-12-03  Werner Lemberg  <wl@gnu.org>
-
-	FT_Sfnt_Tag: s/ft_sfnt_xxx/FT_SFNT_XXX/ for orthogonality.
-
-	All public FreeType enumeration and flag values are uppercase...
-
-	* include/tttables.h (FT_Sfnt_Tag): Implement it.  For backwards
-	compatilibity, retain the old values as macros.
-
-	* src/base/ftfstype.c (FT_Get_FSType_Flags), src/sfnt/sfdriver.c
-	(get_sfnt_table): Updated.
-
-2014-12-02  Werner Lemberg  <wl@gnu.org>
-
-	* include/*: Improve structure of documentation.
-
-	. Add and update many `<Order>' tags.
-	. Apply various documentation fixes.
-	. Remove details to deprecated (or never implemented) data.
-
-2014-12-02  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Always handle `<Order>' section elements.
-
-	Previously, those elements were handled only for sections present in
-	a `<Sections>' chapter element.
-
-	* src/tools/docmaker/content.py (ContentProcessor::finish):
-	Implement it.
-
-2014-12-02  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Properly handle empty rows in Synopsis.
-
-	* src/tools/docmaker/tohtml.py (HtmlFormatter::section_enter): Emit
-	`&nbsp;' for empty fields.
-
-2014-12-02  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Thinko.
-
-	* src/tools/docmaker/content.py (DocBlock::get_markup_words_all):
-	Emit `/empty/' string for first element also.
-
-2014-12-02  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Honour empty lines in `<Order>' section element.
-
-	This greatly improves the readability of the `Synopsis' links.
-
-	* src/tools/docmaker/content.py (DocBlock::get_markup_words_all):
-	Insert string `/empty/' between items.
-
-	* src/tools/docmaker/formatter.py (Formatter::section_dump): Make it
-	robust against nonexistent keys.
-
-	* src/tools/docmaker/tohtml.py (HtmlFormatter::section_enter): Emit
-	empty <td> elements for `/empty/'.
-
-2014-12-02  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Ensure Python 3 compatibility.
-
-	* src/tools/docmaker/content.py (ContentProcessor::set_section,
-	ContentProcessor::finish): Replace `has_key' function with `in'
-	keyword.
-
-	* src/tools/docmaker/formatter.py (Formatter::__init__): Replace
-	sorting function with a key generator.
-	(Formatter::add_identifier): Replace `has_key' function with `in'
-	keyword.
-
-	* src/tools/docmaker/tohtml.py (HtmlFormatter::html_source_quote):
-	Replace `has_key' function with `in' keyword.
-	(HtmlFormatter::index_exit, HtmlFormatter::section_enter): Use
-	integer division.
-	s/<>/>/.
-
-	* src/tools/docmaker/utils.py: Import `itertools'.
-	(index_sort): Replaced by...
-	(index_key): ... this new key generator (doing exactly the same).
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Don't output a block multiple times.
-
-	This bug was hidden by not processing all lines of `<Order>' blocks.
-
-	* src/tools/docmaker/formatter.py (Formatter::section_dump): Filter
-	out field names.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Use field values as HTML link targets where possible.
-
-	* src/tools/docmaker/tohtml.py (HtmlFormatter::make_block_url):
-	Accept second, optional argument to specify a name.
-	(HtmlFormatter::html_source_quote): Link to field ID if possible.
-	(HtmlFormatter::print_html_field_list): Emit `id' attribute.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Allow empty lines in `<Order>' blocks.
-
-	Before this patch, the suggested order of entries stopped at the
-	first empty line.
-
-	Obviously, nobody noticed that this problem caused a much reduced
-	set of links in the `Synopsis' sections; in particular, the
-	`<Order>' blocks contain a lot of entries that wouldn't be listed
-	otherwise...
-
-	* src/tools/docmaker/content.py (DocBlock::get_markup_words_all):
-	New function to iterate over all items.
-	(DocSection::process): Use it.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/sources.py (column) [Format 2]: Fix regexp.
-
-	After the single asterisk there must be no other immediately following
-	asterisk.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Improve CSS for vertical spacing.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Improve HTML code for table of contents.
-
-	* src/tools/docmaker/tohtml.py: Introduce a new table class `toc',
-	together with proper CSS.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Provide higher-level markup and simplify HTML.
-
-	* src/tools/docmaker/tohtml.py: Instead of using extraneous `<div>'
-	elements, use CSS descendants (of class `section') to format the
-	data.
-
-	Also remove reduntant <p> and <br> elements, replacing them with
-	proper CSS.
-
-	Globally reduce page width to 75%.
-
-	(block_header): Rename <div> class to `section'.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Add `top' links after blocks.
-
-	* src/tools/docmaker/tohtml.py (block_footer_middle): Implement it.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Improve CSS for fields.
-
-	Make fields align horizontally relative to full line width.
-
-2014-11-29  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Fix index and TOC templates.
-
-	This thinko was introduced 2014-11-27.
-
-2014-11-28  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Format field lists with CSS.
-
-	This also simplifies the inserted HTML code.
-
-	* src/tools/docmaker/tohtml.py
-	(HtmlFormatter::print_html_field_list): Do it.
-
-2014-11-28  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	Fix compiler warning to the comparison between signed and
-	unsigned variable.
-
-	* src/pfr/pfrsbit.c (pfr_slot_load_bitmap): Fix the comparison
-	between `ypos + ysize' and FT_INT_{MAX,MIN}.
-
-2014-11-28  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Replace empty `<td>' with CSS.
-
-	* src/tools/docmaker/tohtml.py (HtmlFormatter::section_enter): Do
-	it.
-
-2014-11-28  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Replace some `<table>' tags with `<h4>' and `<div>'.
-
-	* src/tools/docmaker/tohtml.py (marker_*): Use `<h4>'.
-	(source_*): Use `<div>'.
-	(HtmlFormatter::block_enter): s/<h4>/<h3>/.
-
-2014-11-28  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	Fix compiler warning to conversion specifiers in debug messages.
-
-	* src/autofit/afhints.c (af_glyph_hints_dump_points): Add length
-	modifier to dump long integers.
-	(af_glyph_hints_dump_segments, af_glyph_hints_dump_edges): Ditto.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Use more CSS for index.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Replace `name' attribute of `<a>' with `id'.
-
-	* src/tools/docmaker/tohtml.py (HtmlFormatter::block_enter): Do it.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Remove remaining `width' attributes.
-
-	For `Index' and `TOC' links, we now simply use the `text-align' CSS
-	property of `<td>' to enforce flush-left and flush-right,
-	eliminating the hack with an empty, full-width `<td>' element
-	inbetween.
-
-	The change also enforces the same (smaller) size for all index and
-	TOC links.
-
-2014-11-27  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	* src/cff/cf2font.c: Include `ftcalc.h' to use FT_MSB(),
-	cf2font.c could not find it under `make multi' build.
-
-2014-11-27  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Remove
-	unrequired negative value check for `width' and `height'.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: More HTML table refactoring.
-
-	Replace some `<table>' tags with `<div>' to simplify structure.
-
-	Move `bgcolor' attribute to CSS.
-
-	Replace most `width' attributes with CSS.  The remaining instances
-	(providing a similar effect as LaTeX's `\hfill' command) are removed
-	in a later patch.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Replace <font> with CSS.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Center <table> with CSS.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Replace `<center>' with `<div>'.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/tohtml.py: Remove redundant `<center>' tags.
-
-	This starts a series of commits into the direction of generating
-	valid HTML 5 code, especially using much more CSS.
-
-2014-11-27  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	Prevent too negative values (< FT_INT_MIN) in bitmap metrics,
-	suggested by Alexei.
-
-	* src/pfr/pfrsbit.c (pfr_slot_load_bitmap): Prevent too
-	negative values in `xpos' and `ypos + ysize'.
-	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Prevent
-	too negative values in `x_left' and `y_top'.  Either negative
-	values in `width' and `height' are checked.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Produce better HTML code.
-
-	* src/tools/docmaker/tohtml.py: Always use double quotes for
-	attribute values.
-	(source_footer): Close `td' and `tr' groups.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	Use better way to disable creation of .pyc files for `make refdoc'.
-
-	Python 2.6 was released in 2008...
-
-	* builds/freetype.mk (refdoc): Use python's `-B' option.
-
-	* builds/detect.mk (std_setup, dos_setup): Mention required python
-	version for `refdoc' target.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/tools/docmaker/sources.py (re_bold, re_italic): Use
-	non-grouping parentheses.
-	* src/tools/docmaker/tohtml.py (HtmlFormatter::make_html_word):
-	Updated.
-
-2014-11-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/base/ftobjs.c (FT_Get_Glyph_Name): Fix compiler warning.
-
-	Introdruced in previous change.  Reported by Alexei.
-
-2014-11-26  Werner Lemberg  <wl@gnu.org>
-
-	* src/*: Add checks for parameters of API functions where missing.
-
-	`API functions' are functions tagged with `FT_EXPORT_DEF'.
-
-	Besides trivial fixes, the following changes are included, too.
-
-	* src/base/ftbdf.c (FT_Get_BDF_Charset_ID, FT_Get_BDF_Property): Set
-	error code if no service is available.
-
-	* src/base/ftinit.c (FT_Done_FreeType): Change return value for
-	invalid `library' parameter to `Invalid_Library_Handle'.
-
-	* src/base/ftobjs.c (FT_New_Size): Change return value for invalid
-	`asize' parameter to `Invalid_Argument'.
-
-	* src/base/ftoutln.c (FT_Outline_Copy): Change return value for
-	invalid `source' and `target' parameters to `Invalid_Outline'.
-	(FT_Outline_Done_Internal): Change return value for invalid
-	`outline' parameter to `Invalid_Outline'.
-
-2014-11-26  Werner Lemberg  <wl@gnu.org>
-
-	* src/cache/ftcbasic.c: Use single calls to `FT_TRACE'.
-
-2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	* src/base/ftobj.c (Mac_Read_POST_Resource): Additional
-	overflow check in the summation of POST fragment lengths,
-	suggested by Mateusz Jurczyk <mjurczyk@google.com>.
-
-2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	* src/base/ftobjs.c (Mac_Read_POST_Resource): Insert comments
-	and fold too long tracing messages.
-
-2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	Fix Savannah bug #43540.
-
-	* src/base/ftmac.c (parse_fond): Prevent a buffer overrun
-	caused by a font including too many (> 63) strings to store
-	names[] table.
-
-2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	* src/base/ftobjs.c (Mac_Read_POST_Resource): Use unsigned long
-	variables to read the lengths in POST fragments.  Suggested by
-	Mateusz Jurczyk <mjurczyk@google.com>.
-
-2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	Fix Savannah bug #43539.
-
-	* src/base/ftobjs.c (Mac_Read_POST_Resource): Fix integer overflow
-	by a broken POST table in resource-fork.
-
-2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	Fix Savannah bug #43538.
-
-	* src/base/ftobjs.c (Mac_Read_POST_Resource): Fix integer overflow
-	by a broken POST table in resource-fork.
-
-2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	* src/base/ftobjs.c (Mac_Read_POST_Resource): Avoid memory leak
-	by a broken POST table in resource-fork.  Return after freeing
-	the buffered POST table when it is found to be broken.
-
-2014-11-25  Werner Lemberg  <wl@gnu.org>
-
-	*/*: s/Invalid_Argument/Invalid_Size_Handle/ where appropriate.
-
-2014-11-25  Werner Lemberg  <wl@gnu.org>
-
-	*/*: s/Invalid_Argument/Invalid_Stream_Handle/ where appropriate.
-
-2014-11-25  Werner Lemberg  <wl@gnu.org>
-
-	*/*: s/Invalid_Argument/Invalid_Library_Handle/ where appropriate.
-
-2014-11-25  Werner Lemberg  <wl@gnu.org>
-
-	*/*: s/Invalid_Argument/Invalid_Outline/ where appropriate.
-
-2014-11-25  Werner Lemberg  <wl@gnu.org>
-
-	*/*: s/Invalid_Argument/Invalid_Face_Handle/ where appropriate.
-
-2014-11-24  Werner Lemberg  <wl@gnu.org>
-
-	[Savannah bug #43682] Adjust some renderer callbacks.
-
-	* src/raster/ftraster.c (ft_black_set_mode): Change return type to
-	`int' to stay in sync with `FT_Renderer_SetModeFunc' prototype.
-
-	* src/smooth/ftgrays.c (gray_raster_set_mode): New dummy function
-	for orthogonality.
-	(ft_grays_raster): Use it.
-
-2014-11-25  Werner Lemberg  <wl@gnu.org>
-
-	[Savannah bug #43682] Properly handle missing return errors.
-
-	The functions in this patch *do* return non-trivial errors that must
-	be taken care of.
-
-	* src/autofit/afloader.c (af_loader_load_g), src/base/ftobjs.c
-	(FT_Render_Glyph_Internal), src/base/ftoutln.c (FT_Outline_Render),
-	src/cff/cffgload.c (cff_decoder_parse_charstrings) <cff_op_endchar>,
-	src/psaux/psobjs.c (ps_parser_load_field_table), src/psaux/t1decode
-	(t1_decoder_parse_charstrings) <op_endchar>, src/truetype/ttgload.c
-	(load_truetype_glyph <subglyph loop>, tt_loader_init,
-	TT_Load_Glyph), src/truetype/ttgxvar.c (TT_Set_MM_Blend),
-	src/truetype/ttobjs.c (tt_size_run_fpgm, tt_size_run_prep): Do it.
-
-2014-11-25  Werner Lemberg  <wl@gnu.org>
-
-	[Savannah bug #43682] Add/remove `void' casts to some functions.
-
-	We use a cast to indicate that we intentionally ignore a function's
-	return value.  However, this doesn't apply to API functions where
-	errors can only happen for trivially invalid input.
-
-	* src/base/ftstroke.c (FT_Glyph_Stroke, FT_Glyph_StrokeBorder),
-	src/base/ftsynth.c (FT_GlyphSlot_Embolden), src/cff/cffgload.c
-	(cff_slot_load), src/pfr/pfrdrivr.c (pfr_get_kerning),
-	src/type1/t1load.c (parse_encoding), src/type42/t42parse.c
-	(t42_parse_encoding): Do it.
-
-2014-11-25  Werner Lemberg  <wl@gnu.org>
-
-	[Savannah bug #43682] Change some signatures to `void' return type.
-
-	* include/internal/pshints.h (PSH_Globals_SetScaleFunc),
-	include/internal/sfnt.h (TT_Get_Metrics_Func),
-	src/pshinter/pshglob.c (psh_globals_set_scale),
-	src/pshinter/pshrec.c (ps_hints_init), src/sfnt/ttmtx.c
-	(tt_face_get_metrics), src/truetype/ttinterp.c (TT_Goto_CodeRange,
-	TT_Set_CodeRange, TT_Clear_CodeRange, TT_Done_Context,
-	TT_Save_Context): Do it.
-
-	* src/pshinter/pshglob.h, src/pshinter/pshrec.h, src/sfnt/ttmtx.h,
-	src/truetype/ttgload.c (TT_Hint_Glyph), src/truetype/ttinterp.c
-	(TT_Run_Context), src/truetype/ttinterp.h, src/truetype/ttobjs.c
-	(tt_size_run_fpgm, tt_size_run_prep): Updated.
-
-2014-11-24  Werner Lemberg  <wl@gnu.org>
-
-	Remove all code related to FT_MAX_CHARMAP_CACHEABLE.
-
-	This is no longer used.
-
-	* src/base/ftobjs.c, src/cache/ftccmap.c, src/cff/cffobjs.c,
-	src/sfnt/ttcmap.c: Do it.
-
-2014-11-24  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43680.
-
-	This adds an additional constraint to make the fix from 2013-01-25
-	really work.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_image) <index_format==4>:
-	Check `p' before `num_glyphs'.
-
-2014-11-24  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Fix Savannah bug #43679.
-
-	* src/truetype/ttpload.c (tt_face_load_hdmx): Check minimum size of
-	`record_size'.
-
-2014-11-24  Jarkko Pöyry  <jarkko.poyry@gmail.com>
-
-	[cff, pfr, psaux, winfonts] Fix Savannah bug #43676.
-
-	Don't cast cmap init function pointers to an incompatible type.
-
-	Without this patch, the number of parameters between declaration and
-	the real signature differs.  Calling such a function results in
-	undefined behavior.
-
-	  ISO/IEC 9899:TC3 (Committee Draft September 7, 2007)
-	    6.5.2.2 Function calls
-	      9 If the function is defined with a type that is not
-	        compatible with the type (of the expression) pointed to by
-	        the expression that denotes the called function, the
-	        behavior is undefined.
-
-	On certain platforms (c -> js with emscripten) this causes
-	termination of execution or invalid calls because in the emscripten
-	implementation, function pointers of different types are stored in
-	different pointer arrays.  Incorrect pointer type here results in
-	indexing of an incorrect array.
-
-	* src/cff/cffcmap.c (cff_cmap_encoding_init, cff_cmap_unicode_init),
-	src/pfr/pfrcmap.c (pfr_cmap_init), src/psaux/t1cmap.c
-	t1_cmap_standard_init, t1_cmap_expert_init, t1_cmap_custom_init,
-	t1_cmap_unicode_init), src/winfonts/winfnt.c (fnt_cmap_init): Fix
-	signature.
-
-2014-11-24  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43672.
-
-	* src/sfnt/ttkern.c (tt_face_load_kern): Use correct value for
-	minimum table length test.
-
-2014-11-24  Werner Lemberg  <wl@gnu.org>
-
-	[type1, type42] Another fix for Savannah bug #43655.
-
-	* src/type1/t1load.c (parse_charstrings), src/type42/t42parse.c
-	(t42_parse_charstrings): Add another boundary testing.
-
-2014-11-24  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Formatting, copyright, improved documentation.
-
-	* src/tools/docmaker/*: No code changes besides trivial
-	modifications.
-
-2014-11-22  Werner Lemberg  <wl@gnu.org>
-
-	[bdf] Fix Savannah bug #43660.
-
-	* src/bdf/bdflib.c (_bdf_parse_glyphs) <"ENDFONT">: Check
-	`_BDF_GLYPH_BITS'.
-
-2014-11-22  Werner Lemberg  <wl@gnu.org>
-
-	[type42] Allow only embedded TrueType fonts.
-
-	This is a follow-up to Savannah bug #43659.
-
-	* src/type42/t42objs.c (T42_Face_Init): Exclusively use the
-	`truetype' font driver for loading the font contained in the `sfnts'
-	array.
-
-2014-11-22  Werner Lemberg  <wl@gnu.org>
-
-	[type42] Fix Savannah bug #43659.
-
-	* src/type42/t42objs.c (T42_Open_Face): Initialize `face->ttf_size'.
-
-	* src/type42/t42parse.c (t42_parse_sfnts): Always set
-	`face->ttf_size' directly.  This ensures a correct stream size in
-	the call to `FT_Open_Face', which follows after parsing, even for
-	buggy input data.
-	Fix error messages.
-
-2014-11-22  Werner Lemberg  <wl@gnu.org>
-
-	[cff] Fix Savannah bug #43658.
-
-	* src/cff/cf2ft.c (cf2_builder_lineTo, cf2_builder_cubeTo): Handle
-	return values of point allocation routines.
-
-2014-11-22  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43656.
-
-	* src/sfnt/ttcmap.c (tt_cmap4_validate): Fix order of validity
-	tests.
-
-2014-11-21  Werner Lemberg  <wl@gnu.org>
-
-	[type1, type42] Fix Savannah bug #43655.
-
-	* src/type1/t1load.c (parse_charstrings), src/type42/t42parse.c
-	(t42_parse_charstrings): Fix boundary testing.
-
-2014-11-21  Werner Lemberg  <wl@gnu.org>
-
-	* src/pcf/pcfread.c (pcf_get_metrics): Sanitize invalid metrics.
-
-2014-11-21  Werner Lemberg  <wl@gnu.org>
-
-	[ftlcdfil] Obey flow direction.
-
-	* src/base/ftlcdfil.c (_ft_lcd_filter_fir, _ft_lcd_filter_legacy):
-	Handle `up' flow.
-
-2014-11-21  Werner Lemberg  <wl@gnu.org>
-
-	* src/base/ftbitmap.c (FT_Bitmap_Convert): Improve.
-
-	This commit completes argument checks and adds support for different
-	flow directions.
-
-2014-11-21  Werner Lemberg  <wl@gnu.org>
-
-	* src/base/ftbitmap.c (FT_Bitmap_Copy): Improve.
-
-	This commit adds argument checks and support for different flow
-	directions.
-
-2014-11-20  Werner Lemberg  <wl@gnu.org>
-
-	* src/base/ftbitmap.c (FT_Bitmap_New): Check argument.
-
-2014-11-19  Werner Lemberg  <wl@gnu.org>
-
-	Change some fields in `FT_Bitmap' to unsigned type.
-
-	This doesn't break ABI.
-
-	* include/ftimage.h (FT_Bitmap): Make `rows', `width', `num_grays',
-	`pixel_mode', and `palette_mode' unsigned types.
-
-	* src/base/ftbitmap.c: Updated.
-	(FT_Bitmap_Copy): Fix casts.
-
-	* src/cache/ftcsbits.c, src/raster/ftraster.c, src/sfnt/pngshim.c:
-	Updated.
-
-2014-11-19  Werner Lemberg  <wl@gnu.org>
-
-	Make `FT_Bitmap_Convert' correctly handle negative `pitch' values.
-
-	* src/base/ftbitmap.c (FT_Bitmap_Convert): Always use positive value
-	for the pitch while copying data.
-	Correctly set pitch sign in target bitmap.
-
-2014-11-19  Werner Lemberg  <wl@gnu.org>
-
-	Minor code improvement in `FT_Bitmap_Embolden'.
-
-	* src/base/ftbitmap.c (FT_Bitmap_Embolden) <FT_PIXEL_MODE_GRAY[24]>:
-	Fix thinko.
-
-2014-11-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	* src/base/fttrigon.c: Use dedicated `FT_Angle' for arctan table.
-
-2014-11-19  Behdad Esfahbod  <behdad@behdad.org>
-
-	Avoid compiler warnings on x86-64 for `FT_MulFix'.
-
-	`FT_MulFix' takes `FT_Long' parameters as defined in `freetype.h',
-	but several inline implementations of it in `ftcalc.h' take
-	`FT_Int32' arguments.  This is causing compiler warnings on x86-64:
-	If parameters of type `FT_Fixed' (= `FT_Long') are passed to the
-	inline implementation of this function, integer values are truncated
-	from 64bit to 32bit.
-
-	* include/internal/ftcalc.h (FT_MulFix) [FT_MULFIX_ASSEMBLER]: Add
-	casts.
-
-2014-11-15  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43597.
-
-	* src/sfnt/pngshim.c (Load_SBit_Png): Protect against too large
-	bitmaps.
-
-2014-11-12  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43591.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_init): Protect against addition
-	and multiplication overflow.
-
-2014-11-12  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43590.
-
-	* src/sfnt/ttload.c (check_table_dir, tt_face_load_font_dir):
-	Protect against addition overflow.
-
-2014-11-12  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43589.
-
-	* src/sfnt/sfobjs.c (woff_open_font): Protect against addition
-	overflow.
-
-2014-11-12  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43588.
-
-	* src/sfnt/ttcmap.c (tt_cmap8_validate, tt_cmap10_validate,
-	tt_cmap12_validate, tt_cmap13_validate, tt_cmap14_validate): Protect
-	against overflow in additions and multiplications.
-
-2014-11-10  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] CORDIC improvements.
-
-	The scaling between the hypotenuse and its CORDIC approximation is
-	based on regression analysis. The smaller padding for `theta' is
-	justifed by its maximum error of less than 6.
-
-	* src/base/fttrigon.c (ft_trig_downscale): Borrow code from
-	./ftcalc.c (ft_multo64), change linear intercept.
-	(ft_trig_pseudo_polarize): Decrease `theta' padding.
-
-2014-11-09  Werner Lemberg  <wl@gnu.org>
-
-	* src/base/ftstroke.c (ft_stroker_inside): Fix border intersections.
-
-	One more place to check whether `radius' is zero.
-
-	Problem reported by Marco Wertz <marco.wertz@gmx.de>.
-
-2014-11-07  Werner Lemberg  <wl@gnu.org>
-
-	[bdf] Fix Savannah bug #43535.
-
-	* src/bdf/bdflib.c (_bdf_strncmp): New macro that checks one
-	character more than `strncmp'.
-	s/ft_strncmp/_bdf_strncmp/ everywhere.
-
-2014-11-06  Werner Lemberg  <wl@gnu.org>
-
-	[pcf] Fix Savannah bug #43548.
-
-	* src/pcf/pcfread.c (pcf_get_encodings): Add sanity checks for row
-	and column values.
-
-2014-11-06  Werner Lemberg  <wl@gnu.org>
-
-	[pcf] Fix Savannah bug #43547.
-
-	* src/pcf/pcfread.c (pcf_read_TOC): Check `size' and `offset'
-	values.
-
-2014-11-06  Werner Lemberg  <wl@gnu.org>
-
-	* src/pcf/pcfread.c (pcf_read_TOC): Avoid memory leak.
-
-2014-11-03  Infinality  <infinality@infinality.net>
-
-	* src/truetype/ttsubpix.c (COMPATIBILITY_MODE_Rules): Updated.
-
-	The previous commit deteriorates rendering of DejaVu and similar
-	fonts; this gets compensated with this rule.
-
-2014-11-03  Werner Lemberg  <wl@gnu.org>
-
-	* src/truetype/ttinterp.c (Ins_DELTAP): Fix subpixel hinting.
-
-	Before this patch, it was impossible to ever call DELTAP[123] in
-	subpixel hinting mode as described in the ClearType whitepaper; it
-	only worked if in `compatibility mode'.  However, compatibility mode
-	essentially disables SHPIX, completely ruining hinting of
-	ttfautohint output, for example.
-
-	We now follow the whitepaper more closely so that DELTAP[123]
-	instructions for touched points in the non-subpixel direction are
-	executed.
-
-2014-10-31  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[smooth] Improve code readability.
-
-	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Rearrange code.
-
-2014-10-31  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[smooth] Reduce outline translations during rendering.
-
-	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Translate origin
-	virtually by modifying cbox, actually translate outline if cumulative
-	shift is not zero.
-
-2014-10-30  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[smooth] Fix Savannah bug #35604 (cont'd).
-
-	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Remove checks and
-	casts that became unnecessary after the variable type upgrades.
-
-2014-10-29  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[smooth] Improve code readability.
-
-	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Rearrange code.
-
-2014-10-29  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	Unify hypotenuse approximations.
-
-	* include/internal/ftcalc.h (FT_HYPOT): Move macro from here...
-	* include/internal/ftobjs.h: ... to here, next to required `FT_ABS'.
-	* src/smooth/ftgrays.c (gray_render_cubic): Use it here.
-
-2014-10-25  Werner Lemberg  <wl@gnu.org>
-
-	[cff] Test valid darkening parameter macros in `ftoption.h'.
-
-	We no longer need an otherwise unused typedef that can cause a gcc
-	warning.
-	Problem reported by Alexei.
-
-	* src/cff/cffobjs.c (cff_driver_init): Use
-	`CFF_CONFIG_OPTION_DARKENING_PARAMETER_XXX' macros directly.
-	(SET_DARKENING_PARAMETERS): Removed.
-	Compile time tests are now ...
-
-	* devel/ftoption.h, include/config/ftoption.h: ... here.
-
-2014-10-25  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	Improve flat corner definition.
-
-	* include/internal/ftcalc.h (FT_HYPOT): Macro to approximate Euclidean
-	distance with the alpha max plus beta min algorithm.
-	* src/base/ftcalc.c (ft_corner_is_flat): Use it instead of Taxicab
-	metric.
-
-2014-10-23  David Weiß  <David.Weiss@ptvgroup.com>
-
-	[build] Improve property file for vc2010.
-
-	User-defined properties should be empty by default to prevent linker
-	failures.
-
-	* builds/windows/vc2010/freetype.user.props,
-	builds/windows/vc2010/freetype.vcxproj:
-	s/OptionsDirectory/UserOptionDirectory/.
-	Comment out all user options.
-
-2014-10-23  Werner Lemberg  <wl@gnu.org>
-
-	[cff] Work around bug in preprocessor of MSVC 2010.
-
-	We have been hit by
-
-	  https://connect.microsoft.com/VisualStudio/feedback/details/718976/msvc-pr
-
-	* devel/ftoption.h, include/config/ftoption.h: Replace
-	`CFF_CONFIG_OPTION_DARKENING_PARAMETERS' with eight macros
-	`CFF_CONFIG_OPTION_DARKENING_PARAMETER_{X,Y}{1,2,3,4}'.
-
-	* src/cff/cffobjs.c (SET_DARKENING_PARAMETERS): Removed.  We no
-	longer need double expansion.
-	(SET_DARKENING_PARAMETERS_0): Renamed to ...
-	(SET_DARKENING_PARAMETERS): ... this.
-	Update call.
-
-2014-10-20  Werner Lemberg  <wl@gnu.org>
-
-	[sbit] Minor fixes.
-
-	* src/sfnt/ttsbit.c (tt_face_load_sbit) [TT_SBIT_TABLE_TYPE_SBIX]:
-	Accept overlay format also, but emit warning message in that case.
-	(tt_sbit_decoder_load_metrics): Add missing newline to error
-	message.
-	(tt_sbit_load_sbix_image): Add `rgbl' graphic type (as used on iOS
-	7.1) to the list of unsupported formats.
-
-2014-10-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[truetype] Clean up bytecode rounding.
-
-	Zero distance does not have to be treated specially if you follow
-	specifications and check the sign as the very last step of rounding.
-
-	* src/truetype/ttinterp.c (Round_None, Round_To_Grid,
-	Round_Down_To_Grid, Round_Up_To_Grid, Round_To_Double_Grid): Use
-	macros when available, do not check for non-zero distance.
-	(Round_To_Half_Grid, Round_Super, Round_Super_45): Ditto, return phase
-	if sign changed.
-
-2014-10-18  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[truetype] Unwrap engine compensation settings.
-
-	* src/truetype/ttobjs.c (tt_size_init_bytecode): Updated.
-
-2014-10-18  David Weiß  <David.Weiss@ptvgroup.com>
-
-	[build] Add property file to vc2010 project.
-
-	This simplifies custom build configurations, especially for
-	automated build environments.
-
-	* builds/windows/vc2010/freetype.user.props: New configuration file.
-
-	* builds/windows/vc2010/freetype.vcxproj: Include
-	`freetype.user.props' and use its data fields.
-
-	* builds/windows/vc2010/index.html: Updated.
-
-2014-10-18  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Add blue-zone support for Telugu.
-
-	This essentially moves the Telugu script from the `Indic' hinter to
-	the `Latin' hinter.
-
-	Note that this is a first shot and quite certainly needs
-	refinements.
-
-	* src/autofit/afblue.dat: Add blue zone data for Telugu.
-
-	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
-
-	* src/autofit/afscript.h: Add Telugu standard characters and move
-	data out of AF_CONFIG_OPTION_INDIC block.
-
-	* src/autofit/afranges.c: Move Telugu data out of
-	AF_CONFIG_OPTION_INDIC block.
-
-	* src/autofit/afstyles.h: Update Telugu data; in particular, use
-	AF_WRITING_SYSTEM_LATIN.
-
-2014-10-18  David Wimsey  <david@wimsey.us>
-
-	[cmake] Add iOS build support.
-	From Savannah patch #8497.
-
-	* builds/cmake/iOS.cmake: New file.  Universal binaries are built
-	with both 32 and 64 bit arm architectures.
-
-	* CMakeLists.txt (IOS_PLATFORM): New variable for running the iOS
-	toolchain.  Possible values are `OS' to build on iOS, or
-	`SIMULATOR' to build on APPLE.
-
-2014-10-16  Behdad Esfahbod  <behdad@behdad.org>
-	    Werner Lemberg  <wl@gnu.org>
-
-	[cff] Add `CFF_CONFIG_OPTION_DARKENING_PARAMETERS' config macro.
-
-	* devel/ftoption.h, include/config/ftoption.h
-	(CFF_CONFIG_OPTION_DARKENING_PARAMETERS): New macro.
-
-	* src/cff/cffobjs.c (SET_DARKENING_PARAMETERS,
-	SET_DARKENING_PARAMETERS_0): New macros.
-	(cff_driver_init): Use new macros.
-
-2014-10-14  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[truetype] Limit delta shift range.
-
-	The valid range for delta shift is zero through six.  Negative values
-	are invalid according to
-
-	  https://developer.apple.com/fonts/TrueType-Reference-Manual/RM04/Chap4.html#delta%20shift
-
-	* src/truetype/ttobjs.h (delta_shift, delta_base): Make unsigned.
-	* src/truetype/ttinterp.h (DO_SDS): Throw an error if `delta_shift'
-	is out of range.
-	(Ins_DELTAP, Ins_DELTAC): Optimize for valid `delta_shift'.
-
-2014-10-16  Werner Lemberg  <wl@gnu.org>
-
-	A better fix for Savannah bug #43392.
-	Suggested by Doug Felt <dougfelt@gmail.com>.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_metrics): Set
-	`vertAdvance' to zero...
-
-	* src/truetype/ttgload.c (TT_Load_Glyph): ... and set here a default
-	value for `vertAdvance' based on `linearVertAdvance' in case
-	`vertAdvance' is zero.  Note that the previous computed ad-hoc value
-	for `linearVertAdvance' was apparently not tested in a real-life
-	situation.
-
-2014-10-14  David Weiß  <David.Weiss@ptvgroup.com>
-
-	[build] Better optimization settings for vc2010 solution file.
-
-	* builds/windows/vc2010/freetype.sln,
-	builds/windows/vc2010/freetype.vcxproj: Updated.
-
-2014-10-14  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Adjust Devenagari character range.
-
-	* src/autofit/afranges.c (af_deva_uniranges): Omit characters that
-	are common to all other Indic scripts.
-
-2014-10-12  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #43392.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_metrics): Don't let
-	vertical metrics uninitialized.
-
-2014-10-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Small bbox correction.
-
-	* src/base/ftbbox.c (FT_Outline_Get_BBox): Start from nonsense bbox
-	instead of initial point that could be `off' in conic outlines.
-
-2014-10-08  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Fix Savannah bug #43356.
-
-	* src/base/ftbbox.c (BBox_Move_To, BBox_Conic_To): Update bbox in case
-	of implicit `to'.
-	(BBox_Line_To): New emitter that does not update bbox.
-
-2014-10-08  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Introduce and use new macro `FT_UPDATE_BBOX'
-
-	* src/base/ftbbox.c (FT_UPDATE_BBOX): New macro.
-	(FT_Outline_Get_BBox): Use it here.
-
-2014-10-02  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Significant optimization of `ft_div64by32'
-
-	We shift as many bits as we can into the high register, perform
-	32-bit division with modulo there, then work through the remaining
-	bits with long division. This optimization is especially noticeable
-	for smaller dividends that barely use the high register.
-
-	* src/base/ftcalc.c (ft_div64by32): Updated.
-
-2014-10-02  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Fix Savannah bug #43271.
-
-	* src/cff/cf2font.c (cf2_computeDarkening): Change overflow
-	detection to use logarithms and clamp `scaledStem'.
-
-2014-10-01  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	* src/base/ftcalc.c: Remove miscellaneous type casts.
-
-2014-10-01  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Use more common `FT_MSB' implementation with masks.
-
-	* src/base/ftcalc.c (FT_MSB): Updated.
-
-2014-09-30  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Clean up.
-
-	* src/base/ftcalc.c (FT_MOVE_SIGN): New macro for frequently used
-	code.
-
-2014-09-25  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Avoid unnecessary long division.
-
-	This applies to `FT_MulDiv' but not to `FT_DivFix', where overflows or
-	lack thereof are predicted accurately.
-
-	* src/base/ftcalc.c (ft_div64by32): Improve readability.
-	(FT_MulDiv, FT_MulDiv_No_Round) [!FT_LONG64]: Use straight division
-	when multiplication stayed within 32 bits.
-
-2014-09-24  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Minor clean-ups.
-
-	* src/autofit/afhints.c (AF_FLAGS): Remove obsolete values.
-
-	* src/autofit/afhints.c (af_glyph_hints_dump_points,
-	af_glyph_hints_align_strong_points): Updated.
-
-	* src/autofit/aflatin.c (af_latin_hints_link_segments,
-	af_latin_hints_compute_segments), src/autofit/afcjk.c
-	(af_cjk_hints_link_segments), src/autofit/aflatin2.c
-	(af_latin2_hints_link_segments, af_latin2_hints_compute_segments):
-	There are no longer fake segments since more than 10 years...
-
-2014-09-22  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Minor code streamlining.
-
-	* src/autofit/afhints.c (af_axis_hints_new_edge): Remove redundant
-	initialization.
-
-2014-09-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	* src/base/ftcalc.c: Harmonize code.
-
-2014-09-15  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Tighten the overflow check in `FT_MulDiv'.
-
-	* src/base/ftcalc.c (FT_MulDiv) [!FT_LONG64]: Updated.
-
-2014-09-08  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	Fix Savannah bug #43153.
-
-	* src/psaux/psconv.c (PS_Conv_ToFixed): Add protection against
-	overflow in `divider'.
-
-2014-09-03  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Tighten the overflow check in `FT_DivFix'.
-
-	This fixes a 13-year old bug. The original overflow check should have
-	been updated when rounding was introduced into this function
-	(c2cd00443b).
-
-	* src/base/ftcalc.c (FT_DivFix) [!FT_LONG64]: Updated.
-	* include/freetype.h (FT_DivFix): Updated documentation.
-
-2014-09-03  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Tighten the overflow check in `FT_MulFix'.
-
-	* src/base/ftcalc.c (FT_MulFix) [!FT_LONG64]: Updated.
-
-2014-09-02  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[truetype] Shortcut ppem calculations for square pixels.
-
-	* src/truetype/ttinterp.h (TT_ExecContextRec): New field
-	`cur_ppem_func' with a function pointer.
-	* src/truetype/ttinterp.c (TT_RunIns): Initialize `cur_ppem_func'
-	depending on the pixel geometry to either...
-	(Current_Ppem_Stretched): ... this for stretched pixels.
-	(Current_Ppem): ... or this for square pixels.
-	(DO_MPPEM, DO_MPS, Ins_DELTAP, Ins_DELTAC): Use `cur_ppem_func'.
-
-2014-08-31  Behdad Esfahbod  <behdad@behdad.org>
-
-	Don't use `register' keyword.  Fixes compiler warnings.
-
-	* src/base/ftcalc.c (FT_Add64) [!FT_LONG64]: Do it.
-	* src/gzip/inftrees.c (huft_build): Ditto.
-	* src/truetype/ttinterp.c (TT_MulFix14_arm): Ditto.
-
-2014-08-24  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[truetype] Optimize DELTAP and DELTAC.
-
-	* src/truetype/ttinterp.c (Ins_DELTAP, Ins_DELTAC): Move ppem
-	calculations outside of the loop.
-
-2014-08-21  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	Fix Savannah bug #43033.
-
-	* include/config/ftconfig.h, builds/unix/ftconfig.in,
-	builds/vms/ftconfig.h [FT_LONG64]: Do not disable the macro when
-	64-bit type is `long'.
-
-2014-08-20  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Small optimization of `FT_MulFix'.
-
-	* src/base/ftcalc.c (FT_MulFix): Loosen up the condition for direct
-	32-bit calculations.
-
-2014-08-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Use unsigned calculation in `FT_MulDiv'.
-
-	* src/base/ftcalc.c (FT_MulDiv): Updated to expand 32-bit range.
-
-2014-08-18  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Remove truncation in `FT_DivFix'.
-
-	* src/base/ftcalc.c (FT_DivFix): Updated.
-
-2014-08-14  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	Minor refactoring.
-
-	* src/base/ftcalc.c (FT_MulDiv, FT_MulDiv_No_Round): Updated.
-
-2014-08-14  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	Turn FT_MSB into a macro when using gcc builtins.
-
-	* src/base/ftcalc.c, include/internal/ftcalc.h: Updated.
-
-2014-08-12  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Avoid undefined FT_MSB in `BBox_Cubic_Check'.
-
-	* src/base/ftbbox.c (BBox_Cubic_Check): Update.
-	(update_cubic_max): Repalce with...
-	(cubic_peak): ... this, which now handles upscaling.
-
-2014-08-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Handle collapsed outlines to avoid undefined FT_MSB.
-
-	* src/base/ftoutln.c (FT_Outline_Get_Orientation): Update.
-
-2014-08-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Restore FT_MulFix inlining.
-
-	* include/freetype.h (FT_MulFix): Unconditionally defined.
-
-	* src/base/ftcalc.c [FT_MULFIX_ASSEMBLER]: Move code from here...
-
-	* include/internal/ftcalc.h [FT_MULFIX_ASSEMBLER]: ... to here,
-	which conditionally replaces the function with an inline version
-	through the macro.
-
-2014-08-08  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra): Refactor.
-
-2014-07-26  Werner Lemberg  <wl@gnu.org>
-
-	[cff] Fix typo.
-
-	* src/cff/cf2hints.c (cf2_glyphpath_computeOffset): Use correct
-	offsets in third quadrant.
-
-	Reported by maks <maksqwe1@ukr.net>.
-
-2014-07-17  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #42788.
-
-	* src/pfr/pfrobjs.c: Include `ftcalc.h'.
-
-2014-07-16  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	Replace `ft_highpow2' function.
-
-	* src/pfr/pfrobjs.c (pfr_face_get_kerning): Use `FT_MSB' instead of
-	`ft_highpow2'.
-
-	* src/base/ftutil.c, include/internal/ftobjs.h (ft_highpow2): Remove
-	it.
-
-2014-07-15  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	* src/base/ftcalc.c (FT_MSB): Utilize gcc builtins.
-
-2014-07-15  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Move assembler code back in the source file.
-
-	FT_MulFix assembler used to reside in ftcalc.c before f47d263f1b.
-
-	* include/config/ftconfig.h, builds/unix/ftconfig.in,
-	builds/vms/ftconfig.h [FT_MULFIX_ASSEMBLER]: Move code from here...
-
-	* src/base/ftcalc.c [FT_MULFIX_ASSEMBLER]: ... to here.
-
-2014-07-14  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Further clean up color bitmap conversion.
-
-	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra): Stop
-	using FT_MulFix and FT_DivFix since all calculations fit into 32 bits.
-
-2014-07-13  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Improve handling of buggy `prep' tables.
-
-	In case of an error in the `prep' table, no longer try to execute it
-	again and again.  This makes FreeType handle endless loops in buggy
-	fonts much faster.
-
-	* src/truetype/ttobjs.h (TT_SizeRec): The fields `bytecode_ready'
-	and `cvt_ready' are now negative if not initialized yet, otherwise
-	they indicate the error code of the last run.
-
-	* src/truetype/ttobjs.c (tt_size_run_fpgm, tt_size_run_prep,
-	tt_size_done_bytecode, tt_size_init_bytecode,
-	tt_size_ready_bytecode, tt_size_init, tt_size_done, tt_size_reset):
-	Updated.
-
-	* src/truetype/ttgload.c (tt_loader_init): Updated.
-	* src/truetype/ttinterp.c (TT_RunIns): Force reexecution of `fpgm'
-	and `prep' only if we are in the `glyf' table.
-
-2014-07-12  Werner Lemberg  <wl@gnu.org>
-
-	* builds/vms/ftconfig.h: Synchronize.
-	Problem reported by Alexei.
-
-2014-07-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Clean up bitmap conversion.
-
-	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra): Use
-	appropriate FT_DivFix and remove superfluous upscaling.
-
-2014-07-04  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Small optimization of the ancient code.
-
-	* src/base/ftcalc.c (FT_MulDiv, FT_MulDiv_No_Round): Loosen up the
-	condition for direct 32-bit calculations.
-
-2014-06-27  Werner Lemberg  <wl@gnu.org>
-
-	Fix Apple standard glyph names.
-
-	* src/sfnt/ttpost.c (tt_post_default_names): Synchronize with
-	`tools/glnames.py'
-
-	Problem reported by Adam Twardoch <adam@fontlab.com>.
-
-2014-06-17  Werner Lemberg  <wl@gnu.org>
-
-	Partially revert commit from 2014-06-13.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Move
-	declaration of `p_first' and `p_last' out of the loop.
-
-2014-06-17  Werner Lemberg  <wl@gnu.org>
-
-	* builds/unix/freetype2.m4: s/AC_PATH_PROG/AC_PATH_TOOL/.
-
-	This simplifies cross-compiling.
-
-2014-06-13  Werner Lemberg  <wl@gnu.org>
-
-	Fix more compiler warnings.
-	Reported by Wojciech Mamrak <wmamrak@gmail.com>.
-
-	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage):
-	Make integer constant unsigned.
-
-	* src/sfnt/ttsbit.c (tt_face_load_strike_metrics)
-	<TT_SBIT_TABLE_TYPE_SBIX>: Fix types.
-	(tt_sbit_decoder_load_compound, tt_face_load_sbix_image): Add proper
-	casts.
-
-2014-06-13  Werner Lemberg  <wl@gnu.org>
-
-	Fix compiler warnings.
-	Reported by Wojciech Mamrak <wmamrak@gmail.com>.
-
-	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage),
-	src/autofit/afmodule.c (af_property_set): Fix `signed' vs.
-	`unsigned' issues.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Make compiler
-	happy.
-
-	* src/base/ftlcdfil.c (_ft_lcd_filter_fir): Use only four elements
-	for `fir'.
-	Fix `signed' vs. `unsigned' issues.
-
-	* src/sfnt/sfobjs.c (WRITE_BYTE): Removed, unused.
-	(WRITE_USHORT, WRITE_ULONG): Add proper casts.
-
-	* src/truetype/ttgload.c (TT_Get_VMetrics): Add proper casts.
-
-	* src/truetype/ttinterp.c (Ins_DELTAP): Add proper casts for `B1'
-	and `B2'.
-
-2014-05-16  Alexey Petruchik  <alexey.petruchik@gmail.com>
-
-	[cmake] Add option to build OS X framework.
-
-	* CMakeLists.txt: Update accordingly.
-
-	* builds/mac/freetype-Info.plist: New file.
-
-2014-05-13  Pavel Koshevoy  <pkoshevoy@gmail.com>
-
-	* CMakeLists.txt (BASE_SRCS): Add missing `ftbdf.c'.
-
-2014-05-11  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix variable initializations.
-
-	* src/autofit/afhints.c (af_glyph_hints_reload): Assign default
-	values to `in_dir' and `out_dir' for all points.
-
-2014-05-11  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix crash with font `CabinSketch-Bold.ttf'.
-
-	Problem reported by Ralf S. Engelschall <rse@engelschall.com>.
-
-	* src/autofit/afhints.c (af_glyph_hints_reload): Fix threshold for
-	finding first non-near point.
-	Properly initialize non-near point deltas.
-
-2014-05-01  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Add blue-zone support for Devanagari.
-
-	This essentially moves the Devanagari script from the `Indic' hinter
-	to the `Latin' hinter.  Thanks to Girish Dalvi
-	<girish.dalvi@gmail.com> for guidance with blue zone characters!
-
-	* src/autofit/afblue.dat: Add blue zone data for Devanagari.
-
-	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
-
-	* src/autofit/afscript.h: Add Devanagari standard characters and
-	move data out of AF_CONFIG_OPTION_INDIC block.
-
-	* src/autofit/afranges.c: Move Devanagari data out of
-	AF_CONFIG_OPTION_INDIC block.
-	Move U+20B9, (new) Rupee sign, from Latin to Devanagari.
-
-	* src/autofit/afstyles.h: Update Devanagari data; in particular, use
-	AF_WRITING_SYSTEM_LATIN.
-
-2014-05-01  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix handling of neutral blue zones in stems.
-
-	* src/autofit/afhints.h (AF_Edge_Flags): New value
-	`AF_EDGE_NEUTRAL'.
-
-	* src/autofit/aflatin.c (af_latin_hints_compute_blue_edges): Trace
-	neutral blue zones with AF_EDGE_NEUTRAL.
-	(af_latin_hint_edges): Skip neutral blue zones if necessary.
-
-2014-04-28  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Introduce neutral blue zones to the latin module.
-
-	Such blue zones match either the top or the bottom of a contour.  We
-	need them for scripts where accent-like elements directly touch the
-	base character (for example, some vowel signs in Devanagari, cf.
-	U+0913 or U+0914).
-
-	* src/autofit/afblue.hin (AF_BLUE_PROPERTY_LATIN_NEUTRAL): New
-	property.
-
-	* src/autofit/afblue.h: Regenerated.
-
-	* src/autofit/aflatin.h (AF_LATIN_IS_NEUTRAL_BLUE): New macro.
-	(AF_LATIN_BLUE_NEUTRAL): New enumeration value.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues,
-	af_latin_hints_compute_blue_edges): Handle neutral blue zones.
-
-2014-04-25  Werner Lemberg  <wl@gnu.org>
-
-	* src/autofit/hbshim.c: Partially revert commit from 2014-04-17.
-
-	Using input glyph coverage data is simply wrong.
-
-	Problem reported by Nikolaus Waxweiler <madigens@gmail.com> and
-	Mantas Mikulėnas <grawity@gmail.com>.
-
-2014-04-23  Werner Lemberg  <wl@gnu.org>
-
-	* src/raster/ftraster.c (Vertical_Sweep_Span): Use drop-out mode.
-
-	This spot has been missed while introducing support for various
-	drop-out modes years ago (including no drop-out mode, which this
-	commit fixes).
-
-	Problem reported by Patrick Thomas <pthomas505@gmail.com>.
-
-2014-04-22  Werner Lemberg  <wl@gnu.org>
-
-	* src/sfnt/pngshim.c (error_callback): s/longjmp/ft_longjmp/.
-
-2014-04-20  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix Savannah bug #42148.
-
-	The adaptation of the cjk auto-hinter module to blue stringsets in
-	2013-08-25 had three severe bugs.  Mea culpa.
-
-	1. Contrary to the latin auto-hinter, characters for reference and
-	   overshoot values of a blue zone are specified separately.  Due to
-	   the screwed-up change it didn't work at all.
-
-	2. A boolean comparison was erroneously replaced with a cast,
-	   causing invalid results with the `^' operator later on.  The
-	   visual artifact caused by this problem is the topic of the bug
-	   report.
-
-	3. Two flag values were inverted, causing incorrect assignment of
-	   reference and overshoot values.
-
-	* src/autofit/afblue.dat: Fix CJK bluestrings, introducing a new
-	syntax to have both reference and overshoot characters in a single
-	string.  This is error #1.
-	Add extensive comments.
-
-	* src/autofit/afblue.hin (AF_BLUE_PROPERTY_CJK_FILL): Removed, no
-	longer used.
-	(AF_BLUE_PROPERTY_CJK_TOP, AF_BLUE_PROPERTY_CJK_HORIZ): Fix values.
-	This is error #3.
-
-	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_blues): Correct error #1.
-	Use character `|' to separate characters for reference and overshoot
-	values.
-	Improve tracing messages, synchronizing them with the latin
-	auto-hinter.
-	(af_cjk_hints_compute_blue_edges): Fix value of `is_top_right_blue'.
-	This is error #2.
-	(af_cjk_align_linked_edge): Add tracing message.
-
-	* src/autofit/afcjk.h (AF_CJK_IS_FILLED_BLUE): Removed, no longer
-	used.
-
-2014-04-17  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] More coverage fixes for complex scripts.
-
-	* src/autofit/hbshim.c (af_get_coverage): Merge input glyph coverage
-	of GSUB lookups into output coverage.  Otherwise, ligatures are not
-	handled properly.
-	Don't check blue zone characters for default coverage.
-
-2014-04-17  Werner Lemberg  <wl@gnu.org>
-
-	Make `FT_Get_SubGlyph_Info' actually work.
-
-	* src/base/ftobjs.c (FT_Get_SubGlyph_Info): Return FT_Err_Ok
-	if there is no error.
-
-2014-04-15  Werner Lemberg  <wl@gnu.org>
-
-	[afblue.pl]: Minor improvements.
-
-	* src/tools/afblue.pl: Allow whitespace before comments.
-	Ignore whitespace in strings.
-
-2014-04-14  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Improve coverage handling.
-
-	* src/autofit/hbshim.c (af_get_coverage): Don't exclude glyphs
-	appearing in the GPOS table if we are processing the default
-	coverage.
-
-2014-04-13  David Weber <weber.aulendorf@googlemail.com>
-
-	[smooth] Fix stand-alone compilation.
-
-	* src/smooth/ftgrays.c (FT_BEGIN_STMNT, FT_END_STMNT): Define.
-
-2014-04-12  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Redesign the recognition algorithm of strong points.
-
-	In particular, local extrema without horizontal or vertical segments
-	are better recognized:
-
-	  + A                + D
-	   \                /
-	    \              /
-	     \            /
-	      \          /
-	       \        + C
-	        \    /
-	       B +/
-
-	If the distances AB and CD are large, point B wasn't previously
-	detected as an extremum since the `ft_corner_is_flat' function
-	`swallowed' BC regardless of its direction, tagging point B as weak.
-	The next iteration started at B and made `ft_corner_is_flat' swallow
-	point C, tagging it as weak also, et voilà.
-
-	To improve that, another pass gets now performed before calling
-	`ft_corner_is_flat' to improve the `topology' of an outline: A
-	sequence of non-horizontal or non-vertical vectors that point into
-	the same quadrant are handled as a single, large vector.
-
-	Additionally, distances of near points are now accumulated, which
-	makes the auto-hinter handle them as if they were prepended to the
-	next non-near vector.
-
-	This generally improves the auto-hinter's rendering results.
-
-	* src/autofit/afhints.c (af_glyph_hints_reload): Implement it.
-
-	* src/autofit/afhints.h (AF_FLAGS): Remove no longer used flag
-	`AF_FLAG_NEAR'.
-
-2014-04-05  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Improve scoring algorithm for identifying stems.
-
-	Problem reported by Karsten Lücke <karsten.luecke@kltf.de>.
-
-	The new algorithm takes care of the width of stems: If the distance
-	between two segments is larger than the largest stem width, the
-	demerits quickly increase for larger distances.  This improves
-	hinting of slanted fonts (especially if the inner parts of serifs
-	have non-horizontal `shoulders'), avoiding false stem links.
-
-	* src/autofit/aflatin.c (af_latin_hints_link_segments): Use largest
-	stem width (if available) to compute better demerits for distances
-	between stems.
-	(af_latin_hints_detect_features): Pass stem width array and array
-	size.
-	(af_latin_metrics_init_widths): Updated to use original algorithm.
-	(af_latin_hints_apply): Updated to use new algorithm.
-
-	* src/autofit/aflatin.h: Updated.
-	* src/autofit/afcjk.c: Updated.
-
-2014-04-03  Werner Lemberg  <wl@gnu.org>
-
-	Don't require `gzip' module for `sfnt'.
-
-	Reported by Preet <prismatic.project@gmail.com>.
-
-	* src/sfnt/sfobjs.c (woff_open_font): Guard use of
-	FT_Gzip_Uncompress with FT_CONFIG_OPTION_USE_ZLIB.
-
-2014-03-27  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #38235.
-
-	Work around a bug in pkg-config version 0.28 and earlier: If a
-	variable value gets surrounded by doublequotes (in particular values
-	for the `prefix' variable), the prefix override mechanism fails.
-
-	* builds/unix/freetype2.in: Don't use doublequotes.
-	* builds/unix/unix-def.in (freetype.pc): Escape spaces in directory
-	names with backslashes.
-
-2014-03-24  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #41946.
-
-	Based on a patch from Marek Kašík <mkasik@redhat.com>.
-
-	* builds/unix/configure.raw (LIBS_CONFIG): Remove.
-	* builds/unix/freetype-config.in (libs): Hard-code value.
-	* builds/unix/unix-def.in: Updated.
-
-2014-03-22  Werner Lemberg  <wl@gnu.org>
-
-	Another revert for the change from 2014-03-18.
-
-	Problem reported by Nikolaus Waxweiler <madigens@gmail.com>.
-
-	* src/base/ftcalc.c (FT_MulFix): Ensure that an `FT_MulFix' symbol
-	gets always exported.
-
-2014-03-20  Werner Lemberg  <wl@gnu.org>
-
-	CMakeLists.txt: Another fix for include directories.
-
-	Problem reported by Taylor Holberton <taylorcholberton@gmail.com>.
-
-2014-03-19  Werner Lemberg  <wl@gnu.org>
-
-	CMakeLists.txt: Fix include directories.
-
-	Problem reported by Taylor Holberton <taylorcholberton@gmail.com>.
-
-2014-03-19  Werner Lemberg  <wl@gnu.org>
-
-	Partially revert last commit.
-
-	Found by Alexei.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Initializing
-	those variables is plain wrong, since we are in a loop.
-
-2014-03-18  Sean McBride  <sean@rogue-research.com>
-	    Werner Lemberg  <wl@gnu.org>
-
-	Fix clang warnings.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Initialize
-	some variables.
-
-	* src/base/ftcalc.c (FT_MulFix): Only use code if
-	`FT_MULFIX_INLINED' is not defined.
-
-	* src/bdf/bdfdrivr.c (bdf_cmap_class), src/cache/ftcbasic.c
-	(ftc_basic_image_family_class, ftc_basic_image_cache_class,
-	ftc_basic_sbit_family_class, ftc_basic_sbit_cache_class),
-	src/cache/ftccmap.c (ftc_cmap_cache_class), src/cache/ftcmanag.c
-	(ftc_size_list_class, ftc_face_list_class), src/pcf/pcfdrivr.c
-	(pcf_cmap_class), src/pfr/pfrdrivr.c (pfr_metrics_service_rec): Make
-	function static.
-
-	* src/type1/t1driver.c (t1_ps_get_font_value): Remove redundant
-	code.
-
-2014-03-17  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #41869.
-
-	This works around a problem with HarfBuzz (<= 0.9.26), which doesn't
-	validate glyph indices returned by
-	`hb_ot_layout_lookup_collect_glyphs'.
-
-	* src/autofit/hbshim.c (af_get_coverage): Guard `idx'.
-
-	* docs/CHANGES: Updated.
-
-2014-03-14  Werner Lemberg  <wl@gnu.org>
-
-	* builds/unix/configure.raw: Don't show error messages of `which'.
-
-2014-03-09  Alan Coopersmith  <alan.coopersmith@oracle.com>
-
-	Fix cppcheck 1.64 warning.
-
-	* src/autofit/afglobal.c (af_face_globals_new): Catch NULL pointer
-	dereference in case of error.
-
-2014-03-09  Sean McBride  <sean@rogue-research.com>
-
-	* src/sfnt/ttcmap.c (tt_face_build_cmaps): Remove clang warning.
-
-2014-03-06  Werner Lemberg  <wl@gnu.org>
-
-	* Version 2.5.3 released.
-	=========================
-
-
-	Tag sources with `VER-2-5-3'.
-
-	* docs/VERSION.DLL: Update documentation and bump version number to
-	2.5.3.
-
-	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
-	builds/windows/vc2005/index.html,
-	builds/windows/vc2008/freetype.vcproj,
-	builds/windows/vc2008/index.html,
-	builds/windows/vc2010/freetype.vcxproj,
-	builds/windows/vc2010/index.html,
-	builds/windows/visualc/freetype.dsp,
-	builds/windows/visualc/freetype.vcproj,
-	builds/windows/visualc/index.html,
-	builds/windows/visualce/freetype.dsp,
-	builds/windows/visualce/freetype.vcproj,
-	builds/windows/visualce/index.html,
-	builds/wince/vc2005-ce/freetype.vcproj,
-	builds/wince/vc2005-ce/index.html,
-	builds/wince/vc2008-ce/freetype.vcproj,
-	builds/wince/vc2008-ce/index.html: s/2.5.2/2.5.3/, s/252/253/.
-
-	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 3.
-
-	* builds/unix/configure.raw (version_info): Set to 17:2:11.
-	* CMakeLists.txt (VERSION_PATCH): Set to 3.
-	* docs/CHANGES: Updated.
-
-2014-03-06  Werner Lemberg  <wl@gnu.org>
-
-	Fixes for compilation with C++.
-
-	* src/autofit/hbshim.c (scripts): Change type to `hb_script_t'.
-	(af_get_coverage): Updated.
-	(COVERAGE): Add cast.
-
-2014-03-06  Sean McBride  <sean@rogue-research.com>
-
-	Remove more clang analyzer warnings.
-
-	* src/bdf/bdflib.c (_bdf_readstream), src/truetype/ttgload.c
-	(TT_Load_Glyph): Remove dead stores.
-
-2014-03-05  Werner Lemberg  <wl@gnu.org>
-
-	* builds/unix/configure.raw: Simplify.
-
-2014-03-05  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	Fix a bug in configure in library dependency setting
-	Reported in https://bugs.freedesktop.org/show_bug.cgi?id=75652.
-
-	* builds/unix/configure.raw: Use `x"${xxx}" != xno' style.
-
-2014-03-04  Werner Lemberg  <wl@gnu.org>
-
-	Minor fix for `make devel'.
-
-	* builds/freetype.mk (INCLUDE_FLAGS) [DEVEL_DIR]: Don't use
-	pkg-config for bzip2 since not all GNU/Linux distributions have
-	`bzip2.pc' (and the header file `bzlib.h' is located in /usr/include
-	normally).
-
-2014-03-04  Sean McBride  <sean@rogue-research.com>
-
-	Fix several clang static analyzer dead store warnings.
-
-	* src/autofit/afhints.c (af_glyph_hints_reload,
-	af_glyph_hints_align_weak_points): Remove unnecessary assignments.
-
-	* src/bdf/bdflib.c (bdf_font_load): Ditto.
-
-	* src/pshinter/pshalgo.c (psh_glyph_compute_extrema,
-	psh_glyph_interpolate_other_points): Ditto.
-
-	* src/type1/t1load.c (T1_Set_MM_Blend): Ditto.
-
-2014-03-03  Werner Lemberg  <wl@gnu.org>
-
-	Rewrite library option handling in `configure'.
-
-	o Introduce `auto' value for `--with-XXX' library options; this is
-	  now the default.
-
-	o First use `pkg-config' for library detection, then fall back to
-	  other tests.
-
-	* builds/unix/configure.raw (--with-zlib, --with-bzip2, --with-png,
-	--with-harfbuzz): Rewrite.
-	Use new `xxx_reqpriv', `xxx_libpriv', and `xxx_libstaticconf'
-	variables to collect data for `freetype2.pc' and `freetype-config'.
-	(FT2_EXTRA_LIBS): Renamed to ...
-	(ft2_extra_libs): This since it gets no longer substituted.
-	(REQUIRES_PRIVATE, LIBS_PRIVATE, LIBS_CONFIG, LIBSSTATIC_CONFIG):
-	New output variables, replacing `XXX_PKG' and `LIBXXX'.
-	Add notice at the end of `configure' showing the library
-	configuration.
-
-	* builds/unix/freetype-config.in (--static): New command line
-	option.
-	(libs): Updated.
-	(staticlibs): New variable, to be used if `--static' is given.
-	* docs/freetype-config.1: Document `--static'.
-
-	* builds/unix/freetype2.in, builds/unix/unix-def.in: Updated.
-
-2014-03-01  Werner Lemberg  <wl@gnu.org>
-
-	Avoid `long long' warnings with older gcc compilers.
-	Problem reported by Hin-Tak Leung <htl10@users.sourceforge.net>.
-
-	* builds/unix/configure.raw: Don't use gcc's `-pedantic' flag for
-	versions < 4.6.  This is especially needed for Max OS X since this
-	OS runs a gcc variant (or emulation) based on version 4.2.1.
-
-2014-03-01  Werner Lemberg  <wl@gnu.org>
-
-	* docs/INSTALL.CROSS: Revised and updated.
-
-2014-03-01  Werner Lemberg  <wl@gnu.org>
-
-	Make `make clean' remove `freetype2.pc'.
-
-	This is a generated file at build time, not configure time.
-
-	* builds/unix/unix-def.in (DISTCLEAN): Move `freetype2.pc' to ...
-	(CLEAN): This variable.
-
-2014-03-01  Werner Lemberg  <wl@gnu.org>
-
-	Use pkg-config for detecting libpng and libbz2 also.
-
-	* builds/unix/configure.raw (HAVE_PKG): New variable.
-	Search for libbz2 using `pkg-config'; s/BZ2/BZIP2/.
-	Search for libpng using `pkg-config'.
-	Fix definition of `LIBHARFBUZZ' variable.
-	* builds/unix/freetype-config.in ($libs): Updated.
-	* builds/unix/freetype2.in: Add `URL' field.
-	Update `Requires.private' and `Libs.private'.
-	* builds/unix/unix-def.in: Updated.
-
-2014-03-01  Werner Lemberg  <wl@gnu.org>
-
-	Add configure support for HarfBuzz.
-
-	* builds/unix/pkg.m4: New file.
-	* builds/unix/configure.raw: Search for libharfbuzz using
-	`pkg-config'.
-	Add `--without-harfbuzz' option.
-	* builds/unix/freetype-config.in, builds/unix/freetype2.in,
-	builds/unix/unix-def.in (freetype-config, freetype2.pc): Handle
-	HarfBuzz.
-
-	* docs/INSTALL.UNIX: Document interdependency of Freetype with
-	HarfBuzz.
-
-2014-02-28  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[cff] Math simplifications.
-
-	* src/cf2blues.c (cf2_blues_init): Use `FT_MulDiv'.
-	* src/cf2ft.c (cf2_getScaleAndHintFlag): Use simple division.
-
-2014-02-28  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Fix Savannah bug #41697, part 2.
-
-	* src/cff/cf2ft.c (cf2_initLocalRegionBuffer,
-	cf2_initGlobalRegionBuffer): It is possible for a charstring to call
-	a subroutine if no subroutines exist.  This is an error but should
-	not trigger an assert.  Split the assert to account for this.
-
-2014-02-28  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Fix Savannah bug #41697, part 1.
-
-	* src/cff/cf2hints.c (cf2_hintmap_build): Return when `hintMask' is
-	invalid.  In this case, it is not safe to use the length of
-	`hStemHintArray'; the exception has already been recorded in
-	`hintMask'.
-
-2014-02-26  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix Savannah bug #41696.
-
-	* src/sfnt/ttcmap.c (tt_cmap0_validate, tt_cmap2_validate,
-	tt_cmap4_validate, tt_cmap14_validate): Fix limit tests.
-
-2014-02-26  Werner Lemberg  <wl@gnu.org>
-
-	[winfnt] Fix Savannah bug #41694.
-
-	* src/winfonts/winfnt.c (FNT_Load_Glyph): Check glyph offset.
-
-2014-02-26  Werner Lemberg  <wl@gnu.org>
-
-	[cff] Fix Savannah bug #41693.
-
-	* src/cff/cffload.c (CFF_Load_FD_Select): Reject empty array.
-
-2014-02-26  Werner Lemberg  <wl@gnu.org>
-
-	[bdf] Fix Savannah bug #41692.
-
-	bdflib puts data from the input stream into a buffer in chunks of
-	1024 bytes.  The data itself gets then parsed line by line, simply
-	increasing the current pointer into the buffer; if the search for
-	the final newline character exceeds the buffer size, more data gets
-	read.
-
-	However, in case the current line's end is very near to the buffer
-	end, and the keyword to compare with is longer than the current
-	line's length, an out-of-bounds read might happen since `memcmp'
-	doesn't stop properly at the string end.
-
-	* src/bdf/bdflib.c: s/ft_memcmp/ft_strncmp/ to make comparisons
-	stop at string ends.
-
-2014-02-17  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	[autofit] Fix `make multi' compilation.
-
-	* src/autofit/hbshim.c: Include `afglobal.h' and `aftypes.h'.
-
-2014-02-19  Werner Lemberg  <wl@gnu.org>
-	    Simon Bünzli  <zeniko@gmail.com>
-
-	Fix Savannah bug #32902.
-
-	Patch taken from
-
-	  https://code.google.com/p/sumatrapdf/source/browse/trunk/ext/_patches/freetype2.patch?spec=svn8620&r=8620#87
-
-	with slight modifications.
-
-	* src/type1/t1parse.c (T1_Get_Private_Dict): Add heuristic test to
-	handle fonts that incorrectly use \r at the beginning of an eexec
-	block.
-
-2014-02-19  Simon Bünzli  <zeniko@gmail.com>
-
-	Fix Savannah bug #41590.
-
-	* src/type1/t1load.c (parse_encoding): Protect against invalid
-	number.
-
-2014-02-12  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Optimize by using `FT_MulDiv'.
-	Suggested by Alexei.
-
-	* src/cff/cf2font.c (cf2_computeDarkening): Do it.
-
-2014-02-12  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #41465.
-
-	* builds/unix/unix-def.in (CLEAN): Add `freetype-config'.
-	(DISTCLEAN): Remove `freetype-config'.
-
-2014-02-08  Sean McBride  <sean@rogue-research.com>
-
-	Fix clang static analyzer and compiler warnings.
-
-	* src/autofit/afhints.c (af_glyph_hints_align_weak_points),
-	src/autofit/afloader (af_loader_load_g) <FT_GLYPH_FORMAT_COMPOSITE>,
-	src/base/ftcalc.c (FT_MSB), src/base/ftoutln.c
-	(FT_Outline_Decompose), src/bdf/bdfdrivr.c (bdf_interpret_style),
-	src/cff/cffparse.c (cff_parse_integer), src/cid/cidparse.c
-	(cid_parser_new), src/pfr/pfrload.c (pfr_phy_font_load),
-	src/raster/ftraster.c (Decompose_Curve), src/sfnt/sfdriver.c
-	(sfnt_get_ps_name), src/sfnt/ttcmap.c (tt_cmap12_next,
-	tt_cmap13_next), src/smooth/ftgrays.c (gray_hline): Remove dead
-	code.
-
-	* src/autofit/afmodule.c (af_property_get_face_globals,
-	af_property_set, af_property_get), src/base/ftbitmap.c
-	(ft_gray_for_premultiplied_srgb_bgra): Make functions static.
-
-	* src/base/ftobjs.c (ft_remove_renderer): Protect against
-	library == NULL.
-	(ft_property_do): Make function static.
-
-	* src/base/ftrfork.c: Include `ftbase.h'.
-
-	* src/sfnt/ttsbit.c (tt_face_load_sbix_image)
-	[!FT_CONFIG_OPTION_USE_PNG], src/type1/t1gload.c
-	(T1_Compute_Max_Advance): Avoid compiler warning.
-
-	* src/truetype/ttinterp.c (TT_New_Context): Reduce scope of
-	variable.
-
-2014-02-08  Werner Lemberg  <wl@gnu.org>
-
-	Fix Windows build directories.
-
-	The build target is now `windows' instead of `win32'.
-
-	Problem reported by Nickolas George <darknova.clan@gmail.com>.
-
-	* builds/modules.mk: Don't use `win32' and `win16' (!) but
-	`windows'.
-
-	* builds/windows/detect.mk, builds/windows/win32-def.mk:
-	s/win32/windows/.
-
-2014-02-08  Eugen Sawin  <esawin@mozilla.com>
-
-	Fix Savannah bug #41507.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap)
-	[!FT_CONFIG_OPTION_USE_PNG] <17, 17, 19>: Fix error handling.
-
-2014-02-08  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Fix minor performance bug.
-
-	* src/cff/cf2font.c (cf2_font_setup): Darkening amount and blue zone
-	calculations are now cached and not recomputed on each glyph.
-
-2014-02-05  Werner Lemberg  <wl@gnu.org>
-
-	Fix problems with perl 5.8.8 as distributed with current MinGW.
-
-	* src/tools/afblue.pl: Work-around for Perl bug #63402.
-	(string_re): Avoid `possessive quantifiers', which have been
-	introduced in Perl version 5.10.
-
-2014-02-04  Werner Lemberg  <wl@gnu.org>
-
-	Fix compilation with MinGW.
-
-	Right now, compilation out of the box with latest MinGW is broken
-	due to bugs in header files of mingwrt 4.0.3 in strict ANSI mode,
-	cf.
-
-	  https://sourceforge.net/p/mingw/bugs/2024/
-	  https://sourceforge.net/p/mingw/bugs/2046/
-
-	* builds/unix/configure.raw: Don't set `-ansi' flag for MinGW.
-
-2014-02-04  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Minor fix.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_widths),
-	src/autofit/aflatin.c (af_latin_metrics_init_widths): Fix handling
-	of alternative standard characters.
-	This also fixes a compilation warning in non-debug mode.
-
-2014-02-03  Werner Lemberg  <wl@gnu.org>
-
-	[cff] Fix Savannah bug #41363.
-
-	* src/cff/cf2ft.c (cf2_checkTransform): Convert assertion into
-	parameter check.
-	(cf2_decoder_parse_charstrings): Call `cf2_checkTransform' only if
-	we are scaling the outline.
-	(cf2_getPpemY): Remove problematic assertion.
-
-2014-01-26  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Introduce two more slots for standard characters.
-
-	This is useful for OpenType features like `c2sc' (caps to small
-	caps) that don't have lowercase letters by definition, or other
-	features that mainly operate on numerals.
-
-	* src/autofit/afscript.h: Add more standard characters.
-
-	* src/autofit/aftypes.h: Update use of `SCRIPT' macro.
-	(AF_ScriptClassRec): Add members to hold two more standard
-	characters.
-	(AF_DEFINE_SCRIPT_CLASS): Updated.
-
-	* src/autofit/afglobal.c, src/autofit/afglobal.h,
-	* src/autofit/afpic.c, src/autofit/afranges.h, src/autofit/hbshim.c:
-	Update use of `SCRIPT' macro.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_widths),
-	src/autofit/aflatin.c (af_latin_metrics_init_widths): Scan two more
-	standard characters.
-
-2014-01-24  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #41320.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues)
-	<AF_LATIN_IS_LONG_BLUE>: Avoid negative index of `last'.
-
-2014-01-23  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #41310.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap) <glyph_format==5>:
-	Don't check metrics, which this format doesn't have.
-	This is another correction to the commit from 2013-11-21.
-
-2014-01-23  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #41309.
-
-	* src/type1/t1load.c (t1_parse_font_matrix): Properly handle result
-	of `T1_ToFixedArray'.
-
-	* src/cid/cidload.c (cid_parse_font_matrix): Synchronize with
-	`t1_parse_font_matrix'.
-
-	* src/type42/t42parse.c (t42_parse_font_matrix): Synchronize with
-	`t1_parse_font_matrix'.
-	(t42_parse_encoding): Synchronize with `t1_parse_encoding'.
-
-	* src/psaux/psobjs.c (ps_parser_load_field) <T1_FIELD_TYPE_BBOX>,
-	<T1_FIELD_TYPE_MMOX>: Properly handle result of `ps_tofixedarray'.
-
-2014-01-22  Werner Lemberg  <wl@gnu.org>
-
-	* src/autofit/hbshim.c (af_get_coverage): Fix memory leaks.
-
-2014-01-16  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Improve tracing of style coverages.
-
-	* include/internal/fttrace.h: Add `afglobal' for tracing style
-	coverages.
-
-	* src/autofit/afglobal.c: Include FT_INTERNAL_DEBUG_H.
-	(FT_COMPONENT): Define.
-	(af_face_globals_compute_style_coverage): Trace `gstyles' array
-	data.
-
-2014-01-09  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #41158.
-
-	* builds/unix/install.mk (install): Create man page directory.
-
-2014-01-08  Chongyu Zhu  <lembacon@gmail.com>
-
-	[arm] Fix Savannah bug #41138, part 2.
-
-	* builds/unix/ftconfig.in (FT_MulFix_arm), include/config/ftconfig.h
-	(FT_MulFix_arm), src/truetype/ttinterp.c (TT_MulFix14_arm): Fix
-	preprocessor conditionals for `add.w'.
-
-2014-01-08  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix Savannah bug #41138, part 1.
-
-	* src/tools/afblue.pl <Handling #endif>: Produce correct auxiliary
-	enumeration names for generated `#else'.
-
-	* src/autofit/afblue.h: Regenerated.
-
-2014-01-06  Werner Lemberg  <wl@gnu.org>
-
-	Add manual page for `freetype-config'.
-	Contributed by Nis Martensen <nis.martensen@web.de>.
-
-	* docs/freetype-config.1: New file.
-
-	* builds/unix/unix-def.in (mandir): Define.
-	* builds/unix/install.mk (install, uninstall): Handle manpage.
-
-2014-01-05  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Minor fixes for `afblue.pl'.
-
-	* src/tools/afblue.pl (aux_name): Don't use `reverse'.
-	<Handling #endif>: Use proper indentation for generated `#else'.
-
-	* src/autofit/afblue.h: Regenerated.
-
-2014-01-04  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix Indic scripts.
-
-	Split the single, incorrect Indic entry into separate scripts so
-	that the covered ranges are the same: Bengali, Devanagari, Gujarati,
-	Gurmukhi, Kannada, Limbu, Malayalam, Oriya, Sinhala, Sundanese,
-	Syloti Nagri, Tamil, Telugu, and Tibetan.  At the same time, remove
-	entries for Meetai Mayak and Sharada – the Unicode ranges were
-	incorrect (and nobody has complained about that), fonts are scarce
-	for those scripts, and the Indic auto-hinter support is rudimentary
-	anyways.
-
-	* src/autofit/afscript.h: Updated, using AF_CONFIG_OPTION_INDIC and
-	AF_CONFIG_OPTION_CJK.
-
-	* src/autofit/afstyles.h (STYLE_DEFAULT_INDIC): New auxiliary macro.
-	Use it, together with AF_CONFIG_OPTION_INDIC and
-	AF_CONFIG_OPTION_CJK, to update.
-
-	* src/autofit/afranges.c [AF_CONFIG_OPTION_INDIC]: Updated.
-	[!AF_CONFIG_OPTION_INDIC, !AF_CONFIG_OPTION_CJK]: Removed.
-	Sort entries by tags.
-
-2014-01-03  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Thinko.
-
-	* src/autofit/hbshim.c (af_get_char_index): Similar to
-	`af_get_coverage', reject glyphs which are not substituted.
-
-2014-01-03  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix handling of default coverages.
-
-	With this commit, the implementation of coverage handling is
-	completed.
-
-	* src/autofit/hbshim.c (af_get_coverage): Exit early if nothing to
-	do.
-	Reject coverages which don't contain appropriate glyphs for blue
-	zones.
-
-2014-01-03  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix handling of default coverages.
-
-	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage):
-	First handle non-default coverages, then the default coverage of the
-	default script, and finally the other default coverages.
-
-2014-01-03  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix scaling of HarfBuzz shaping.
-
-	* src/autofit/hbshim.c (af_get_char_index): Scale to units per EM.
-
-2014-01-03  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Better ftgrid support.
-
-	* src/autofit/afhints.c (af_glyph_hints_get_segment_offset): Add
-	parameters `is_blue' and `blue_offset'.
-
-2014-01-01  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Remove some styles.
-
-	* src/autofit/afcover.h: Remove coverages for alternative fractions,
-	denominators, numerators, and fractions.
-
-	* src/autofit/afstyles.h (META_STYLE_LATIN): Updated.
-
-2014-01-01  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Add more styles.
-
-	* src/autofit/afstyles.h (STYLE_LATIN, META_STYLE_LATIN): New
-	auxiliary macros; use them to define styles for Cyrillic, Greek, and
-	Latin.
-
-	* src/autofit/afcover.h: Remove coverage for oldstyle figures.
-	Since those digits are used in combination with ordinary letters, it
-	makes no sense to handle them separately.
-
-	* src/autofit/afglobal.c (af_face_globals_get_metrics): Don't limit
-	`options' parameter to 4 bits.
-
-2014-01-01  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix style assignments to glyphs.
-
-	* src/autofit/hbshim.c (af_get_coverage)
-	[FT_CONFIG_OPTION_USE_HARFBUZZ]: Scan GPOS coverage of features also
-	so that we can skip glyphs that have both GSUB and GPOS data.
-
-2014-01-01  Werner Lemberg  <wl@gnu.org>
-
-	* src/autofit/hbshim.c: s/{lookups,glyphs}/gsub_{lookups,glyphs}/.
-
-2014-01-01  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Implement and use `af_get_char_index' with HarfBuzz.
-
-	* src/autofit/hbshim.c (COVERAGE) [FT_CONFIG_OPTION_USE_HARFBUZZ]:
-	Redefine to construct HarfBuzz features.
-	(af_get_char_index) [FT_CONFIG_OPTION_USE_HARFBUZZ]: Rewritten.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Use
-	`y_offset' to adjust `best_y'.
-
-2013-12-31  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/AF_STYLE_...._DEFAULT/AF_STYLE_...._DFLT/i.
-
-2013-12-31  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix interface of `af_get_char_index'.
-
-	* src/autofit/hbshim.c (af_get_char_index): Return error value.
-	Add argument for y offset (to be used in a yet-to-come patch).
-
-	* src/autofit/hbshim.h, src/autofit/afcjk.c,
-	src/autofit/aflatin.c: Updated.
-
-2013-12-30  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Don't combine multiple features into one set.
-
-	Combining them, as originally envisioned, would lead to much more
-	complicated code, as investigations have shown meanwhile.  The major
-	drawback is that we run out of available style slots much earlier.
-	However, this is only a theoretical issue since we don't support a
-	large number of scripts currently.
-
-	* src/autofit/afcover.h: Replace `COVERAGE_{1,2,3}' macros with
-	a single-element `COVERAGE' macro, sort the elements by the feature
-	tags, and add entry for `ruby'.
-
-	* src/autofit/aftypes.h: Updated.
-	* src/autofit/hbshim.c: Updated.
-
-2013-12-28  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Code shuffling to reduce use of cpp macros.
-
-	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage):
-	Call `af_get_coverage' unconditionally.
-
-	* src/autofit/autofit.c: Include `hbshim.c' unconditionally.
-
-	* src/autofit/hbshim.c (af_get_coverage)
-	[!FT_CONFIG_OPTION_USE_HARFBUZZ]: Provide dummy function.
-
-	* src/autofit/hbshim.h: Provide function declarations
-	unconditionally.
-
-2013-12-28  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Add wrapper function for `FT_Get_Char_Index'.
-
-	Yet-to-come changes will provide HarfBuzz functionality for the new
-	function.
-
-	* src/autofit/hbshim.c (af_get_char_index): New function.
-	* src/autofit/hbshim.h: Updated.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_widths,
-	af_cjk_metrics_init_blues, af_cjk_metrics_check_digits): Updated.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_widths,
-	af_latin_metrics_init_blues, af_latin_metrics_check_digits):
-	Updated.
-
-2013-12-28  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Use `global' HarfBuzz font object.
-
-	We now use `hb_font' instead of `hb_face' since yet-to-come changes
-	need this.
-
-	* src/autofit/afglobal.h: Include `hbshim.h'.
-	(AF_FaceGlobalsRec) [FT_CONFIG_OPTION_USE_HARFBUZZ]: New member
-	`hb_font'.
-
-	* src/autofit/afglobal.c (af_face_globals_new)
-	[FT_CONFIG_OPTION_USE_HARFBUZZ]: Create `hb_font'.
-	(af_face_globals_free) [FT_CONFIG_OPTION_USE_HARFBUZZ]: Destroy
-	`hb_font'.
-
-	* src/autofit/hbshim.h: Include HarfBuzz headers.
-
-	* src/autofit/hbshim.c: Include `hbshim.h' instead of HarfBuzz
-	headers.
-	(af_get_coverage): Updated.
-
-2013-12-27  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Handle `DFLT' OpenType script for coverages.
-
-	* include/ftautoh.h: Document new `default-script' property.
-
-	* src/autofit/hbshim.c (af_get_coverage): Use `AF_FaceGlobals' for
-	type of first parameter.
-	(script_tags): Add one more element.
-	(af_get_coverage): Adjust `script_tags' to handle `DFLT' script tag.
-
-	* src/autofit/hbshim.h: Updated.
-
-	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage):
-	Updated.
-
-	* src/autofit/afglobal.h (AF_SCRIPT_DEFAULT): New macro.
-
-	* src/autofit/afmodule.h (AF_ModuleRec): New `default_script'
-	member.
-
-	* src/autofit/afmodule.c (af_property_set, af_property_get): Handle
-	`default-script' property.
-	(af_autofitter_init): Updated.
-
-2013-12-27  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	[ftrfork] Fix the face order difference between POSIX and Carbon.
-
-	The fragmented resources in Suitcase and .dfont should be reordered
-	when `POST' resource for Type1 is being restored, but reordering of
-	sfnt resources induces the different face order.  Now the ordering
-	is restricted to `POST' resource only, to prevent the different
-	order issue (e.g. the face index in the fontconfig cache generated
-	with Carbon framework is incompatible with that by FreeType 2
-	without Carbon framework.)  Found by Khaled Hosny and Hin-Tak Leung.
-
-	http://lists.gnu.org/archive/html/freetype-devel/2013-02/msg00035.html
-	http://lists.gnu.org/archive/html/freetype-devel/2013-12/msg00027.html
-
-	* src/base/ftrfork.c (FT_Raccess_Get_DataOffsets): Add a switch
-	`sort_by_res_id' to control the fragmented resource ordering.
-	* include/internal/ftrfork.h: Declare new switch.
-	* src/base/ftobjs.c (IsMacResource): Enable the sorting for `POST'
-	resource, and disable the sorting for `sfnt' resource.
-
-2013-12-25  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #40997.
-
-	* src/bdf/bdfdrivr.c (BDF_Face_Init): Only use OR operator to
-	adjust face flags since FT_FACE_FLAG_EXTERNAL_STREAM might already
-	be set.
-	* src/cff/cffobjs.c (cff_face_init): Ditto.
-	* src/cid/cidobjs.c (cid_face_init): Ditto.
-	* src/pcf/pcfread.c (pcf_load_font): Ditto.
-	* src/pfr/pfrobjs.c (pfr_face_init): Ditto.
-	* src/type1/t1objs.c (T1_Face_Init): Ditto.
-	* src/type42/t42objs.c (T42_Face_Init): Ditto.
-	* src/winfonts/winfnt.c (FNT_Face_Init): Ditto.
-
-2013-12-21  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Introduce `coverages'.
-
-	Coverages are the interface to the HarfBuzz library to acces
-	OpenType features for handling glyphs not addressable by the cmap.
-
-	Right now, compilation of HarfBuzz is only added to the development
-	build.  A solution for standard build mode will be delayed until
-	HarfBuzz gets split into two libraries to avoid mutual dependencies
-	between FreeType and HarfBuzz.
-
-	Note that this is only a first step in handling coverages, basically
-	providing the framework only.  Code for handling selected OpenType
-	features (this is, actually using the data in `afcover.h') will
-	follow.
-
-	* devel/ftoption.h, include/config/ftoption.h
-	(FT_CONFIG_OPTION_USE_HARFBUZZ): New macro.
-
-	* src/autofit/hbshim.c, src/autofit/hbshim.h, src/autofit/afcover.h:
-	New files.
-
-	* src/autofit/afscript.h: Add HarfBuzz script name tags.
-
-	* src/autofit/afstyles.h: Add default coverage enumeration values.
-
-	* src/autofit/aftypes.h: Update use of `SCRIPT' and `STYLE' macros.
-	(AF_Coverage): New enumeration (generated by `afcover.h').
-	(AF_StyleClassRec): New member `coverage'.
-	(AF_DEFINE_STYLE_CLASS): Updated.
-
-	* include/internal/fttrace.h: Add `afharfbuzz' for tracing coverage
-	data.
-
-	* src/autofit/afglobal.h: Update use of `SCRIPT' and `STYLE' macros.
-	(AF_SCRIPT_FALLBACK): Renamed to ...
-	(AF_STYLE_FALLBACK): ... this.
-
-	* src/autofit/afglobal.c: Include `hbshim.c'.
-	Update use of `SCRIPT' and `STYLE' macros.
-	(af_face_globals_compute_style_coverage)
-	[FT_CONFIG_OPTION_USE_HARFBUZZ]: Call `af_get_coverage'.
-	Update.
-
-	* src/autofit/afmodule.h (AF_ModuleRec):
-	s/fallback_script/fallback_style/.
-
-	* src/autofit/afmodule.c (af_property_set): Adapt handling of
-	`fallback-script' property to set a fallback style.
-	(af_property_get, af_autofitter_init): Updated.
-
-	* src/autofit/afpic.c: Update use of `SCRIPT' and `STYLE' macros.
-
-	* src/autofit/afranges.h: Update use of `SCRIPT' macro.
-
-	* src/autofit/autofit.c [FT_CONFIG_OPTION_USE_HARFBUZZ]: Include
-	`hbshim.c'.
-
-	* src/autofit/rules.mk (AUTOF_DRV_SRC): Add `hbshim.c'.
-	(AUTOF_DRV_H): Add `afcover.h'.
-
-	* builds/freetype.mk (INCLUDE_FLAGS) [DEVEL_DIR]: Use pkg-config for
-	all libraries needed by FreeType.
-
-2013-12-21  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #40975 (sort of).
-
-	* src/truetype/ttinterp.c (Ins_IP): Fix sign typo to make FreeType
-	behave the same as the Windows TrueType engine for the invalid case.
-
-2013-12-21  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Make PIC mode work actually.
-
-	* src/autofit/afpic.h (AFModulePIC): Fix array sizes to fit the
-	enumeration values automatically generated by including `afscript.h'
-	and friends.
-
-	* src/autofit/afpic.c (autofit_module_class_pic_init): Updated.
-
-2013-12-21  Werner Lemberg  <wl@gnu.org>
-
-	Fix PIC linking.
-
-	* include/internal/ftrfork.h (CONST_FT_RFORK_RULE_ARRAY_BEGIN): Fix
-	generated function name.
-
-	* src/base/basepic.c (FT_Init_Table_raccess_guess_table): Rename
-	to ...
-	(FT_Init_Table_ft_raccess_guess_table): ... this so that the
-	function name correctly corresponds to what the macro framework
-	expects.
-
-	* src/psnames/rules.mk (PSNAMES_DRV_SRC_S): Use correct file name so
-	that PIC functions are compiled also.
-
-2013-12-21  Werner Lemberg  <wl@gnu.org>
-
-	[base] Add missing dependencies to Makefile.
-
-	* src/base/rules.mk (BASE_SRC): Add `basepic.c' and `ftpic.c'.
-	(BASE_H): Add `basepic.h'.
-
-2013-12-20  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix PIC compilation.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_widths),
-	src/autofit/aflatin.c (af_latin_metrics_init_widths)
-	[FT_CONFIG_OPTION_PIC]: Declare `globals'.
-
-	* src/autofit/afglobal.c: Always call AF_DEFINE_SCRIPT_CLASS, and
-	AF_DEFINE_STYLE_CLASS.
-
-	* src/autofit/afpic.c: Include `afglobal.h'.
-	(autofit_module_class_pic_init): Typo.
-
-	* src/autofit/aftypes.h (AF_DEFINE_SCRIPT_CLASS,
-	AF_DEFINE_STYLE_CLASS): Don't use the same identifier for macro
-	parameter and structure member.
-
-2013-12-20  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Introduce `styles'.
-
-	This is the new top-level structure for handling glyph input data;
-	scripts are now defined separately.
-
-	* src/autofit/aftypes.h (SCRIPT): Updated.
-	(AF_ScriptClassRec): Move `blue_stringset' and `writing_system'
-	members to ...
-	(AF_Style_ClassRec): ... this new structure.
-	(AF_Style): New enumeration.
-	(AF_StyleMetricsRec): Replace `script' enumeration with
-	`style_class' pointer.
-	(AF_DEFINE_SCRIPT_CLASS, AF_DECLARE_SCRIPT_CLASS): Updated.
-	(AF_DEFINE_STYLE_CLASS, AF_DECLARE_STYLE_CLASS): New macros.
-
-	* src/autofit/afstyles.h: New file, using data from `afscript.h'.
-	* src/autofit/afscript.h: Updated.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_widths,
-	af_cjk_metrics_init_blues, af_cjk_hint_edges): Updated.
-
-	* src/autofit/afglobal.c (SCRIPT): Updated.
-	(STYLE): Redefine macro to load `afstyles.h'.
-	(af_script_names) [FT_DEBUG_LEVEL_TRACE]: Replace with...
-	(af_style_names): ... this array.
-	(af_face_globals_compute_script_coverage): Renamed to...
-	(af_face_globals_compute_style_coverage): ... this.
-	Updated.
-	(af_face_globals_new, af_face_globals_free,
-	af_face_globals_get_metrics): Updated.
-
-	* src/autofit/afglobal.h (SCRIPT): Updated.
-	(STYLE): Redefine macro to load `afstyles.h'.
-	(AF_SCRIPT_FALLBACK): Update definition.  This will get more
-	refinements with later on.
-	(AF_SCRIPT_UNASSIGNED): Replace with...
-	(AF_STYLE_UNASSIGNED): ... this macro.
-	(AF_FaceGlobalsRec): Updated.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_widths,
-	af_latin_metrics_init_blues, af_latin_metrics_scale_dim,
-	af_latin_hint_edges): Updated.
-
-	* src/autofit/aflatin2.c (af_latin2_metrics_init_widths): Updated.
-	(af_ltn2_uniranges): Removed.
-
-	* src/autofit/afloader.c (af_loader_load_g, af_loader_load_glyph):
-	Updated.
-
-	* src/autofit/afpic.c (autofit_module_class_pic_init): Updated.
-	* src/autofit/afpic.h (AF_STYLE_CLASSES_GET): New macro.
-	(AFModulePIC): Add `af_style_classes' and `af_style_classes_rec'
-	members.
-
-	* src/autofit/afranges.h: Updated.
-
-	* src/autofit/rules.mk (AUTOF_DRV_H): Add `afstyles.h'.
-
-2013-12-19  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Factor scripts and uniranges out of writing system files.
-
-	* src/autofit/afranges.c, src/autofit/afranges.h: New files.
-
-	* src/autofit/afscript.h: Extend `SCRIPT' macro with more
-	parameters, taking data from the writing system files.
-
-	* src/autofit/aftypes.h: Updated.
-
-	* src/autofit/afglobal.c: Include `afranges.h'.
-	Load `afscript.h' to call AF_DEFINE_SCRIPT_CLASS.
-	* src/autofit/afglobal.c: Include `afranges.h'.
-	Load `afscript.h' to call AF_DECLARE_SCRIPT_CLASS.
-
-	* src/autofit/afcjk.c, src/autofit/afcjk.h: Updated.
-	* src/autofit/afdummy.c, src/autofit/afdummy.h: Updated.
-	* src/autofit/afindic.c, src/autofit/afindic.h: Updated.
-	* src/autofit/aflatin.c, src/autofit/aflatin.h: Updated.
-	* src/autofit/aflatn2.c, src/autofit/aflatn2.h: Updated.
-
-	* src/autofit/afpic.c: Updated.
-
-	* src/autofir/autofit.c: Include `afranges.c'.
-	* src/autofit/rules.mk (AUTOF_DRV_SRC): Add `afranges.c'.
-
-2013-12-18  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] More code orthogonality.
-
-	* src/autofit/aftypes.h (AF_StyleMetrics): Replace `script_class'
-	pointer to an `AF_ScriptClass' structure with `script' index of type
-	`AF_Script'.
-	Move some code around.
-
-	* src/autofit/afcjk.c: Include `afpic.h'.
-	(af_cjk_metrics_init_widths, af_cjk_metrics_init_blues,
-	af_cjk_hint_edges): Updated.
-
-	* src/autofit/aflatin.c: Include `afpic.h'.
-	(af_latin_metrics_init_widths, af_latin_metrics_init_blues,
-	af_latin_metrics_scale_dim, af_latin_hint_edges): Updated.
-
-	* src/autofit/afglobal.c (af_face_globals_get_metrics): Updated.
-
-	* src/autofit/afloader.c (af_loader_load_g, af_loader_load_glyph):
-	Updated.
-
-2013-12-18  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/ScriptMetrics/StyleMetrics/.
-
-2013-12-18  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/script_{metrics,hints}/style_{metrics,hints}/
-
-2013-12-18  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/gscripts/gstyles/.
-
-2013-12-18  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/glyph_scripts/glyph_styles/.
-
-	This is the first commit of a series to create a new top-level
-	structure (a `style') for handling scripts, writing_systems, and
-	soon-to-be-added coverages.
-
-2013-12-17  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/AF_Script_/AF_WritingSystem_/ where appropriate.
-
-2013-12-11  Infinality  <infinality@infinality.net>
-
-	[truetype] Simplify logic of rendering modes.
-
-	This patch unifies the subpixel and non-subpixel cases.
-
-	* src/truetype/ttinterp.h (TT_ExecContextRec): Remove
-	`grayscale_hinting'; all code should refer to `grayscale' instead.
-	Remove unused `native_hinting' member.
-	Rename `subpixel_hinting' member to `subpixel.
-
-	* src/truetype/ttgload.c (TT_LOADER_SET_PP): Updated.
-	(tt_loader_init): Updated.
-
-	* src/truetype/ttinterp.c (Ins_GETINFO): Simplify.
-	Updated.
-
-2013-12-11  Werner Lemberg  <wl@gnu.org>
-
-	[documentation] Add section how to include FreeType header files.
-	Problem reported by David Kastrup <dak@gnu.org>.
-
-	Surprisingly, a description how to do that was completely missing in
-	the API reference.
-
-	* include/freetype.h, include/ftchapters.h: New documentation
-	section `header_inclusion'.
-
-2013-12-10  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/DFLT/NONE/, s/dflt/none/.
-
-2013-12-10  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/AF_SCRIPT_NONE/AF_SCRIPT_UNASSIGNED/.
-
-2013-12-10  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Fix scaling of vertical phantom points.
-
-	* src/truetype/ttgload.c (load_truetype_glyph): Scale pp3.x and
-	pp4.x also.
-
-2013-12-10  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Fix positioning of composite glyphs.
-	Problem reported by Nigel Tao <nigeltao@golang.org>.
-
-	* src/truetype/ttgload.c (TT_Hint_Glyph): Remove code that shifts
-	the glyph (component) by a fractional value computed from the LSB
-	phantom point.  This is wrong, since the horizontal phantom points
-	get rounded horizontally later on.
-
-2013-12-08  Werner Lemberg  <wl@gnu.org>
-
-	* Version 2.5.2 released.
-	=========================
-
-
-	Tag sources with `VER-2-5-2'.
-
-	* docs/VERSION.DLL: Update documentation and bump version number to
-	2.5.2.
-
-	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
-	builds/windows/vc2005/index.html,
-	builds/windows/vc2008/freetype.vcproj,
-	builds/windows/vc2008/index.html,
-	builds/windows/vc2010/freetype.vcxproj,
-	builds/windows/vc2010/index.html,
-	builds/windows/visualc/freetype.dsp,
-	builds/windows/visualc/freetype.vcproj,
-	builds/windows/visualc/index.html,
-	builds/windows/visualce/freetype.dsp,
-	builds/windows/visualce/freetype.vcproj,
-	builds/windows/visualce/index.html,
-	builds/wince/vc2005-ce/freetype.vcproj,
-	builds/wince/vc2005-ce/index.html,
-	builds/wince/vc2008-ce/freetype.vcproj,
-	builds/wince/vc2008-ce/index.html: s/2.5.1/2.5.2/, s/251/252/.
-
-	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 2.
-
-	* builds/unix/configure.raw (version_info): Set to 17:1:11.
-	* CMakeLists.txt (VERSION_PATCH): Set to 2.
-	* docs/CHANGES: Updated.
-
-2013-12-07  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Next round in phantom point handling.
-
-	Greg Hitchcock provided very interesting insights into the
-	complicated history of the horizontal positions of the TSB and BSB
-	phantom points.
-
-	* src/truetype/ttgload.c (TT_LOADER_SET_PP)
-	[TT_CONFIG_OPTION_SUBPIXEL_HINTING]: Use `subpixel_hinting' and
-	`grayscale_hinting' flags as conditionals for the x position of TSB
-	and BSB.
-
-2013-12-05  Werner Lemberg  <wl@gnu.org>
-
-	* builds/freetype.mk (FT_CC): Removed.  Unused.
-
-2013-12-04  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix handling of embedded bitmap strikes.
-
-	This corrects the commit from 2013-11-21.  Problem reported by
-	Andrey Panov <panov@canopus.iacp.dvo.ru>.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap): Fix logic to
-	detect excessive bytes for bit-aligned bitmaps.
-
-2013-12-03  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Remove dead code.
-
-	Reported by Nigel Tao <nigeltao@golang.org>.
-
-	* include/internal/tttypes.h (TT_LoaderRec): Remove unused
-	`preserve_pps' field.
-	* src/truetype/ttgload.c (TT_Hint_Glyph): Updated.
-
-2013-12-03  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Fix phantom point handling.
-
-	This is a further improvement to the changes from 2013-11-06.
-
-	* src/truetype/ttgload.c (TT_Hint_Glyph): Horizontal phantom points
-	are rounded horizontally, vertical ones are rounded vertically.
-	(TT_LOADER_SET_PP): The horizontal position of vertical phantom
-	points in pre-ClearType mode is zero, as shown in the OpenType
-	specification.
-
-2013-12-02  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Fix change from 2013-11-20.
-
-	Problem reported by Akira Kakuto <kakuto@fuk.kindai.ac.jp>.
-
-	* src/truetype/ttgload.c (TT_Load_Simple_Glyph): Protect call to
-	`Update_Max' with both a TT_USE_BYTECODE_INTERPRETER guard and a
-	`IS_HINTED' clause.
-	Also remove redundant check using `maxSizeOfInstructions' – in
-	simple glyphs, the bytecode data comes before the outline data, and
-	a validity test for this is already present.
-
-2013-11-27  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix use of dumping functions in `ftgrid' demo program.
-
-	* src/autofit/afhints.c (AF_DUMP) [FT_DEBUG_AUTOFIT]: New macro.
-	(af_glyph_hints_dump_points, af_glyph_hints_dump_segments,
-	af_glyph_hints_dump_edges) [FT_DEBUG_AUTOFIT]: Add parameter to
-	handle output to stdout.
-	Use AF_DUMP.
-	(af_glyph_hints_dump_points, af_glyph_hints_dump_segments,
-	af_glyph_hints_dump_edges) [!FT_DEBUG_AUTOFIT]: Removed.
-
-2013-11-25  Werner Lemberg  <wl@gnu.org>
-
-	* Version 2.5.1 released.
-	=========================
-
-
-	Tag sources with `VER-2-5-1'.
-
-	* docs/VERSION.DLL: Update documentation and bump version number to
-	2.5.1.
-
-	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
-	builds/windows/vc2005/index.html,
-	builds/windows/vc2008/freetype.vcproj,
-	builds/windows/vc2008/index.html,
-	builds/windows/vc2010/freetype.vcxproj,
-	builds/windows/vc2010/index.html,
-	builds/windows/visualc/freetype.dsp,
-	builds/windows/visualc/freetype.vcproj,
-	builds/windows/visualc/index.html,
-	builds/windows/visualce/freetype.dsp,
-	builds/windows/visualce/freetype.vcproj,
-	builds/windows/visualce/index.html,
-	builds/wince/vc2005-ce/freetype.vcproj,
-	builds/wince/vc2005-ce/index.html,
-	builds/wince/vc2008-ce/freetype.vcproj,
-	builds/wince/vc2008-ce/index.html: s/2.5.0/2.5.1/, s/250/251/.
-
-	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 1.
-
-	* builds/unix/configure.raw (version_info): Set to 17:0:11.
-	* CMakeLists.txt (VERSION_PATCH): Set to 1.
-	* docs/CHANGES, docs/release: Updated.
-
-2013-11-23  Werner Lemberg  <wl@gnu.org>
-
-	[truetype]: Add tricky font names `hkscsiic.ttf' and `iicore.ttf'.
-
-	* src/truetype/ttobjs.c (TRICK_NAMES_MAX_CHARACTERS,
-	TRICK_NAMES_COUNT): Updated.
-	(trick_names): Add family name for the two fonts.
-
-2013-11-23  Werner Lemberg  <wl@gnu.org>
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap): Typo.
-
-2013-11-21  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Typo.
-
-	Problem reported by Hin-Tak Leung <htl10@users.sourceforge.net>.
-
-	* src/sfnt/sfobjs.c (sfnt_load_face): Return correct `bsize->width'
-	value if the font lacks an `OS/2' table.
-
-2013-11-21  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Improve handling of buggy embedded bitmap strikes.
-
-	We are now able to successfully load `AppleMyoungJo.ttf'.
-	Problem reported by Hin-Tak Leung <htl10@users.sourceforge.net>.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap): Don't trust glyph
-	format.
-
-2013-11-20  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Don't trust `maxp's `maxSizeOfInstructions'.
-
-	Problem reported by Hin-Tak Leung <htl10@users.sourceforge.net>; see
-
-	  http://lists.nongnu.org/archive/html/freetype-devel/2013-08/msg00005.html
-
-	for details.
-
-	* src/base/ftobjs.c (FT_Load_Glyph): Check size of `fpgm' and `prep'
-	tables also for setting `autohint'.
-
-	* src/truetype/ttgload.c (TT_Load_Simple_Glyph): Use code from
-	`TT_Process_Composite_Glyph' for handling unreliable values of
-	`maxSizeOfInstructions'.
-
-2013-11-16  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix `OS/2' table version 5 support.
-
-	We now follow the `official' announcement from Microsoft (on the
-	OpenType mailing list, which unfortunately hasn't a public archive).
-
-	* include/freetype/tttables.h (TT_OS2):
-	s/usLowerPointSize/usLowerOpticalPointSize/,
-	s/usUpperPointSize/usUpperOpticalPointSize/.
-
-	* src/sfnt/ttload.c (tt_face_load_os2): Update, and set correct
-	default values.
-
-2013-11-13  Werner Lemberg  <wl@gnu.org>
-
-	* builds/unix/ft2unix.h: Remove.  No longer necessary.
-
-	* builds/unix/install.mk (install): Updated.
-
-2013-11-13  Werner Lemberg  <wl@gnu.org>
-
-	Simplify header file hierarchy.
-
-	This large patch changes the header file directory layout from
-	`include/freetype/...' to `include/...', effectively removing one
-	level.  Since the file `ft2build.h' is also located in `include'
-	(and it stays there even after installation), all FreeType header
-	files are now in a single directory.
-
-	Applications that use (a) `freetype-config' or FreeType's
-	`pkg-config' file to get the include directory for the compiler, and
-	(b) the documented way for header inclusion like
-
-	  #include <ft2build.h>
-	  #include FT_FREETYPE_H
-	  ...
-
-	don't need any change to the source code.
-
-	* include/freetype/*: Move up to...
-	* include/*: ... this directory.
-
-	* builds/amiga/include/freetype/*: Move up to...
-	* builds/amiga/include/*: ... this directory.
-
-	*/*: Essentially do `s@/freetype/@/@' where appropriate.
-
-	* CMakeList.txt: Simplify.
-	* builds/unix/freetype-config.in, builds/unix/freetype2.in: For
-	`--cflags', return a single directory.
-	* builds/unix/install.mk (install): No longer try to remove `cache'
-	and `internal' subdirectories; instead, remove the `freetype'
-	subdirectory.
-
-2013-11-12  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Fix last `truetype' commit.
-
-	* src/truetype/ttgload.c (tt_get_metrics): Preserve stream position.
-	Return error value.
-	(load_truetype_glyph): Updated.
-
-2013-11-10  Werner Lemberg  <wl@gnu.org>
-
-	* docs/CMAKE: New dummy file.
-
-2013-11-08  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Fix for hints that touch.
-
-	* src/cff/cf2hints.c (cf2_hintmap_insertHint): Fix condition for
-	finding index value of insertion point.
-
-2013-11-06  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Fix handling of phantom points in composite glyphs.
-	Problem reported by Nigel Tao <nigeltao@golang.org>.
-
-	This is a follow-up commit to the previous one.
-
-	* src/truetype/ttgload.c (load_truetype_glyph): Call
-	`tt_get_metrics' after loading the glyph header.
-
-2013-11-06  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Improve emulation of vertical metrics.
-
-	This commit also improves the start values of vertical phantom
-	points.  Kudos to Greg Hitchcock for help.
-
-	* src/truetype/ttgload.c (TT_Get_VMetrics): Add parameter to pass
-	`yMax' value.  Replace code with fixed Microsoft definition.
-	(tt_get_metrics): Updated.
-	(TT_LOADER_SET_PP): Add explanation how to initialize phantom
-	points, taken from both the OpenType specification and private
-	communication with Greg (which will eventually be added to the
-	standard).
-	Fix horizontal position of `pp3' and `pp4'.
-
-	* src/truetype/ttgload.h: Updated.
-
-	* src/truetype/ttdriver.c (tt_get_advances): Updated.
-
-	* docs/CHANGES: Updated.
-
-2013-11-05  Werner Lemberg  <wl@gnu.org>
-
-	* builds/windows/vc2010/freetype.vcxproj: s/v110/v100/.
-	PlatformToolSet version 110 is for VC2012.
-
-	Problem reported (with solution) by Dave Arnold <darnold@adobe.com>.
-
-2013-11-05  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Correctly reset point tags for glyph components.
-	Problem reported by Nigel Tao <nigeltao@golang.org>.
-
-	* src/truetype/ttgload.c (TT_Process_Composite_Glyph): Fix loop.
-
-2013-11-02  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Fix GETINFO opcode handling of subpixel hinting bits.
-
-	* src/truetype/ttinterp.c (Ins_GETINFO): Don't request bit 6 set to
-	get info on subpixel hinting.
-
-	* docs/CHANGES: Updated.
-
-2013-11-02  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #40451.
-
-	Simply apply the patch from the bug report.
-
-	* builds/unix/ftconfig.in, builds/vms/ftconfig.h,
-	include/freetype/config/ftconfig.h: The used #pragma directives only
-	work with gcc versions 4.6 and higher.
-
-2013-11-01  Werner Lemberg  <wl@gnu.org>
-
-	* docs/CHANGES: Updated.
-
-2013-11-01  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Minor code refactoring.
-
-	Two benefits: The allocated FDEF (and IDEF) array gets slightly
-	smaller, and the `ttdebug' demo program has access to function
-	numbers without additional costs.
-
-	Fortunately, no changes to FontForge are necessary – this is the
-	only external TrueType debugger I know of, but others may exist and
-	should check the code accordingly.
-
-	* src/truetype/ttinterp.h (TT_CallRec): Replace `Cur_Restart' and
-	`Cur_End' with a pointer to the corresponding `TT_DefRecord'
-	structure.
-
-	* src/truetype/ttinterp.c (DO_JROT, DO_JMPR, DO_JROF, Ins_ENDF,
-	Ins_CALL, Ins_LOOPCALL, Ins_UNKNOWN, TT_RunIns <Invalid_Opcode>):
-	Updated.
-
-2013-10-27  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Implement support for `OS/2' table version 5.
-
-	See
-
-	  http://typedrawers.com/discussion/470/new-microsoft-size-specific-design-selection-mechanism
-
-	for the announcement.
-
-	* include/freetype/tttables.h (TT_OS2): Add fields
-	`usLowerPointSize' and `usUpperPointSize'.  Since FreeType returns
-	this structure only as a pointer through `FT_Get_Sfnt_Table', there
-	shouldn't be any ABI problems.
-
-	* src/sfnt/ttload.c (tt_face_load_os2): Implement it.
-
-	* docs/CHANGES: Updated.
-
-2013-10-24  Werner Lemberg  <wl@gnu.org>
-
-	* README.git, docs/CHANGES, docs/INSTALL: Updated.
-
-2013-10-24  John Cary  <cary@txcorp.com>
-
-	Provide cmake support.
-
-	* CMakeLists.txt: New file.
-
-2013-10-23  Kenneth Miller  <kennethadammiller@yahoo.com>
-	    Werner Lemberg  <wl@gnu.org>
-
-	Provide support for x64 builds in Visual C++ project files.
-
-	* src/builds/win32: Renamed to...
-	* src/builds/windows: This.
-
-	* src/builds/windows/vc2010/*: Updated to handle x64 target.
-
-	* src/builds/windows/*.mk, docs/INSTALL.GNU: s/win32/windows/ where
-	appropriate.
-
-2013-10-22  Werner Lemberg  <wl@gnu.org>
-
-	* src/base/md5.c, src/base/md5.h: Updated to recent version.
-
-	* src/base/ftobjs.c: Updated; `md5.c' no longer uses `free'.
-
-	The canonical URL to get updates for this file is
-
-	  http://cvsweb.openwall.com/cgi/cvsweb.cgi/Owl/packages/popa3d/popa3d/md5/
-
-	as the author told me in private communication.
-
-2013-10-19  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] s/SMALL_TOP/X_HEIGHT/.
-
-	* src/autofit/afblue.dat: Updated.
-
-	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
-
-	* src/autofit/aflatin.c, src/autofit/aflatin.h,
-	src/autofit/atlatin2.c: Updated.
-
-2013-10-19  Werner Lemberg  <wl@gnu.org>
-
-	* src/autofit/afblue.dat: s/MINOR/DESCENDER/.
-
-	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
-
-2013-10-16  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Add description strings to script entries.
-
-	Currently, this is unused.
-
-	* src/autofit/afscript.h: Do it.
-	* src/autofit/afglobal.c, src/autofit/afpic.c,
-	src/autofit/aftypes.h: Updated.
-
-2013-10-16  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Improve tracing message for extra light flag.
-
-	* src/autofit/aflatin.c (af_latin_metrics_scale_dim): Do it.
-
-2013-10-15  Chongyu Zhu  <lembacon@gmail.com>
-
-	[arm] Fix thumb2 inline assembly under LLVM.
-
-	When using `ADD' with an immediate operand, the instruction is
-	actually `ADD Rd, Rn, #<imm12>', that is, the maximum of the
-	immediate operand cannot exceed 4095.  It will fail to compile with
-	LLVM.
-
-	However, in GCC, due to some legacy compatibility considerations,
-	`ADD.W' will be automatically emitted when the immediate operand is
-	larger than 4095.
-
-	* builds/unix/ftconfig.in, include/freetype/config/ftconfig.h
-	(FT_MulFix_arm) [__GNUC__]: Support clang compiler.
-
-	* src/truetype/ttinterp.c (TT_MulFix14_arm) [__GNUC__]: Ditto.
-
-2013-10-12  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Improve tracing of `latin' hinter.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Report blue
-	zone types.
-	(af_latin_metrics_scale_dim): Report scaling changes due to x height
-	alignment.
-	Report scaled stroke width and blue zone values.
-
-2013-10-03  Dave Arnold  <darnold@adobe.com>
-
-	* src/cff/cf2font.c (cf2_computeDarkening): Avoid division by zero.
-
-	Note that the old code avoided using a region of the piecewise
-	linear function where the slope was zero.  The recovery was to use a
-	different section of the function, which produced a different,
-	incorrect amount of darkening.
-
-2013-10-02  Darrell Bellert  <darrell.bellert@hl.konicaminolta.us>
-
-	* src/sfnt/ttload.c (tt_face_load_pclt): Fix `pclt_fields'.
-
-2013-10-02  Dave Arnold  <darnold@adobe.com>
-
-	* src/cff/cf2font.c (cf2_computeDarkening): Initialize darkenAmount.
-
-	This line was lost in commit 89ca1fd6 (from 2013-06-25).  The effect
-	is to use a previous darkening amount when producing an unhinted,
-	unscaled outline.  This can cause autohint samples in ftgrid and
-	ftview to be based on darkened CFF outlines instead of unhinted,
-	undarkened ones.
-
-2013-09-29  Dave Arnold  <darnold@adobe.com>
-
-	Fix Savannah bug #39295.
-
-	The bug was caused by switching to the initial hintmap (the one in
-	effect when `moveto' executes) just before drawing the final element
-	in the charstring.  This ensured that the path was closed (in both
-	Character Space and Device Space).  But if the final element was a
-	curve and if the final hintmap was different enough from the initial
-	one, then the curve was visibly distorted.
-
-	The first part of the fix is to draw the final curve using the final
-	hintmap as specified by the charstring.  This corrects the
-	distortion but does not ensure closing in Device Space.  It may
-	require the rasterizer to automatically generate an extra closing
-	line.  Depending on the hintmap differences, this line could be from
-	zero to a couple pixels in length.
-
-	The second part of the fix covers the case where the charstring
-	subpath is closed with an explicit line.  We now modify that line's
-	end point to avoid the distortion.
-
-	Some glyphs in the bug report font (TexGyreHeros-Regular) that show
-	the change are:
-
-	  25ppem    S (98)
-	  24ppem    eight (52)
-	  25.5ppem  p (85)
-
-	Curves at the *end* of a subpath are no longer distorted.  However,
-	some of these glyphs have bad hint substitutions in the middle of a
-	subpath, and these are not affected.
-
-	The patch has been tested with a set of 106 fonts that shipped with
-	Adobe Creative Suite 4, together with 756 Open Source CFF fonts from
-	Google Fonts.  There are 1.5 million glyphs, of which some 20k are
-	changed with the fix.  A sampling of a few hundred of these changes
-	have been examined more closely, and the changes look good (or at
-	least acceptable).
-
-	* src/cff/cf2hints.h (CF2_GlyphPathRec): New element `pathIsClosing'
-	to indicate that we synthesize a closepath line.
-
-	* src/cff/cf2hints.c (cf2_glyphpath_init): Updated.
-	(cf2_glyphpath_pushPrevElem): If closing, use first hint map (for
-	`lineto' operator) and adjust hint zone.
-	For synthesized closing lines, use end point in first hint zone.
-	(cf2_glyphpath_lineTo): Take care of synthesized closing lines.  In
-	particular, shift the detection of zero-length lines from character
-	space to device space.
-	(cf2_glyphpath_closeOpenPath): Remove assertion.
-	Updated.
-
-2013-09-25  Werner Lemberg  <wl@gnu.org>
-
-	* src/autofit/aflatin.c (af_{grek,cyrl}_uniranges): Fix arrays.
-
-2013-09-25  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	[bdf, pcf] Refuse non-zero face_index.
-
-	Suggested by Akira Tagoh, see
-
-	  http://lists.gnu.org/archive/html/freetype/2013-09/msg00030.html
-
-	* src/bdf/bdfdrivr.c (BDF_Face_Init): Return `Invalid_Argument'
-	error if the font could be opened but non-zero `face_index' is
-	given.
-	* src/pcf/pcfdrivr.c (PCF_Face_Init): Ditto.
-
-	* src/type42/t42objs.c (T42_Face_Init): Remove unrequired FT_UNUSED
-	macro for `face_index' because it is validated later.
-
-2013-09-23  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #40090.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_scale): Revert commit
-	306f8c5d (from 2013-08-25) affecting this function.
-
-2013-09-22  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Disunify Cyrillic and Greek handling from Latin.
-
-	* src/autofit/afscript.h: Add Cyrillic and Greek.
-
-	* src/autofit/afblue.dat (AF_BLUE_STRINGSET_GREK,
-	AF_BLUE_STRINGSET_CYRL): Add blue zones for Greek and Cyrillic.
-	(AF_BLUE_STRINGSET_LATN): Fix typo.
-	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
-
-	* src/autofit/aflatin.c (af_grek_uniranges, af_cyrl_uniranges): New
-	arrays.
-	(af_grek_script_class, af_cyrl_script_class): New scripts.
-	* src/autofit/aflatin.h: Updated.
-
-2013-09-20  Werner Lemberg  <wl@gnu.org>
-
-	* docs/CHANGES: Updated.
-
-2013-09-20  Behdad Esfahbod  <behdad@behdad.org>
-
-	Fix vertical size of emboldened glyphs.
-
-	Cf. https://bugzilla.gnome.org/show_bug.cgi?id=686709
-
-	* src/base/ftsynth.c (FT_GlyphSlot_Embolden): Adjust `horiBearingY'
-	also.
-
-2013-09-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	* include/freetype/ftoutln.h: Correct FT_Outline_Get_Orientation
-	algorithm description.
-
-2013-09-11  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Improve Hebrew rendering.
-
-	This change introduces a new blue zone property
-	`AF_BLUE_PROPERTY_LATIN_LONG' to make the auto-hinter ignore short
-	top segments.
-
-	* src/autofit/afblue.dat: Fix Hebrew blue strings.
-	Use AF_BLUE_PROPERTY_LATIN_LONG for AF_BLUE_STRING_HEBREW_TOP.
-
-	* src/autofit/afblue.hin (AF_BLUE_PROPERTY_LATIN_LONG): New macro.
-
-	* src/autofit/afblue.c, src/autofit/afblue.h: Updated.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Handle
-	`AF_LATIN_IS_LONG_BLUE'.
-
-	* src/autofit/aflatin.h (AF_LATIN_IS_LONG_BLUE): New macro.
-
-2013-08-28  Behdad Esfahbod  <behdad@google.com>
-
-	[sfnt] Fix frame access while reading WOFF table directory.
-
-	* src/sfnt/sfobjs.c (woff_open_font): Using single memory frame
-	while reading the directory entries for the whole loop.
-
-2013-08-29  Werner Lemberg  <wl@gnu.org>
-            Behdad Esfahbod  <behdad@google.com>
-
-	Implement support for WOFF containers.
-
-	We simply synthesize a SFNT from the WOFF, create a memory stream
-	for the new data, and load the SFNT as usual.
-
-	Does NOT add any API to access WOFF metadata or private blocks.
-
-	* include/freetype/internal/tttypes.h (WOFF_HeaderRec,
-	WOFF_TableRec): New structures.
-
-	* include/freetype/tttags.h (TTAG_wOFF): New macro.
-
-	* src/base/ftobjs.c (FT_Open_Face): Set `stream' after calling
-	`open_face'.
-
-	* src/sfnt/sfobjs.c [FT_CONFIG_OPTION_SYSTEM_ZLIB]: Include
-	`FT_GZIP_H'.
-	(WRITE_BYTE, WRITE_USHORT, WRITE_ULONG): New temporary macros for
-	writing to a stream.
-	(sfnt_stream_close, compare_offsets, woff_open_font): New functions.
-	(sfnt_open_font): Handle `TTAG_wOFF'.
-	(sfnt_init_face): Set `stream' after calling `sfnt_open_font'.
-
-	* src/truetype/ttobjs.c (tt_face_init): Set `stream' after calling
-	`sfnt->init_face'.
-
-	* src/base/ftobjs.c (open_face): Use a pointer to FT_Stream as an
-	argument so that a changed stream survives.
-	Update callers.
-
-2013-08-28  Werner Lemberg  <wl@gnu.org>
-
-	[gzip] New function `FT_Gzip_Uncompress'.
-
-	This is modeled after zlib's `uncompress' function.  We need this
-	for WOFF support.
-
-	* include/freetype/ftgzip.h, src/gzip/ftgzip.c (FT_Gzip_Uncompress):
-	New function.
-
-	* src/gzip/rules.mk: Rewrite to better reflect dependencies.
-
-2013-08-28  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix `make multi' compilation.
-
-	* src/autofit/afblue.cin, src/autofit/afblue.c: Don't include
-	`afblue.h' but `aftypes.h'.
-	* src/autofit/afcjk.c: Don't include `aftypes.h' but `afglobal.h'.
-
-2013-08-28  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix C++ compilation.
-
-	* src/autofit/afglobal.c (af_face_globals_get_metrics),
-	src/autofit/afdummy.c (af_dflt_script_class), src/autofit/afindic.c
-	(af_deva_script_class): Use proper casts.
-
-2013-08-27  Behdad Esfahbod  <behdad@google.com>
-
-	* src/sfnt/ttload.c (tt_face_load_font_dir): Fix sign typos.
-
-2013-08-27  Behdad Esfahbod  <behdad@google.com>
-
-	FT_Open_Face: Improve external stream handling.
-
-	If the font's `clazz->init_face' function wants to swap to new
-	stream, handling of whether original stream was external could
-	result to either memory leak or double free.  Mark externality into
-	face flags before calling `init_face' such that the clazz can handle
-	external streams properly.
-
-	* src/base/ftobjs.c (FT_Open_Face): Move code to set
-	FT_FACE_FLAG_EXTERNAL_STREAM to...
-	(open_face): This function.
-
-2013-08-27  Werner Lemberg  <wl@gnu.org>
-
-	Remove `FT_SqrtFixed' function.
-
-	It's no longer used.
-
-	* include/freetype/internal/ftcalc.h, src/base/ftcalc.c: Do it.
-
-2013-08-27  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] While tracing, report script names instead of ID values.
-
-	* src/autofit/afglobal.c (af_script_names) [FT_DEBUG_LEVEL_TRACE]:
-	New array.
-	* src/autofit/afglobal.h: Updated.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_widths,
-	af_cjk_hint_edges): Use `af_script_names'.
-	* src/autofit/aflatin.c (af_latin_metrics_init_widths,
-	af_latin_hint_edges): Ditto.
-
-2013-08-26  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Report used script while hinting a glyph.
-
-	* src/autofit/afcjk.c (af_cjk_hint_edges), src/autofit/aflatin.c
-	(af_latin_hint_edges): Implement it.
-
-2013-08-26  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Add support for Hebrew script.
-
-	* src/autofit/afblue.dat: Add blue strings for Hebrew.
-	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
-
-	* src/autofit/aflatin.c (af_hebr_uniranges): New array.
-	(af_hebr_script_class): New script.
-	* src/autofit/aflatin.h, src/autofit/afscript.h: Updated.
-
-2013-08-26  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Improve tracing messages.
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_widths): Mention script
-	ID in tracing message.
-	(af_cjk_metrics_init_blues): Initialize `axis' outside of the inner
-	loop.
-	Improve tracing messages.
-	(af_cjk_hint_edges) [FT_DEBUG_LEVEL_TRACE]: New variable
-	`num_actions' to count hinting actions.
-	Improve tracing messages.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_widths): Mention
-	script ID in tracing message.
-	(af_latin_metrics_init_blues, af_latin_hint_edges): Improve tracing
-	messages.
-
-2013-08-26  Werner Lemberg  <wl@gnu.org>
-
-	Better tracing of loaded glyphs.
-
-	Previously, the loading of a glyph was traced at level 4, if at all.
-	With this change, all font loading routines emit a tracing message
-	at level 1, making it easier to select tracing output (for example
-	using F2_DEBUG="any:1 afhints:7 aflatin:7").
-
-	* src/bdf/bdfdrivr.c (BDF_Glyph_Load): Add tracing message.
-	* src/cff/cffdrivr.c (cff_glyph_load): Ditto.
-	* src/cff/cffgload.c (cff_decoder_prepare): Improve tracing
-	messages.
-	* src/cid/cidgload.c (cid_load_glyph): Use level 1 for tracing
-	message.
-	* src/pcf/pcfdrivr.c (PCF_Glyph_Load): Ditto.
-	* src/pfr/pfrobjs.c (pfr_slot_load): Add tracing message.
-	* src/truetype/ttgload.c (TT_Load_Glyph): Ditto.
-	* src/type1/t1gload.c (T1_Load_Glyph): Ditto.
-	* src/type42/t42objs.c (T42_GlyphSlot_Load): Ditto.
-	* src/winfonts/winfnt.c (FNT_Load_Glyph): Ditto.
-
-2013-08-26  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix script selection.
-
-	* src/autofit/afglobal.c (af_face_globals_get_metrics): Use
-	`AF_SCRIPT_DFLT', not value 0.
-	Simplify code.
-
-	* src/autofit/afscript.h: Sort by script name.
-
-2013-08-26  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Make `dummy' hinter work as expected.
-
-	* src/autofit/afdummy.c (af_dummy_hints_init): Properly set scaling
-	information.
-	(af_dummy_hints_apply): Scale the glyphs.
-
-2013-08-25  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Make `cjk' module use blue stringsets.
-
-	* src/autofit/afcjk.c (AF_CJK_MAX_TEST_CHARACTERS): Removed.
-	(af_cjk_hani_blue_chars): Removed.
-	(AF_CJK_BLUE_TYPE_*): Removed.
-	(af_cjk_metrics_init_blues): Replace AF_CJK_MAX_TEST_CHARACTERS with
-	AF_BLUE_STRING_MAX_LEN.
-	Change loops to use offsets (in file `afblue.h') into the new arrays
-	`af_blue_stringsets' and `af_blue_strings' (in file `afblue.c').
-	Instead of three dimensions (as used in the old blue string array)
-	we now use properties to do the same, saving one loop nesting level.
-
-	* src/autofit/afcjk.h: Remove old enumeration values superseded by
-	the new data in `afblue.h'.
-	(AF_CJK_IS_TOP_BLUE, AF_CJK_IS_HORIZ_BLUE, AF_CJK_IS_FILLED_BLUE,
-	AF_CJK_IS_RIGHT_BLUE): New macros, to be used in
-	`af_cjk_metrics_init_blues'.
-	(AF_CJK_BLUE_IS_RIGHT): Remove this now redundant enum value.
-	(AF_CJK_BLUE_IS_TOP): Renamed to...
-	(AF_CJK_BLUE_TOP): This.
-	(AF_CJK_MAX_BLUES): Remove.
-	(AF_CJKAxisRec): Updated.
-
-2013-08-25  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Typo.
-
-	* src/autofit/afblue.hin, src/autofit/afblue.c (GET_UTF8_CHAR): Use
-	cast.
-
-2013-08-25  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Synchronize `cjk' with `latin' module (and vice versa).
-
-	* src/autofit/afcjk.c (af_cjk_metrics_init_widths): Add tracing
-	messages.
-	(af_cjk_metrics_init_blues): Don't pass blue string array as
-	argument but use the global array directly.
-	Use `outline' directly.
-	Update and add tracing messages.
-	(af_cjk_metrics_init): Simplify code.
-	(af_cjk_metrics_scale_dim): Improve tracing message.
-	(af_cjk_metrics_scale): Synchronize.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_widths,
-	af_latin_metrics_init_blues): Improve and add tracing messages.
-
-2013-08-25  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Make `latin' module use blue stringsets.
-
-	* src/autofit/aflatin.c (AF_LATIN_MAX_TEST_CHARACTERS): Removed.
-	(af_latin_blue_chars): Removed.
-	(af_latin_metrics_init_blues): Replace AF_LATIN_MAX_TEST_CHARACTERS
-	with AF_BLUE_STRING_MAX_LEN.
-	Change loops to use offsets (in file `afblue.h') into the new arrays
-	`af_blue_stringsets' and `af_blue_strings' (in file `afblue.c').
-	Use `AF_LATIN_IS_SMALL_TOP_BLUE' macro.
-
-	* src/autofit/aflatin.h: Remove old enumeration values superseded by
-	the new data in `afblue.h'.
-	(AF_LATIN_IS_TOP_BLUE): Updated definition.
-	(AF_LATIN_IS_SMALL_TOP_BLUE): New macro.
-	(AF_LATIN_MAX_BLUES): Remove.
-	(AF_LatinAxisRec): Updated.
-
-2013-08-25  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Add blue stringsets.
-
-	* src/autofit/aftypes.h: Include `afblue.h'.
-	(AF_ScriptClassRec): Add `blue_stringset' field.
-	(AF_DEFINE_SCRIPT_CLASS): Updated.
-
-	* src/autofit/autofit.c: Include `afblue.c'.
-
-	* src/autofit/afcjk.c (af_hani_script_class), src/autofit/afdummy.c
-	(af_dflt_script_class), src/autofit/afindic.c
-	(af_deva_script_class), src/autofit/aflatin.c
-	(af_latn_script_class), src/autofit/aflatin2.c
-	(af_ltn2_script_class): Updated.
-
-	* src/autofit/rules.mk (AUTOF_DRV_SRC): Add `afblue.c'.
-
-2013-08-25  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Introduce data file for blue strings.
-
-	The idea is to have a central file which gets processed by a Perl
-	script to create proper `.c' and `.h' files using templates.  There
-	are two other reasons to do that:
-
-	  . The data file should be easily readable.  We use UTF-8 encoding
-	    which then gets converted to single bytes.
-
-	  . Since the number of supported scripts will increase soon, the
-	    current usage of blue string arrays is a waste of space.  Using
-	    the Perl script it is possible to imitate jagged arrays,
-	    defining enumeration constants as offsets into the arrays.
-
-	This commit only adds files without changing any functionality.
-
-	* src/autofit/afblue.dat: New data file.
-	* src/tools/afblue.pl: New Perl script for processing `afblue.dat'.
-
-	* src/autofit/afblue.cin, src/autofit/afblue.hin: New template files
-	for...
-	* src/autofit/afblue.c, src/autofit/afblue.c: New source files.
-	To avoid a dependency on Perl, we add them too.
-
-2013-08-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Enable new algorithm for `BBox_Cubic_Check'.
-
-	* src/base/ftbbox.c: Enable new BBox_Cubic_Check algorithm, remove
-	the old one.
-	Improve comments.
-
-2013-08-18  Werner Lemberg  <wl@gnu.org>
-
-	* builds/unix/unix-def.in (freetype2.pc): Don't set executable bit.
-
-2013-08-18  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #39804.
-
-	* builds/unix/configure.raw (LIBPNG): Define and export.
-	* builds/unix/freetype-config.in, builds/unix/freetype2.in: Handle
-	libpng.
-
-2013-08-17  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Clean up BBox_Conic_Check.
-
-	* src/base/ftbbox.c (BBox_Conic_Check): Remove redundant checks for
-	extremum at the segment ends, which are already within the bbox.
-	Slightly modify calculations.
-
-2013-08-15  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Finish experimental (disabled) BBox_Cubic_Check implementation.
-
-	* src/base/ftbbox.c (BBox_Cubic_Check): Scale arguments to improve
-	accuracy and avoid overflows.
-
-2013-08-13  Alexei Podtelezhnikov  <apodtele@gmail.com>
-
-	[base] Refactor experimental (disabled) BBox_Cubic_Check.
-
-	* src/base/ftbbox.c (BBox_Cubic_Check): Implement the minimum search
-	as the mirror image of the maximum search implemented here...
-	(update_max): New function.
-
-2013-08-06  John Tytgat  <John.Tytgat@esko.com>
-
-	Fix Savannah bug #39702.
-
-	* src/cff/cffload.c (cff_index_get_pointers): Check for `cur_offset
-	!= 0'; this stronger test is mandated by the CFF specification.
-	Fix test for INDEX structures which have one or more empty entries
-	at the end.
-
-2013-08-05  Werner Lemberg  <wl@gnu.org>
-
-	Fix gcc pragmas, part 2.
-
-	* src/truetype/ttinterp.c (TT_MulFix14_long_long,
-	TT_DotFix14_long_long): `#pragma gcc diagnostic {push,pop}' has been
-	introduced with gcc version 4.6.
-
-2013-08-05  Werner Lemberg  <wl@gnu.org>
-
-	Fix gcc pragmas.
-
-	* src/truetype/ttinterp.c (TT_MulFix14_long_long,
-	TT_DotFix14_long_long): Older gcc versions don't accept diagnostic
-	pragmas within a function body.
-
-2013-08-05  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #39700.
-
-	* builds/unix/ftconfig.h: Synchronize with
-	`include/freetype/config/ftconfig.h'.
-
-	* builds/vms/ftconfig.h: Ditto.
-	Make the differences to the master `ftconfig.h' file as small as
-	possible for easier maintainance.
-
-2013-08-05  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Improve handling of `near' points.
-
-	Points which are very near to each other are now marked as such.
-	The `weak' flag is then computed by using the `in' vector of the
-	first and the `out' vector of the last point of a group of near
-	points.
-
-	For example, this fixes the rendering of glyph `Oslash' in
-	`Roboto-Thin.ttf'.
-
-	* src/autofit/afhints.h (AF_Flags): New value `AF_FLAGS_NEAR'.
-
-	* src/autofit/afhints.c (af_glyph_hints_reload): Introduce
-	the heuristic value `near_limit' to decide whether the current point
-	is near to the previous one, then set `AF_FLAG_NEAR' accordingly.
-	Store good `in' vector (of last non-near point) in
-	`last_good_in_{x,y}' and use it as an argument to
-	`ft_corner_is_flat' if necessary.
-
-2013-08-02  Werner Lemberg  <wl@gnu.org>
-
-	* include/freetype/ftcffdrv.h: Improve documentation.
-	This is based on blog entries from David Lemon and Dave Arnold (both
-	from Adobe) with kind permission.  Dave also helped in
-	proof-reading.
-
-2013-08-02  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Move declaration of scripts into separate file.
-
-	This has the benefit that we don't need to duplicate the data at
-	different places.
-
-	* src/autofit/afscript.h: New file.
-
-	* src/autofit/aftypes.h (AF_Script): Include `afscript.h' to define
-	the enumeration values.
-
-	* src/autofit/afglobal.c: Include `afscript.h' to get the script
-	specific header files.
-	(af_script_classes): Include `afscript.h' to fill this array.
-
-	* src/autofit/afpic.c: Include `afscript.h' to get the script
-	specific header files.
-	(autofit_module_class_pic_init): Include `afscript.h' for
-	initialization.
-	* src/autofit/afpic.h (AF_SCRIPT_CLASSES_COUNT,
-	AF_SCRIPT_CLASSES_REC_COUNT): Removed.  Use `AF_SCRIPT_MAX' instead.
-
-	* src/autofit/rules.mk (AUTOF_DRV_H): Updated.
-
-2013-08-02  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Move declaration of writing systems into separate file.
-
-	This has the benefit that we don't need to duplicate the data at
-	different places.
-
-	* src/autofit/afwrtsys.h: New file.
-
-	* src/autofit/aftypes.h (AF_WritingSystem): Include `afwrtsys.h' to
-	define the enumeration values.
-
-	* src/autofit/afglobal.c: Include `afwrtsys.h' to get the writing
-	system specific header files.
-	Include `afpic.h'.
-	(af_writing_system_classes): Include `afwrtsys.h' to fill this
-	array.
-
-	* src/autofit/afpic.c: Include `afwrtsys.h' to get the writing
-	system specific header files.
-	(autofit_module_class_pic_init): Include `afwrtsys.h' for
-	initialization.
-	* src/autofit/afpic.h (AF_WRITING_SYSTEM_CLASSES_COUNT,
-	AF_WRITING_SYSTEM_CLASSES_REC_COUNT): Removed.  Use
-	`AF_WRITING_SYSTEM_MAX' instead.
-
-2013-08-02  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Fix compilation with g++.
-
-	* src/sfnt/pngshim.c (error_callback, read_data_from_FT_stream): Use
-	cast.
-	(Load_SBit_Png): Pacify compiler.
-
-2013-08-02  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-            Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix `make multi'.
-
-	* include/freetype/config/ftconfig.h (FT_LOCAL_ARRAY,
-	FT_LOCAL_ARRAY_DEF): New macros.
-
-	* src/autofit/afglobal.c (af_writing_system_classes,
-	af_script_classes): Use FT_LOCAL_ARRAY_DEF.
-	* src/autofit/afglobal.h: Declare `af_writing_system_classes' and
-	`af_script_classes'.
-	* src/autofit/afloader.c: Include `afpic.h'.
-
-2013-08-01  Werner Lemberg  <wl@gnu.org>
-
-	Another round of cppcheck nitpicks.
-
-	The call was (from the top-level of the FreeType tree):
-
-	  cppcheck --force \
-	           --enable=all \
-	           -I /usr/include \
-	           -I /usr/local/include \
-	           -I /usr/lib/gcc/i586-suse-linux/4.7/include \
-	           -I include \
-	           -I include/freetype \
-	           -I include/freetype/config \
-	           -I include/freetype/internal \
-	           -DFT2_BUILD_LIBRARY \
-	           . &> cppcheck.log
-
-	using cppcheck git commit f7e93f99.
-
-	Note that cppcheck still can't handle `#include FOO' (with `FOO' a
-	macro).
-
-	*/* Improve variable scopes.
-	*/* Remove redundant initializations which get overwritten.
-
-	* src/gxvalid/*: Comment out redundant code or guard it with
-	FT_DEBUG_LEVEL_TRACE.
-
-2013-07-30  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Introduce `writing systems'.
-
-	This patch adds a new top level to the auto-hinter's script class
-	hierarchy.  It defines `writing systems' which can contain multiple
-	scripts.
-
-	For example, the `latin' writing system (in file `aflatin.c') is
-	able to support scripts like Latin, Cyrillic, Armenian, etc., which
-	can be handled similarly.
-
-	Scripts are now named using four-letter OpenType tags.
-
-	* src/autofit/aftypes.h (AF_ScriptClassRec): Move relevant members
-	to...
-	(AF_WritingSystemClassRec): This new structure.  It holds pointers
-	to functions which can be shared among related scripts.
-	(AF_WritingSystem): New enumeration.
-	(AF_Script): Revised values using four-letter tags.
-	(AF_DEFINE_WRITING_SYSTEM_CLASS): New macro.
-	(AF_DEFINE_SCRIPT_CLASS): Updated.
-
-	* src/autofit/afglobal.c (af_writing_system_classes): New global,
-	constant array.
-	(af_script_classes): Updated.
-	(af_face_globals_free): Updated.
-	Remove assertion.
-	(af_face_globals_get_metrics): Updated.
-
-	* src/autofit/afglobal.h (AF_SCRIPT_FALLBACK)
-	[!AF_CONFIG_OPTION_CJK]: Handle this case.
-
-	* src/autofit/afloader.c (af_loader_load_g, af_loader_load_glyph):
-	Updated.
-
-	* src/autofit/afpic.c (autofit_module_class_pic_init): Updated;
-	initialize structures for both writing systems and scripts.
-	* src/autofit/afpic.h: Updated.
-	(AF_WRITING_SYSTEM_CLASSES_GET): New macro.
-
-	* src/autofit/afcjk.c (af_cjk_writing_system_class): New writing
-	system.
-	(af_cjk_uniranges): Renamed to...
-	(af_hani_uniranges): This.
-	(af_cjk_script_class): Reduced and renamed to...
-	(af_hani_script_class): This.
-	* src/autofit/afcjk.h: Updated.
-
-	* src/autofit/afdummy.c (af_dummy_writing_system_class): New writing
-	system.
-	(af_dummy_script_class): Reduced and renamed to...
-	(af_dflt_script_class): This.
-	* src/autofit/afdummy.h: Updated.
-
-	* src/autofit/afindic.c (af_indic_writing_system_class): New writing
-	system.
-	(af_indic_uniranges): Renamed to...
-	(af_deva_uniranges): This.
-	(af_indic_script_class): Reduced and renamed to...
-	(af_deva_script_class): This.
-	* src/autofit/afcjk.h: Updated.
-
-	* src/autofit/aflatin.c (af_latin_writing_system_class): New writing
-	system.
-	(af_latin_uniranges): Renamed to...
-	(af_latn_uniranges): This.
-	(af_latin_script_class): Reduced and renamed to...
-	(af_latn_script_class): This.
-	* src/autofit/aflatin.h: Updated.
-
-	* src/autofit/aflatin2.c (af_latin2_writing_system_class): New
-	writing system.
-	(af_latin2_uniranges): Renamed to...
-	(af_ltn2_uniranges): This.
-	Synchronize ranges with `latin'.
-	(af_latin2_script_class): Reduced and renamed to...
-	(af_ltn2_script_class): This.
-	* src/autofit/aflatin2.h: Updated.
-
-2013-07-30  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Variable renaming.
-
-	* src/autofit/aftypes.h (AF_ScriptMetricsRec):
-	s/clazz/script_class/.
-	Update all users.
-
-2013-07-30  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	Ignore libpng-config under cross-building configuration,
-	because it will return the flags for the hosting environment.
-
-	* builds/unix/configure.raw: Ignore libpng-config when
-	`cross_compiling' == yes.
-
-2013-07-30  Behdad Esfahbod  <behdad@google.com>
-
-	Prevent division by zero by a transparent color.
-
-	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra):
-	Return 0 immediately, when alpha channel is zero.
-
-2013-07-25  Behdad Esfahbod  <behdad@google.com>
-
-	Add FT_FACE_FLAG_COLOR and FT_HAS_COLOR.
-
-	Also disambiguate Google's color bitmap tables.
-
-	* include/freetype/freetype.h (FT_FACE_FLAG_COLOR, FT_HAS_COLOR):
-	New macros.
-
-	* include/freetype/internal/tttypes.h (TT_SbitTableType): Add
-	TT_SBIT_TABLE_TYPE_CBLC.
-
-	* src/sfnt/sfobjs.c (sfnt_load_face): Handle FT_FACE_FLAG_COLOR.
-
-	* src/sfnt/ttsbit.c (tt_face_load_sbit,
-	tt_face_load_strike_metrics, tt_face_load_sbit_image): Handle
-	TT_SBIT_TABLE_TYPE_CBLC.
-
-2013-07-24  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
-
-	[sfnt] Fix for `make multi' target.
-
-	* src/sfnt/pngshim.c (Load_SBit_Png): Use FT_LOCAL_DEF().
-
-2013-07-20  Werner Lemberg  <wl@gnu.org>
-
-	* docs/INSTALL.GNU: Updated.
-
-2013-07-20  Behdad Esfahbod  <behdad@google.com>
-
-	[sfnt] Fix `sbix' table version handling.
-
-	* src/sfnt/ttsbit.c (tt_face_load_sbit) [TT_SBIT_TABLE_TYPE_SBIX]:
-	USHORT version numbers are to be considered as `minor'.
-
-2013-07-19  Werner Lemberg  <wl@gnu.org>
-
-	[autofit] Fix segment classification for blue zones.
-
-	The old code (essentially unchanged since the very beginning)
-	incorrectly handled this configuration
-
-	               x -o- x
-	                /   \
-	               /     \
-	              /       \
-	             o         o
-
-	as flat and this
-
-	                o               o
-	               /               /
-	             x|              x|
-	              |               |
-	              o---------------o
-
-	as round.  (`o' and `x' are on and off points, respectively).
-
-	This is a major change which should improve the rendering results
-	enormously for many TrueType fonts, especially in the range approx.
-	20-40ppem, fixing the appearance of many overshoots.
-
-	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Look at the
-	first and last points of the segment, not the points right before
-	and after.
-
-2013-07-19  Behdad Esfahbod  <behdad@google.com>
-
-	[sfnt] `sbix' fix-ups.
-
-	* src/sfnt/sfobjs.c (sfnt_load_face): Apple's `sbix' color bitmaps
-	are rendered scaled and then the `glyf' outline rendered on top.  We
-	don't support that yet, so just ignore the `glyf' outline and
-	advertise it as a bitmap-only font.
-
-	* src/sfnt/ttsbit.c (tt_face_load_strike_metrics)
-	[TT_SBIT_TABLE_TYPE_SBIX]: Return metrics in 26.6 units.
-	(tt_face_load_sbix_image): Typo.
-
-2013-07-18  Behdad Esfahbod  <behdad@google.com>
-
-	[sfnt] Add support for Apple's `sbix' color bitmap table.
-
-	* include/freetype/internal/tttypes.h (TT_SBit_MetricsRec): Widen
-	fields to FT_Short and FT_UShort, respectively.
-	(TT_SBitTableType): New enumeration.
-	(TT_FaceRec): Add `sbit_table_type' field.
-
-	* include/freetype/tttags.h (TTAG_sbix): New macro.
-
-	* src/sfnt/pngshim.c (Load_SBit_Png): Pass a more generic
-	FT_GlyphSlot argument instead FT_Bitmap.
-	Add flag to control map and metrics handling.
-	Update all users.
-
-	* src/sfnt/ttsbit.c: Include `ttmtx.h'.
-	(tt_face_load_eblc): Renamed to...
-	(tt_face_load_sbit): This.
-	Handlic `sbix' bitmaps.
-	(tt_face_free_eblc): Renamed to...
-	(tt_face_load_sbit): This.
-	Updated.
-	(tt_face_load_strike_metrics): Handle `sbix' bitmaps.
-	(tt_face_load_sbix_image): New function.
-	(tt_sbit_decoder_alloc_bitmap, tt_sbit_decoder_load_image,
-	tt_sbit_decoder_load_byte_aligned, tt_sbit_decoder_load_bit_aligned,
-	tt_sbit_decoder_load_compound, tt_sbit_decoder_load_png,
-	tt_sbit_decoder_load_image, tt_sbit_decoder_load_bitmap): Don't pass
-	and handle load flags.
-	(tt_sbit_decoder_load_bitmap) [!FT_CONFIG_OPTION_USE_PNG]: Better
-	handle formats 17-19.
-	Move color to grayscale conversion to...
-	(tt_face_load_sbit_image): Here.
-	Handle `sbix' bitmaps.
-
-	* src/sfnt/pngshim.h: Updated.
-	* src/sfnt/ttsbit.h: Updated.
-	* src/sfnt/sfdriver.c: Updated.
-
-2013-07-18  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Ignore invalid magic number in `head' or `bhed'.
-
-	Other font engines seem to ignore it also.  Problem reported by
-	Hin-Tak Leung <htl10@users.sourceforge.net>.
-
-	* src/sfnt/ttload.c (check_table_dir): Don't abort but warn only if
-	we have an invalid magic number.
-
-2013-07-16  Werner Lemberg  <wl@gnu.org>
-
-	[smooth] Fix segfault caused by previous commit.
-
-	* src/smooth/ftgrays.c (gray_set_cell): Always compute
-	`ras.invalid'.
-
-2013-07-16  David Turner  <digit@google.com>
-
-	[smooth] Improve performance.
-
-	Provide a work-around for an ARM-specific performance bug in GCC.
-	This speeds up the rasterizer by more than 5%.
-
-	Also slightly optimize `set_gray_cell' and `gray_record_cell' (which
-	also improves performance on other platforms by a tiny bit (<1%).
-
-	* src/smooth/ftgrays.c (FT_DIV_MOD): New macro.
-	Use it where appropriate.
-
-	(gray_record_cell, gray_set_cell, gray_move_to,
-	gray_convert_glyph_inner): Streamline condition handling.
-
-2013-07-16  David Turner  <digit@google.com>
-
-	[truetype] Add assembler code for TT_MulFix14 and TT_DotFix14.
-
-	This patch provides slightly optimized versions for ARM, x86, and
-	x86_64 CPUs if built with GCC.
-
-	Also remove some dead code.
-
-	* src/truetype/ttinterp.c (TT_MulFix14_arm, TT_MulFix14_long_long,
-	TT_DotFix14_long_long): New functions.
-
-2013-07-16  David Turner  <digit@google.com>
-
-	Optimize FT_MulFix for x86_64 GCC builds.
-
-	This patch provides an optimized `FT_MulFix' implementation for
-	x86_64 machines when FreeType is built with GCC, or compatible
-	compilers like Clang.
-
-	Example:
-	  bin/ftbench -p -t 5 -s 14 -f 0008 Arial.ttf
-
-	Before:
-
-	  Load                       4.863 us/op
-	  Load_Advances (Normal)     4.816 us/op
-	  Load_Advances (Fast)       0.028 us/op
-	  Render                     2.753 us/op
-	  Get_Glyph                  0.463 us/op
-	  Get_CBox                   0.077 us/op
-	  Get_Char_Index             0.023 us/op
-	  Iterate CMap              13.898 us/op
-	  New_Face                  12.368 us/op
-	  Embolden                   0.028 us/op
-	  Get_BBox                   0.302 us/op
-
-	After:
-
-	  Load                       4.617 us/op
-	  Load_Advances (Normal)     4.645 us/op
-	  Load_Advances (Fast)       0.027 us/op
-	  Render                     2.789 us/op
-	  Get_Glyph                  0.460 us/op
-	  Get_CBox                   0.077 us/op
-	  Get_Char_Index             0.024 us/op
-	  Iterate CMap              13.403 us/op
-	  New_Face                  12.278 us/op
-	  Embolden                   0.028 us/op
-	  Get_BBox                   0.301 us/op
-
-	* builds/unix/ftconfig.in, include/freetype/config/ftconfig.h
-	(FT_MulFix_x86_64): New function.
-
-2013-07-16  David Turner  <digit@google.com>
-
-	Speed up ARMv7 support.
-
-	When building for ARMv7 with thumb2 instructions, the optimized
-	`FT_MulFix_arm' assembly routine was not being used.
-
-	The reason for this is in the `ftconfig.h' header, namely:
-
-	- The assembly routine uses the `smull' instruction which is not
-	  available when generating Thumb-1 machine code.  It is available
-	  in Thumb-2 mode, though.
-
-	- The header was written a long time ago before Thumb-2 became
-	  widely popular (e.g. with Android).  So it simply doesn't use the
-	  assembly routine if the `__thumb__' built-in macro is defined.
-
-	- When compiling in Thumb-2 mode, the compiler will define both
-	  `__thumb__' and `__thumb2__'.
-
-	By checking for `(__thumb2__ || !__thumb__)', we ensure that the
-	assembly routine is only avoided when generating Thumb-1 code.
-
-	Given that this is performance-sensitive function, this improves
-	`ftbench' as follows on a Galaxy Nexus:
-
-	                           Before (us/op)   After (us/op)
-
-	  - loading Arial.ttf glyphs at 14 ppem [1]
-
-	      Load                   34.285          33.098
-
-	  - same operation with the light auto-hinter [2]
-
-	      Load                   31.317          29.590
-
-	  - same operation without hinting [3]
-
-	      Load                    6.143           5.376
-
-	  - loading Arial.ttf advances at 14 ppem [4]
-
-	      Load_Advances (normal) 34.216          33.016
-	      Load_Advances (fast)    0.176           0.176
-
-	  [1] ftbench -t 5 -p -s 14 -b a -f 0008 Arial.ttf
-	  [2] ftbench -t 5 -p -s 14 -b a -r 1 -f 0028 Arial.ttf
-	  [3] ftbench -t 5 -p -s 14 -b a -f 000a Arial.ttf
-	  [4] ftbench -t 5 -p -s 14 -b b -f 0008 Arial.ttf
-
-	* builds/unix/ftconfig.in, include/freetype/config/ftconfig.h
-	(FT_MULFIX_ASSEMBLER): Fix handling for ARMv7.
-
-2013-06-28  Werner Lemberg  <wl@gnu.org>
-
-	* docs/CHANGES: Updated.
-
-2013-06-27  Werner Lemberg  <wl@gnu.org>
-
-	* src/winfonts/winfnt.c (FNT_Load_Glyph): Fix bitmap width guard.
-
-2013-06-25  Werner Lemberg  <wl@gnu.org>
-
-	[cff] Add darkening limit to `darkening-parameters'.
-
-	* src/cff/cffdrivr.c (cff_property_set): Add check.
-
-2013-06-25  Werner Lemberg  <wl@gnu.org>
-
-	[cff] Add `darkening-parameters' property.
-
-	* include/freetype/ftcffdrv.h: Document it.
-
-	* src/cff/cffdrivr.c (cff_property_set, cff_property_get): Handle
-	`darkening-parameters' property.
-
-	* src/cff/cf2font.h (CF2_FontRec): Add `darkenParams' array.
-
-	* src/cff/cf2font.c (cf2_computeDarkening): Add `darkenParams'
-	argument and use it.
-	Update all callers.
-
-	* src/cff/cf2ft.c (cf2_decoder_parse_charstrings): Copy
-	`darken_params' values.
-
-	* src/cff/cffobjs.h (CFF_DriverRec): Add `darken_params' array.
-
-	* src/cff/cffobjs.c (cff_driver_init): Set default values for
-	`darken_params'.
-
-2013-06-25  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Code shuffling.
-
-	* src/tools/docmaker/tohtml.py (re_url): Move regexp...
-	* src/tools/docmaker/sources.py: ... to this file.
-
-2013-06-25  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Remove unused functions.
-
-	* src/tools/docmaker/content.py (DocMarkup.get_start,
-	DocBlock.get_markup_name): Removed.
-	* src/tools/docmaker/tohtml.py (html_quote0, dump_html_code,
-	HtmlFormatter.make_html_words): Removed.
-
-2013-06-25  Werner Lemberg  <wl@gnu.org>
-
-	* builds/freetype.mk (dll): Remove target.
-
-	Problem reported by Jörg Günnewig <joerg.guennewig@googlemail.com>.
-
-2013-06-25  Werner Lemberg  <wl@gnu.org>
-
-	[docmaker] Recognise URLs.
-
-	* src/tools/docmaker/tohtml.py (re_url): New regular expression.
-	(make_html_para): Use it.
-
-2013-06-19  Werner Lemberg  <wl@gnu.org>
-
-	* Version 2.5.0.1 released.
-	===========================
-
-
-	Tag sources with `VER-2-5-0-1'.
-
-	* include/freetype/config/ftoption.h: Undefine
-	CFF_CONFIG_OPTION_OLD_ENGINE.
-	* devel/ftoption.h: Define CFF_CONFIG_OPTION_OLD_ENGINE.
-
-2013-06-19  Werner Lemberg  <wl@gnu.org>
-
-	* builds/unix/install.mk (install): Don't create `cache' directory.
-
-	Found by Peter Breitenlohner <peb@mppmu.mpg.de>.
-
-2013-06-19  Werner Lemberg  <wl@gnu.org>
-
-	* Version 2.5.0 released.
-	=========================
-
-
-	Tag sources with `VER-2-5-0'.
-
-	* docs/VERSION.DLL: Update documentation and bump version number to
-	2.5.0.
-
-	* README, Jamfile (RefDoc),
-	builds/win32/vc2005/freetype.vcproj, builds/win32/vc2005/index.html,
-	builds/win32/vc2008/freetype.vcproj, builds/win32/vc2008/index.html,
-	builds/win32/vc2010/freetype.vcxproj, builds/win32/vc2010/index.html,
-	builds/win32/visualc/freetype.dsp,
-	builds/win32/visualc/freetype.vcproj,
-	builds/win32/visualc/index.html, builds/win32/visualce/freetype.dsp,
-	builds/win32/visualce/freetype.vcproj,
-	builds/win32/visualce/index.html,
-	builds/wince/vc2005-ce/freetype.vcproj,
-	builds/wince/vc2005-ce/index.html,
-	builds/wince/vc2008-ce/freetype.vcproj,
-	builds/wince/vc2008-ce/index.html: s/2.4.12/2.5.0/, s/2412/250/.
-
-	* include/freetype/freetype.h (FREETYPE_MINOR): Set to 5.
-	(FREETYPE_PATCH): Set to 0.
-
-	* builds/unix/configure.raw (version_info): Set to 16:2:10.
-
-	* src/base/ftobjs.c (FT_Open_Face): Pacify compiler.
-	* src/truetype/ttinterp.c (Ins_MSIRP, Ins_MIRP): Ditto.
-
-2013-06-18  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #39269.
-
-	* src/base/ftgloadr.c (FT_GlyphLoader_CheckPoints): Free memory in
-	case of reacollocation failures.
-
-2013-06-18  Andrew Church  <achurch+savannah@achurch.org>
-
-	Fix Savannah bug #39266.
-
-	If memory allocations fail at certain points while opening a font,
-	FreeType can either crash due to a NULL dereference or leak memory.
-
-	* include/freetype/internal/ftobjs.c (FT_Face_InternalRec,
-	FT_LibraryRec): Make `refcount' a signed integer.  If, for example,
-	FT_Open_Face() fails in a memory allocation before the face's
-	reference count is set to 1, a subsequent `FT_Done_Library' call
-	would otherwise loop over `FT_Done_Face' 2^32 times before freeing
-	the face.
-
-	* src/base/ftobjs.c (open_face): Initialize `stream' and friends
-	earlier.
-	(FT_Open_Face) <Fail>: Behave correctly if `node' is NULL.
-	(FT_Destroy_Module) <Fail>: Check that `renderer_clazz' is valid.
-
-2013-06-14  Werner Lemberg  <wl@gnu.org>
-
-	* src/smooth/ftgrays.c One final pragma to silence 64-bit MSVC.
-
-2013-06-06  Dave Arnold  <darnold@adobe.com>
-	    Werner Lemberg  <wl@gnu.org>
-
-	[cff] Add code to Adobe's engine to handle ppem > 2000.
-
-	* src/cff/cffgload.c (cff_slot_load): If we get
-	FT_Err_Glyph_Too_Big, retry unhinted and scale up later on.
-
-2013-06-12  Werner Lemberg  <wl@gnu.org>
-
-	Another try on pragmas.
-
-	* include/freetype/internal/ftdebug.h: Move pragmas to...
-	* include/freetype/internal/internal.h: ... this file since it gets
-	included by all source files.
-	* include/freetype/internal/ftserv.h: Remove pragma which has no
-	effect.
-
-2013-06-12  Werner Lemberg  <wl@gnu.org>
-
-	* include/freetype/internal/ftdebug.h: Disable MSVC warning C4127.
-
-	This partially undoes commit 3f6e0e0c.
-
-2013-06-12  Werner Lemberg  <wl@gnu.org>
-
-	More compiler warning fixes.
-
-	*/*: Use cast to `FT_Bool' (or `Bool') where appropriate.
-
-2013-06-10  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Improve handling of broken sbit advance widths.
-
-	* src/truetype/ttgload.c (TT_Load_Glyph): Use the glyph's (scaled)
-	`linearHoriAdvance' if the sbit's `horiAdvance' value is zero.
-
-	Cf. font `Fixedsys Excelsior' v3.01 (FSEX300.ttf), glyph A, 16ppem.
-
-2013-06-10  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Improve embedded bitmap tracing.
-
-	* src/base/ftobjs.c (FT_Request_Size): Move trace message regarding
-	bitmap strike match to...
-	(FT_Match_Size): This function.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_metrics,
-	tt_sbit_decoder_load_byte_aligned, tt_sbit_decoder_load_bit_aligned,
-	tt_sbit_decoder_load_compound, tt_sbit_decoder_load_png,
-	tt_sbit_decoder_load_image): Decorate with tracing messages.
-
-2013-06-10  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #39160.
-
-	* src/truetype/ttinterp.c (Ins_SDPVTL): Set projection vector too
-	for the degenerate case.
-
-2013-06-09  David Turner  <digit@google.com>
-
-	* src/cache/ftcmanag.c (FTC_Manager_Reset): Add missing cache flush.
-
-	This code, present since eight(!) years in the unused `CACHE'
-	branch, has been forgotten to apply to the master branch.  It's
-	really amazing that noone has ever complained since
-	`FTC_Manager_Reset' is pretty useless without flushing the cache.
-
-2013-06-07  Werner Lemberg  <wl@gnu.org>
-
-	Add and improve pragmas for MSVC compiler.
-
-	* include/freetype/internal/ftdebug.h: Remove pragmas.
-	* include/freetype/internal/ftserv.h: Use push and pop for pragmas.
-	* include/freetype/internal/ftvalid.h: Handle warning C4324.
-	* src/base/ftobjs.c: Use push and pop for pragmas.
-	* src/gzip/ftgzip.c: Handle warning C4244.
-
-2013-06-07  Werner Lemberg  <wl@gnu.org>
-
-	[cff] s/cf2_getGlyphWidth/cf2_getGlyphOutline/.
-
-	* src/cff/cf2font.c, src/cff/cf2font.h, src/cff/cf2ft.c: Do it.
-
-2013-06-06  Dave Arnold  <darnold@adobe.com>
-
-	[cff] Add early exit feature for width-only calls.
-
-	This is for `FT_Get_Advance'.
-
-	There are 7 places where the spec says the width can be defined:
-
-	  hstem/hstemhm
-	  vstem/vstemhm
-	  cntrmask/hintmask
-	  hmoveto
-	  vmoveto
-	  rmoveto
-	  endchar
-
-	* src/cff/cf2intrp.c (cf2_doStems): Exit early for width-only calls,
-	if possible.
-
-	(cf2_interpT2CharString) <cf2_cmdHSTEM>, <cf2_cmdVSTEM>,
-	<cf2_cmdVMOVETO>, <cf2_cmdENDCHAR>, <cf2_cmdHINTMASK>,
-	<cf2_cmdRMOVETO>, <cf2_cmdHMOVETO>: Exit early for width-only calls.
-
-2013-06-06  Werner Lemberg  <wl@gnu.org>
-
-	Next round of compiler fixes.
-
-	* builds/win32/ftdebug.c, builds/wince/ftdebug.c (ft_debug_init):
-	Add proper cast.
-
-	* include/freetype/internal/ftserv.h (FT_SERVICE_UNAVAILABLE): Fix
-	cast.
-	* include/freetype/internal/ftstream.h: Decorate stream and frame
-	macros with `FT_Long' and `FT_ULong' as appropriate.
-
-	* src/base/ftrfork.c (raccess_guess_darwin_hfsplus,
-	raccess_guess_darwin_newvfs): Use cast.
-
-	* src/bdf/bdflib.c (_bdf_set_default_spacing): Use cast.
-
-	* src/cache/ftcmanag.c (FTC_Manager_Check): Fix cast.
-	* src/cache/ftcmanag.h (FTC_ManagerRec): Ditto.
-
-	* src/cff/cf2arrst.c (cf2_arrstack_setNum_Elements): Use cast.
-	* src/cff/cf2ft.c (cf2_freeSeacComponent): Ditto.
-	* src/cff/cffobjs.c (remove_subset_prefix, remove_style): Ditto.
-
-	* src/cid/cidparse.c (cid_parser_new): Use cast.
-
-	* src/pcf/pcfdrivr.c (PCF_Glyph_Load): Use cast.
-
-	* src/psaux/psobjs.c (reallocate_t1_table): Fix argument type.
-
-	* src/raster/ftraster.c (ft_black_reset): Use cast.
-
-	* src/truetype/ttgxvar.c (FT_Stream_FTell): Use cast.
-	(ALL_POINTS): Fix cast.
-
-	* src/type1/t1driver.c (t1_ps_get_font_value): Add casts.
-	* src/type1/t1parse.c (T1_Get_Private_Dict): Add cast.
-
-2013-06-05  Dave Arnold  <darnold@adobe.com>
-
-	Fix more MSVC Win32 compiler warnings.
-
-	* src/base/ftobjs.c: Fix typo in MS pragma.
-
-	* src/base/bdflib.c (_bdf_set_default_spacing, _bdf_add_property):
-	`lineno' is only used in debug mode.
-
-	* src/cff/cf2ft.c (cf2_builder_moveTo): `params' is only used in
-	debug mode.
-
-2013-06-05  Werner Lemberg  <wl@gnu.org>
-
-	Fix compiler warnings.
-
-	* include/freetype/internal/ftmemory.h: Decorate memory allocation
-	macros with `FT_Long' where appropriate.
-	Remove duplicate of FT_MEM_QRENEW_ARRAY definition.
-
-	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra): Use
-	cast.
-
-	* src/base/ftobjs.c: Add warning disabling pragma for MSVC while
-	including `md5.c'.
-
-	* src/cff/cf2intrp.c (cf2_interpT2CharString) <cf2_cmdESC>: Add
-	cast.
-
-	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_compound): Fix casts.
-	(tt_sbit_decoder_load_bitmap): Beautification.
-
-	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Initialize
-	variables (earlier).
-
-	* src/truetype/ttgload.c (TT_Process_Simple_Glyph): Pacify compiler.
-
-	* src/truetype/ttgxvar.c (TT_Get_MM_Var): Use unsigned constants
-	where appropriate.
-
-	* src/type1/t1load.c (T1_Get_MM_Var): Ditto.
-
-2013-06-04  Werner Lemberg  <wl@gnu.org>
-
-	* src/cff/cf2font.c (cf2_getGlyphWidth): Initialize `advWidth'.
-
-	Problem reported by Ingmar Sittl <ingmar.sittl@elektrobit.com>.
-
-2013-06-04  Werner Lemberg  <wl@gnu.org>
-
-	Apply fixes for cppcheck nitpicks.
-
-	  http://cppcheck.sourceforge.net/
-
-	The call was (from the top-level of the FreeType tree):
-
-	  cppcheck --force \
-	           --enable=all \
-	           -I include \
-	           -I include/freetype/ \
-	           -I include/freetype/config/ \
-	           -I include/freetype/internal/ \
-	           . &> cppcheck.log
-
-	Note that the current version heavily chokes on FreeType, delivering
-	many wrong results.  I will report those issues to the cppcheck team
-	so that a newer version gives improved results hopefully.
-
-	*/* Improve variable scopes.
-	*/* Remove redundant initializations which get overwritten.
-
-	* src/base/ftmac.c, builds/mac/ftmac.c (count_faces_scalable):
-	Remove unused variable.
-
-	* src/base/ftdbgmem.c (ft_mem_table_destroy): `table' can't be zero.
-
-	* src/gxvalid/gxvkern.c (gxv_kern_subtable_fmt1_entry_validate):
-	Remove functionless code.
-
-	* src/tools/ftrandom.c (main): Fix memory leak.
-
-2013-06-03  Werner Lemberg  <wl@gnu.org>
-
-	Add CFF_CONFIG_OPTION_OLD_ENGINE configuration option.
-
-	This controls whether the old FreeType CFF engine gets compiled into
-	FreeType.  It is now disabled by default.
-
-	* devel/ftoption.h, include/freetype/config/ftoption.h
-	(CFF_CONFIG_OPTION_OLD_ENGINE): New macro.
-
-	* src/cff/cffdrivr.c (cff_property_set), src/cff/cffgload.c
-	(CFF_Operator, cff_argument_counts, cff_builder_add_point,
-	cff_operator_seac, cff_decoder_parse_charstrings, cff_slot_load),
-	src/cff/cffgload.h, src/cff/cffobjs.c (cff_driver_init): Use
-	CFF_CONFIG_OPTION_OLD_ENGINE to guard the affected code.
-
-	* docs/CHANGES: Updated.
-
-2013-06-02  Werner Lemberg  <wl@gnu.org>
-
-	Fix PNG library handling.
-
-	* builds/unix/configure.raw: Don't use LIBPNG_LIBS but
-	LIBPNG_LDFLAGS.
-
-2013-05-23  Behdad Esfahbod  <behdad@google.com>
-
-	Add support for color embedded bitmaps (eg. color emoji).
-
-	A new load flag, FT_LOAD_COLOR, makes FreeType load color
-	embedded-bitmaps, following this draft specification
-
-	  https://color-emoji.googlecode.com/git/specification/v1.html
-
-	which defines two new SFNT tables, `CBDT' and `CBLC' (named and
-	modeled after `EBDT' and `EBLC', respectively).  The color bitmaps
-	are stored in the new FT_PIXEL_MODE_BGRA format to represent BGRA
-	pre-multiplied sRGB images.  If PNG support is available, PNG color
-	images as defined in the same proposed specification are supported
-	also.
-
-	Note that color bitmaps are converted to grayscale if client didn't
-	ask for color.
-
-	* builds/unix/configure.raw: Search for libpng.
-	Add `--without-png' option.
-
-	* devel/ftoption.h, include/freetype/config/ftoption.h
-	(FT_CONFIG_OPTION_USE_PNG): New macro.
-
-	* include/freetype/freetype.h (FT_LOAD_COLOR): New load flag.
-
-	* include/freetype/ftimage.h (FT_Pixel_Mode): Add
-	`FT_PIXEL_MODE_BGRA'.
-
-	* include/freetype/tttags.h (TTAG_CBDT, TTAG_CBLC): New tags.
-
-	* src/base/ftbitmap.c (FT_Bitmap_Embolden): Updated.
-	(ft_gray_for_premultiplied_srgb_bgra): New function.
-	(FT_Bitmap_Convert): Handle FT_PIXEL_MODE_BGRA.
-
-	* src/sfnt/pngshim.c, src/sfnt/pngshim.h: New files.
-
-	* src/sfnt/sfnt.c: Include `pngshim.c'.
-
-	* src/sfnt/ttsbit.c: Include FT_BITMAP_H and `pngshim.h'
-	(tt_face_load_eblc): Load `CBLC'.
-	(tt_sbit_decoder_init): Load `CBDT'.
-	(tt_sbit_decoder_alloc_bitmap): Pass load flags to select between
-	color and grayscale bitmaps.
-	Set `num_grays'.  This is used by `ftview' to choose the blending
-	algorithm.
-	(tt_sbit_decoder_load_byte_aligned,
-	tt_sbit_decoder_load_bit_aligned, tt_sbit_decoder_load_compound,
-	tt_sbit_decoder_load_image): Pass load flag.
-	s/write/pwrite/.
-	Don't call `tt_sbit_decoder_alloc_bitmap'.
-	Updated.
-	(tt_sbit_decoder_load_png) [FT_CONFIG_OPTION_USE_PNG]: New function.
-	(tt_sbit_decoder_load_bitmap): Pass load flag.
-	Handle new glyph formats 17, 18, and 19.
-	Call `tt_sbit_decoder_alloc_bitmap'.
-	Flatten color bitmaps if necessary.
-	(tt_face_load_sbit_image): Updated.
-
-	* src/sfnt/rules.mk (SFNT_DRV_SRC): Add `pngshim.c'.
-
-	* docs/CHANGES: Updated.
-
-2013-05-24  Guenter  <info@gknw.net>
-
-	Apply Savannah patch #8055.
-
-	Make `apinames' create an import file for NetWare.
-
-	* src/tools/apinames.c (PROGRAM_VERSION): Set to 0.2.
-	(OutputFormat): Add `OUTPUT_NETWARE_IMP'.
-	(names_dump): Handle it.
-	(usage): Updated.
-	(main): Handle new command line flag `-wN'.
-
-2013-05-23  Behdad Esfahbod  <behdad@behdad.org>
-
-	Compilation fix.
-
-	* src/truetype/ttinterp.c (TT_RunIns)
-	[!TT_CONFIG_OPTION_SUBPIXEL_HINTING]: Make it work.
-
-2013-05-22  Infinality  <infinality@infinality.net>
-
-	[truetype] Formatting and an additional subpixel tweak.
-
-	* src/truetype/ttinterp.c (Ins_SHPIX): Formatting fix.
-	* src/truetype/ttsubpix.c (SKIP_NONPIXEL_Y_MOVES_Rules):
-	Revert previous modification for Verdana clones.
-
-2013-05-22  Infinality  <infinality@infinality.net>
-
-	[truetype] Adjust subpixel zp2 moves and tweak rules.
-
-	These modifications fix thin diagonal stems in some legacy fonts.
-
-	* src/truetype/ttinterp.c (Direct_Move_X): Remove unused macro.
-	(Move_Zp2_Point): Don't always disable x moves for subpixel rendering.
-	(Ins_SHP): Disable x moves here for subpixel rendering.
-	(Ins_SHPIX): Only disable x moves in compatibility mode.
-	Split out zp2 move reversals and reorder conditional respectively.
-
-	* src/truetype/ttsubpix.c (SKIP_NONPIXEL_Y_MOVES_Rules): Fix oversight.
-	Only adjust Verdana clones for 17 ppem.
-	(SKIP_NONPIXEL_Y_MOVES_Rules_Exceptions): Add Courier New.
-	(ALWAYS_SKIP_DELTAP_Rules): Found additional cases for Arial `s'.
-
-2013-05-20  Infinality  <infinality@infinality.net>
-
-	[truetype] Simplify and improve subpixel function detection.
-
-	Some small enhancements have allowed the removal of many macros and
-	the simplification of existing rules in `ttsubpix.c'.
-
-	* src/truetype/ttsubpix.h (SPH_TWEAK_ALLOW_X_DMOVEX,
-	SPH_TWEAK_ALLOW_X_MOVE_ZP2,
-	SPH_TWEAK_DELTAP_SKIP_EXAGGERATED_VALUES,
-	SPH_TWEAK_SKIP_INLINE_DELTAS, SPH_TWEAK_MIRP_CVT_ZERO): Removed.
-	(SPH_TWEAK_SKIP_NONPIXEL_Y_MOVES_DELTAP): New rule macro.
-
-	* src/truetype/ttsubpix.c: Updated affected rules.
-
-	* src/truetype/ttinterp.c (Direct_Move_X): Updated.
-	(INS_FDEF): Add additional function detection.
-	(INS_ENDF): Set runtime flag.
-	(Ins_CALL): Skip the call under certain conditions.
-	Remove bad code.
-	(Ins_LOOPCALL): Skip the call under certain conditions.
-	Remove bad code.
-	(Move_Zp2_Point): Updated.
-	(Ins_SHPIX): Updated.
-	Skip the move under some situations.
-	(Ins_MIAP): Improve conditions.
-	(Ins_MIRP): Updated.
-	(Ins_DELTAP): Skip move under certain conditions.
-	Simplify conditions.
-	(TT_RunIns): Updated.
-	Add code to handle new function detection.
-	Trace messages.
-
-2013-05-17  Werner Lemberg  <wl@gnu.org>
-
-	Update more FT_Err_XXX macros using FT_ERR and FT_THROW;
-
-	* builds/amiga/src/base/ftsystem.c, builds/mac/ftmac.c,
-	builds/unix/ftsystem.c, builds/vms/ftsystem.c: Do it.
-
-2013-05-15  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Add `interpreter-version' property.
-
-	This makes the option TT_CONFIG_OPTION_SUBPIXEL_HINTING controllable
-	at runtime.
-
-	* include/freetype/ftttdrv.h: New file.
-
-	* include/freetype/config/ftheader.h (FT_TRUETYPE_DRIVER_H): New
-	macro.
-
-	* src/truetype/ttdriver.c: Include FT_TRUETYPE_DRIVER_H.
-	(tt_property_set, tt_property_get): Fill templates.
-
-	* src/truetype/ttobjs.h (TT_DriverRec): Add `interpreter_version'
-	member.
-	Remove unused `extension_component' member.
-
-	* src/truetype/ttgload.c: Include FT_TRUETYPE_DRIVER_H.
-	(tt_get_metrics, TT_Hint_Glyph, TT_Process_Simple_Glyph,
-	compute_glyph_metrics, tt_loader_init): Use `interpreter_version'.
-
-	* src/truetype/ttinterp.c: Include FT_TRUETYPE_DRIVER_H.
-	(SUBPIXEL_HINTING): New macro to check `interpreter_version' flag.
-	Update all affected functions to use it.
-	Use TT_INTERPRETER_VERSION_XXX where appropriate.
-
-	* src/truetype/ttobjs.c: Include FT_TRUETYPE_DRIVER_H.
-	(tt_driver_init): Initialize `interpreter_version'.
-
-	* src/truetype/ttsubpix.c: Include FT_TRUETYPE_DRIVER_H.
-	Use TT_INTERPRETER_VERSION_XXX where appropriate.
-
-2013-05-13  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Avoid empty source file.
-
-	* src/truetype/ttsubpix.c [!TT_CONFIG_OPTION_SUBPIXEL_HINTING]:
-	Provide dummy typedef.
-
-2013-05-13  Werner Lemberg  <wl@gnu.org>
-
-	* src/cff/cf2font.c (cf2_getGlyphWidth): Fix uninitialized variable.
-
-	Fix suggested by Vaibhav Nagarnaik <vnagarnaik@gmail.com>.
-
-2013-05-13  Brian Nixon  <bnixon@yahoo.com>
-
-	Fix Savannah bug #38970.
-
-	* src/base/ftdebug.c, builds/win32/ftdebug.c,
-	builds/wince/ftdebug.c, builds/amiga/src/base/ftdebug.c
-	(ft_debug_init): Don't read past the environment variable FT2_DEBUG.
-
-2013-05-12  Werner Lemberg  <wl@gnu.org>
-
-	[truetype] Add framework for TrueType properties.
-
-	* src/truetype/ttdrivr.c: Include FT_SERVICE_PROPERTIES_H.
-	(tt_property_set, tt_property_get): New functions, still empty.
-	Define `tt_service_properties' service.
-	Update `tt_services'.
-
-	* src/truetype/ttpic.h: Include FT_SERVICE_PROPERTIES_H.
-	(TT_SERVICE_PROPERTIES_GET): New macro.
-	(TTModulePIC): Add `tt_service_properties'.
-
-2013-05-12  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #38967.
-
-	* src/base/ftcalc.c (FT_DivFix) [FT_LONG64]: Fix cast.
-
-2013-05-12  Werner Lemberg  <wl@gnu.org>
-
-	Introduce unsigned 64bit type (if available).
-
-	* include/freetype/config/ftconfig.h: Define FT_UINT64 if available.
-	[FT_LONG64]: Provide FT_UInt64.
-
-	* builds/unix/ftconfig.in: Synchronized.
-
-2013-05-12  Werner Lemberg  <wl@gnu.org>
-
-	Fix Savannah bug #38968.
-
-	* include/freetype/ftmodapi.h: Add `FT_EXPORT' to
-	FT_Property_{Set,Get}.
-	* src/base/ftobjs.c: Add `FT_EXPORT_DEF' to
-	FT_Property_{Set,Get}.
-
-2013-05-10  Werner Lemberg  <wl@gnu.org>
-
-	[sfnt] Clean up bitmap code.
-
-	* src/sfnt/ttsbit.c: Deleted.
-	* src/sfnt/ttsbit0.c: Renamed to `ttsbit.c'.
-	* rules.mk (SFNT_DRV_H): Updated.
-
-2013-05-10  Werner Lemberg  <wl@gnu.org>
-
-	*/* [FT_CONFIG_OPTION_OLD_INTERNALS]: Remove macro and guarded code.
 
 ----------------------------------------------------------------------------
 
-Copyright 2013-2015 by
+Copyright 2015 by
 David Turner, Robert Wilhelm, and Werner Lemberg.
 
 This file is part of the FreeType project, and may only be used, modified,
diff --git a/ChangeLog.25 b/ChangeLog.25
new file mode 100644
index 0000000..75e8409
--- /dev/null
+++ b/ChangeLog.25
@@ -0,0 +1,5161 @@
+2014-12-30  Werner Lemberg  <wl@gnu.org>
+
+	* Version 2.5.5 released.
+	=========================
+
+
+	Tag sources with `VER-2-5-5'.
+
+	* docs/VERSION.DLL: Update documentation and bump version number to
+	2.5.5.
+
+	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
+	builds/windows/vc2005/index.html,
+	builds/windows/vc2008/freetype.vcproj,
+	builds/windows/vc2008/index.html,
+	builds/windows/vc2010/freetype.vcxproj,
+	builds/windows/vc2010/index.html,
+	builds/windows/visualc/freetype.dsp,
+	builds/windows/visualc/freetype.vcproj,
+	builds/windows/visualc/index.html,
+	builds/windows/visualce/freetype.dsp,
+	builds/windows/visualce/freetype.vcproj,
+	builds/windows/visualce/index.html,
+	builds/wince/vc2005-ce/freetype.vcproj,
+	builds/wince/vc2005-ce/index.html,
+	builds/wince/vc2008-ce/freetype.vcproj,
+	builds/wince/vc2008-ce/index.html: s/2.5.4/2.5.5/, s/254/255/.
+
+	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 5.
+
+	* builds/unix/configure.raw (version_info): Set to 17:4:11.
+	* CMakeLists.txt (VERSION_PATCH): Set to 5.
+	* docs/CHANGES: Updated.
+
+	* builds/toplevel.mk (dist): Fix typos.
+
+2014-12-24  Alexei Podtelezhnikov <apodtele@gmail.com>
+
+	[base] Formatting and nanooptimizations.
+
+	* src/base/ftcalc.c,
+	* src/base/fttrigon.c: Revise sign restoration.
+
+2014-12-13  Werner Lemberg  <wl@gnu.org>
+
+	* src/pcf/pcfread.c (pcf_read_TOC): Improve fix from 2014-12-08.
+
+2014-12-11  Werner Lemberg  <wl@gnu.org>
+
+	* builds/toplevel.mk (dist): Use older POSIX standard for `tar'.
+
+	Apparently, BSD tar isn't capable yet of handling POSIX-1.2001
+	(contrary to GNU tar), so force the POSIX-1.1988 format.
+
+	Problem reported by Stephen Fisher <sfisher@SDF.ORG>.
+
+2014-12-11  Werner Lemberg  <wl@gnu.org>
+
+	* src/type42/t42parse.c (t42_parse_sfnts): Reject invalid TTF size.
+
+2014-12-11  Werner Lemberg  <wl@gnu.org>
+
+	* src/base/ftobjs.c (FT_Get_Glyph_Name): Fix off-by-one check.
+
+	Problem reported by Dennis Felsing <dennis@felsin9.de>.
+
+2014-12-11  Werner Lemberg  <wl@gnu.org>
+
+	* src/type42/t42parse.c (t42_parse_sfnts): Check `string_size'.
+
+	Problem reported by Dennis Felsing <dennis@felsin9.de>.
+
+2014-12-09  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	[gxvalid] Fix a naming convention conflicting with ftvalid.
+
+	See previous changeset for otvalid.
+
+	* src/gxvalid/{gxvcommn.h, gxvmort.h, gxvmorx.h}: Replace
+	`valid' by `gxvalid'.
+	* src/gxvalid/{gxvbsln.c, gxvcommn.c, gxvfeat.c, gxvjust.c,
+	gxvkern.c, gxvlcar.c, gxvmort.c, gxvmort0.c, gxvmort1.c,
+	gxvmort2.c, gxvmort4.c, gxvmort5.c, gxvmorx.c, gxvmorx0.c,
+	gxvmorx1.c, gxvmorx2.c, gxvmorx4.c, gxvmorx5.c, gxvopbd.c,
+	gxvprop.c, gxvtrak.c}: Replace `valid' by `gxvalid' if
+	it is typed as GXV_Validator.
+
+2014-12-09  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	[otvalid] Fix a naming convention conflicting with ftvalid.
+
+	Some prototypes in ftvalid.h use `valid' for the variables
+	typed as FT_Validator.  Their implementations in src/base/
+	ftobjs.c and utilizations in src/sfnt/ttcmap.c do similar.
+
+	Some macros in otvcommn.h assume the exist of the variable
+	`valid' typed as OTV_Validator in the caller.
+
+	Mixing these two conventions cause invalid pointer conversion
+	and unexpected SEGV in longjmp.  To prevent it, all variables
+	typed as OTV_Validator are renamed to `otvalid'.
+
+	* src/otvalid/otvcommn.h: Replace `valid' by `otvalid'.
+	* src/otvalid/{otvcommn.c, otvbase.c, otvgdef.c, otvgpos.c,
+	otvgsub.c, otvjstf.c, otvmath.c}: Replace `valid' by `otvalid'
+	if it is typed as OTV_Validator.
+
+2014-12-09  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	[ftvalid] Introduce FT_THROW() in FT_INVALID_XXX macros.
+
+	Original patch is designed by Werner Lemberg.  Extra part
+	for otvalid and gxvalid are added by suzuki toshiya, see
+	discussion:
+	http://lists.nongnu.org/archive/html/freetype-devel/2014-12/msg00002.html
+	http://lists.nongnu.org/archive/html/freetype-devel/2014-12/msg00007.html
+
+	* include/internal/ftvalid.h: Introduce FT_THROW() in FT_INVALID_().
+	* src/gxvalid/gxvcommn.h: Ditto.
+	* src/otvalid/otvcommn.h: Ditto.
+
+2014-12-08  Werner Lemberg  <wl@gnu.org>
+
+	[pcf] Fix Savannah bug #43774.
+
+	Work around `features' of X11's `pcfWriteFont' and `pcfReadFont'
+	functions.  Since the PCF format doesn't have an official
+	specification, we have to exactly follow these functions' behaviour.
+
+	The problem was unveiled with a patch from 2014-11-06, fixing issue
+	#43547.
+
+	* src/pcf/pcfread.c (pcf_read_TOC): Don't check table size for last
+	element.  Instead, assign real size.
+
+2014-12-07  Werner Lemberg  <wl@gnu.org>
+
+	Work around a bug in Borland's C++ compiler.
+
+	See
+
+	  http://qc.embarcadero.com/wc/qcmain.aspx?d=118998
+
+	for Borland's bug tracker entry.
+
+	Reported by Yuliana Zigangirova <zigangirova@inbox.ru>,
+	http://lists.gnu.org/archive/html/freetype-devel/2014-04/msg00001.html.
+
+	* include/internal/ftvalid.h (FT_ValidatorRec), src/smooth/ftgrays.c
+	(gray_TWorker_): Move `ft_jmp_buf' field to be the first element.
+
+2014-12-07  Werner Lemberg  <wl@gnu.org>
+
+	*/*: Decorate hex constants with `U' and `L' where appropriate.
+
+2014-12-07  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Prevent memory leak for buggy fonts.
+
+	* src/truetype/ttobjs.c (tt_size_done): Unconditionally call
+	`tt_size_done_bytecode'.
+
+2014-12-06  Werner Lemberg  <wl@gnu.org>
+
+	* Version 2.5.4 released.
+	=========================
+
+
+	Tag sources with `VER-2-5-4'.
+
+	* docs/VERSION.DLL: Update documentation and bump version number to
+	2.5.4.
+
+	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
+	builds/windows/vc2005/index.html,
+	builds/windows/vc2008/freetype.vcproj,
+	builds/windows/vc2008/index.html,
+	builds/windows/vc2010/freetype.vcxproj,
+	builds/windows/vc2010/index.html,
+	builds/windows/visualc/freetype.dsp,
+	builds/windows/visualc/freetype.vcproj,
+	builds/windows/visualc/index.html,
+	builds/windows/visualce/freetype.dsp,
+	builds/windows/visualce/freetype.vcproj,
+	builds/windows/visualce/index.html,
+	builds/wince/vc2005-ce/freetype.vcproj,
+	builds/wince/vc2005-ce/index.html,
+	builds/wince/vc2008-ce/freetype.vcproj,
+	builds/wince/vc2008-ce/index.html: s/2.5.3/2.5.4/, s/253/254/.
+
+	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 4.
+
+	* builds/unix/configure.raw (version_info): Set to 17:3:11.
+	* CMakeLists.txt (VERSION_PATCH): Set to 4.
+	* docs/CHANGES: Updated.
+
+2014-12-04  Werner Lemberg  <wl@gnu.org>
+
+	docs/CHANGES: Updated, formatted.
+
+2014-12-04  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Modify an FT_ASSERT.
+
+	* src/cff/cf2hints.c (cf2_hintmap_map): After the fix for Savannah
+	bug #43661, the test font `...aspartam.otf' still triggers an
+	FT_ASSERT.  Since hintmap still works with count==0, ...
+	(cf2_glyphpath_lineTo, cf2_glyphpath_curveTo): ... add that term to
+	suppress the assert.
+
+2014-12-04  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Fix Savannah bug #43661.
+
+	* src/cff/cf2intrp.c (cf2_interpT2CharString) <cf2_cmdHSTEM,
+	cf2_cmdVSTEM, cf2_cmdHINTMASK>: Don't append to stem arrays after
+	hintmask is constructed.
+
+	* src/cff/cf2hints.c (cf2_hintmap_build): Add defensive code to
+	avoid reading past end of hintmask.
+
+2014-12-03  Werner Lemberg  <wl@gnu.org>
+
+	docs/CHANGES: Updated.
+
+2014-12-03  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Better fix for conversion specifiers in debug messages.
+
+	Using `%ld' for pointer differences causes warnings on 32bit
+	platforms.  The correct type would be (the relatively new) `%td',
+	however, this is missing on some important platforms.
+
+	This patch improves the change from 2014-11-28.
+
+	* src/autofit/afhints.c (AF_INDEX_NUM): Use `int' typecast.  Our
+	pointer differences are always sufficiently small.
+	(af_glyph_hints_dump_points, af_glyph_hints_dump_segments,
+	af_glyph_hints_dump_edge): Revert to `%d' and use `AF_INDEX_NUM'.
+
+2014-12-03  Werner Lemberg  <wl@gnu.org>
+
+	FT_Sfnt_Tag: s/ft_sfnt_xxx/FT_SFNT_XXX/ for orthogonality.
+
+	All public FreeType enumeration and flag values are uppercase...
+
+	* include/tttables.h (FT_Sfnt_Tag): Implement it.  For backwards
+	compatilibity, retain the old values as macros.
+
+	* src/base/ftfstype.c (FT_Get_FSType_Flags), src/sfnt/sfdriver.c
+	(get_sfnt_table): Updated.
+
+2014-12-02  Werner Lemberg  <wl@gnu.org>
+
+	* include/*: Improve structure of documentation.
+
+	. Add and update many `<Order>' tags.
+	. Apply various documentation fixes.
+	. Remove details to deprecated (or never implemented) data.
+
+2014-12-02  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Always handle `<Order>' section elements.
+
+	Previously, those elements were handled only for sections present in
+	a `<Sections>' chapter element.
+
+	* src/tools/docmaker/content.py (ContentProcessor::finish):
+	Implement it.
+
+2014-12-02  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Properly handle empty rows in Synopsis.
+
+	* src/tools/docmaker/tohtml.py (HtmlFormatter::section_enter): Emit
+	`&nbsp;' for empty fields.
+
+2014-12-02  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Thinko.
+
+	* src/tools/docmaker/content.py (DocBlock::get_markup_words_all):
+	Emit `/empty/' string for first element also.
+
+2014-12-02  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Honour empty lines in `<Order>' section element.
+
+	This greatly improves the readability of the `Synopsis' links.
+
+	* src/tools/docmaker/content.py (DocBlock::get_markup_words_all):
+	Insert string `/empty/' between items.
+
+	* src/tools/docmaker/formatter.py (Formatter::section_dump): Make it
+	robust against nonexistent keys.
+
+	* src/tools/docmaker/tohtml.py (HtmlFormatter::section_enter): Emit
+	empty <td> elements for `/empty/'.
+
+2014-12-02  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Ensure Python 3 compatibility.
+
+	* src/tools/docmaker/content.py (ContentProcessor::set_section,
+	ContentProcessor::finish): Replace `has_key' function with `in'
+	keyword.
+
+	* src/tools/docmaker/formatter.py (Formatter::__init__): Replace
+	sorting function with a key generator.
+	(Formatter::add_identifier): Replace `has_key' function with `in'
+	keyword.
+
+	* src/tools/docmaker/tohtml.py (HtmlFormatter::html_source_quote):
+	Replace `has_key' function with `in' keyword.
+	(HtmlFormatter::index_exit, HtmlFormatter::section_enter): Use
+	integer division.
+	s/<>/>/.
+
+	* src/tools/docmaker/utils.py: Import `itertools'.
+	(index_sort): Replaced by...
+	(index_key): ... this new key generator (doing exactly the same).
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Don't output a block multiple times.
+
+	This bug was hidden by not processing all lines of `<Order>' blocks.
+
+	* src/tools/docmaker/formatter.py (Formatter::section_dump): Filter
+	out field names.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Use field values as HTML link targets where possible.
+
+	* src/tools/docmaker/tohtml.py (HtmlFormatter::make_block_url):
+	Accept second, optional argument to specify a name.
+	(HtmlFormatter::html_source_quote): Link to field ID if possible.
+	(HtmlFormatter::print_html_field_list): Emit `id' attribute.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Allow empty lines in `<Order>' blocks.
+
+	Before this patch, the suggested order of entries stopped at the
+	first empty line.
+
+	Obviously, nobody noticed that this problem caused a much reduced
+	set of links in the `Synopsis' sections; in particular, the
+	`<Order>' blocks contain a lot of entries that wouldn't be listed
+	otherwise...
+
+	* src/tools/docmaker/content.py (DocBlock::get_markup_words_all):
+	New function to iterate over all items.
+	(DocSection::process): Use it.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/sources.py (column) [Format 2]: Fix regexp.
+
+	After the single asterisk there must be no other immediately following
+	asterisk.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Improve CSS for vertical spacing.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Improve HTML code for table of contents.
+
+	* src/tools/docmaker/tohtml.py: Introduce a new table class `toc',
+	together with proper CSS.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Provide higher-level markup and simplify HTML.
+
+	* src/tools/docmaker/tohtml.py: Instead of using extraneous `<div>'
+	elements, use CSS descendants (of class `section') to format the
+	data.
+
+	Also remove reduntant <p> and <br> elements, replacing them with
+	proper CSS.
+
+	Globally reduce page width to 75%.
+
+	(block_header): Rename <div> class to `section'.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Add `top' links after blocks.
+
+	* src/tools/docmaker/tohtml.py (block_footer_middle): Implement it.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Improve CSS for fields.
+
+	Make fields align horizontally relative to full line width.
+
+2014-11-29  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Fix index and TOC templates.
+
+	This thinko was introduced 2014-11-27.
+
+2014-11-28  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Format field lists with CSS.
+
+	This also simplifies the inserted HTML code.
+
+	* src/tools/docmaker/tohtml.py
+	(HtmlFormatter::print_html_field_list): Do it.
+
+2014-11-28  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	Fix compiler warning to the comparison between signed and
+	unsigned variable.
+
+	* src/pfr/pfrsbit.c (pfr_slot_load_bitmap): Fix the comparison
+	between `ypos + ysize' and FT_INT_{MAX,MIN}.
+
+2014-11-28  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Replace empty `<td>' with CSS.
+
+	* src/tools/docmaker/tohtml.py (HtmlFormatter::section_enter): Do
+	it.
+
+2014-11-28  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Replace some `<table>' tags with `<h4>' and `<div>'.
+
+	* src/tools/docmaker/tohtml.py (marker_*): Use `<h4>'.
+	(source_*): Use `<div>'.
+	(HtmlFormatter::block_enter): s/<h4>/<h3>/.
+
+2014-11-28  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	Fix compiler warning to conversion specifiers in debug messages.
+
+	* src/autofit/afhints.c (af_glyph_hints_dump_points): Add length
+	modifier to dump long integers.
+	(af_glyph_hints_dump_segments, af_glyph_hints_dump_edges): Ditto.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Use more CSS for index.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Replace `name' attribute of `<a>' with `id'.
+
+	* src/tools/docmaker/tohtml.py (HtmlFormatter::block_enter): Do it.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Remove remaining `width' attributes.
+
+	For `Index' and `TOC' links, we now simply use the `text-align' CSS
+	property of `<td>' to enforce flush-left and flush-right,
+	eliminating the hack with an empty, full-width `<td>' element
+	inbetween.
+
+	The change also enforces the same (smaller) size for all index and
+	TOC links.
+
+2014-11-27  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	* src/cff/cf2font.c: Include `ftcalc.h' to use FT_MSB(),
+	cf2font.c could not find it under `make multi' build.
+
+2014-11-27  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Remove
+	unrequired negative value check for `width' and `height'.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: More HTML table refactoring.
+
+	Replace some `<table>' tags with `<div>' to simplify structure.
+
+	Move `bgcolor' attribute to CSS.
+
+	Replace most `width' attributes with CSS.  The remaining instances
+	(providing a similar effect as LaTeX's `\hfill' command) are removed
+	in a later patch.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Replace <font> with CSS.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Center <table> with CSS.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Replace `<center>' with `<div>'.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/tohtml.py: Remove redundant `<center>' tags.
+
+	This starts a series of commits into the direction of generating
+	valid HTML 5 code, especially using much more CSS.
+
+2014-11-27  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	Prevent too negative values (< FT_INT_MIN) in bitmap metrics,
+	suggested by Alexei.
+
+	* src/pfr/pfrsbit.c (pfr_slot_load_bitmap): Prevent too
+	negative values in `xpos' and `ypos + ysize'.
+	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Prevent
+	too negative values in `x_left' and `y_top'.  Either negative
+	values in `width' and `height' are checked.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Produce better HTML code.
+
+	* src/tools/docmaker/tohtml.py: Always use double quotes for
+	attribute values.
+	(source_footer): Close `td' and `tr' groups.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	Use better way to disable creation of .pyc files for `make refdoc'.
+
+	Python 2.6 was released in 2008...
+
+	* builds/freetype.mk (refdoc): Use python's `-B' option.
+
+	* builds/detect.mk (std_setup, dos_setup): Mention required python
+	version for `refdoc' target.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/docmaker/sources.py (re_bold, re_italic): Use
+	non-grouping parentheses.
+	* src/tools/docmaker/tohtml.py (HtmlFormatter::make_html_word):
+	Updated.
+
+2014-11-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/base/ftobjs.c (FT_Get_Glyph_Name): Fix compiler warning.
+
+	Introdruced in previous change.  Reported by Alexei.
+
+2014-11-26  Werner Lemberg  <wl@gnu.org>
+
+	* src/*: Add checks for parameters of API functions where missing.
+
+	`API functions' are functions tagged with `FT_EXPORT_DEF'.
+
+	Besides trivial fixes, the following changes are included, too.
+
+	* src/base/ftbdf.c (FT_Get_BDF_Charset_ID, FT_Get_BDF_Property): Set
+	error code if no service is available.
+
+	* src/base/ftinit.c (FT_Done_FreeType): Change return value for
+	invalid `library' parameter to `Invalid_Library_Handle'.
+
+	* src/base/ftobjs.c (FT_New_Size): Change return value for invalid
+	`asize' parameter to `Invalid_Argument'.
+
+	* src/base/ftoutln.c (FT_Outline_Copy): Change return value for
+	invalid `source' and `target' parameters to `Invalid_Outline'.
+	(FT_Outline_Done_Internal): Change return value for invalid
+	`outline' parameter to `Invalid_Outline'.
+
+2014-11-26  Werner Lemberg  <wl@gnu.org>
+
+	* src/cache/ftcbasic.c: Use single calls to `FT_TRACE'.
+
+2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	* src/base/ftobj.c (Mac_Read_POST_Resource): Additional
+	overflow check in the summation of POST fragment lengths,
+	suggested by Mateusz Jurczyk <mjurczyk@google.com>.
+
+2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	* src/base/ftobjs.c (Mac_Read_POST_Resource): Insert comments
+	and fold too long tracing messages.
+
+2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	Fix Savannah bug #43540.
+
+	* src/base/ftmac.c (parse_fond): Prevent a buffer overrun
+	caused by a font including too many (> 63) strings to store
+	names[] table.
+
+2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	* src/base/ftobjs.c (Mac_Read_POST_Resource): Use unsigned long
+	variables to read the lengths in POST fragments.  Suggested by
+	Mateusz Jurczyk <mjurczyk@google.com>.
+
+2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	Fix Savannah bug #43539.
+
+	* src/base/ftobjs.c (Mac_Read_POST_Resource): Fix integer overflow
+	by a broken POST table in resource-fork.
+
+2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	Fix Savannah bug #43538.
+
+	* src/base/ftobjs.c (Mac_Read_POST_Resource): Fix integer overflow
+	by a broken POST table in resource-fork.
+
+2014-11-26  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	* src/base/ftobjs.c (Mac_Read_POST_Resource): Avoid memory leak
+	by a broken POST table in resource-fork.  Return after freeing
+	the buffered POST table when it is found to be broken.
+
+2014-11-25  Werner Lemberg  <wl@gnu.org>
+
+	*/*: s/Invalid_Argument/Invalid_Size_Handle/ where appropriate.
+
+2014-11-25  Werner Lemberg  <wl@gnu.org>
+
+	*/*: s/Invalid_Argument/Invalid_Stream_Handle/ where appropriate.
+
+2014-11-25  Werner Lemberg  <wl@gnu.org>
+
+	*/*: s/Invalid_Argument/Invalid_Library_Handle/ where appropriate.
+
+2014-11-25  Werner Lemberg  <wl@gnu.org>
+
+	*/*: s/Invalid_Argument/Invalid_Outline/ where appropriate.
+
+2014-11-25  Werner Lemberg  <wl@gnu.org>
+
+	*/*: s/Invalid_Argument/Invalid_Face_Handle/ where appropriate.
+
+2014-11-24  Werner Lemberg  <wl@gnu.org>
+
+	[Savannah bug #43682] Adjust some renderer callbacks.
+
+	* src/raster/ftraster.c (ft_black_set_mode): Change return type to
+	`int' to stay in sync with `FT_Renderer_SetModeFunc' prototype.
+
+	* src/smooth/ftgrays.c (gray_raster_set_mode): New dummy function
+	for orthogonality.
+	(ft_grays_raster): Use it.
+
+2014-11-25  Werner Lemberg  <wl@gnu.org>
+
+	[Savannah bug #43682] Properly handle missing return errors.
+
+	The functions in this patch *do* return non-trivial errors that must
+	be taken care of.
+
+	* src/autofit/afloader.c (af_loader_load_g), src/base/ftobjs.c
+	(FT_Render_Glyph_Internal), src/base/ftoutln.c (FT_Outline_Render),
+	src/cff/cffgload.c (cff_decoder_parse_charstrings) <cff_op_endchar>,
+	src/psaux/psobjs.c (ps_parser_load_field_table), src/psaux/t1decode
+	(t1_decoder_parse_charstrings) <op_endchar>, src/truetype/ttgload.c
+	(load_truetype_glyph <subglyph loop>, tt_loader_init,
+	TT_Load_Glyph), src/truetype/ttgxvar.c (TT_Set_MM_Blend),
+	src/truetype/ttobjs.c (tt_size_run_fpgm, tt_size_run_prep): Do it.
+
+2014-11-25  Werner Lemberg  <wl@gnu.org>
+
+	[Savannah bug #43682] Add/remove `void' casts to some functions.
+
+	We use a cast to indicate that we intentionally ignore a function's
+	return value.  However, this doesn't apply to API functions where
+	errors can only happen for trivially invalid input.
+
+	* src/base/ftstroke.c (FT_Glyph_Stroke, FT_Glyph_StrokeBorder),
+	src/base/ftsynth.c (FT_GlyphSlot_Embolden), src/cff/cffgload.c
+	(cff_slot_load), src/pfr/pfrdrivr.c (pfr_get_kerning),
+	src/type1/t1load.c (parse_encoding), src/type42/t42parse.c
+	(t42_parse_encoding): Do it.
+
+2014-11-25  Werner Lemberg  <wl@gnu.org>
+
+	[Savannah bug #43682] Change some signatures to `void' return type.
+
+	* include/internal/pshints.h (PSH_Globals_SetScaleFunc),
+	include/internal/sfnt.h (TT_Get_Metrics_Func),
+	src/pshinter/pshglob.c (psh_globals_set_scale),
+	src/pshinter/pshrec.c (ps_hints_init), src/sfnt/ttmtx.c
+	(tt_face_get_metrics), src/truetype/ttinterp.c (TT_Goto_CodeRange,
+	TT_Set_CodeRange, TT_Clear_CodeRange, TT_Done_Context,
+	TT_Save_Context): Do it.
+
+	* src/pshinter/pshglob.h, src/pshinter/pshrec.h, src/sfnt/ttmtx.h,
+	src/truetype/ttgload.c (TT_Hint_Glyph), src/truetype/ttinterp.c
+	(TT_Run_Context), src/truetype/ttinterp.h, src/truetype/ttobjs.c
+	(tt_size_run_fpgm, tt_size_run_prep): Updated.
+
+2014-11-24  Werner Lemberg  <wl@gnu.org>
+
+	Remove all code related to FT_MAX_CHARMAP_CACHEABLE.
+
+	This is no longer used.
+
+	* src/base/ftobjs.c, src/cache/ftccmap.c, src/cff/cffobjs.c,
+	src/sfnt/ttcmap.c: Do it.
+
+2014-11-24  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43680.
+
+	This adds an additional constraint to make the fix from 2013-01-25
+	really work.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_image) <index_format==4>:
+	Check `p' before `num_glyphs'.
+
+2014-11-24  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix Savannah bug #43679.
+
+	* src/truetype/ttpload.c (tt_face_load_hdmx): Check minimum size of
+	`record_size'.
+
+2014-11-24  Jarkko Pöyry  <jarkko.poyry@gmail.com>
+
+	[cff, pfr, psaux, winfonts] Fix Savannah bug #43676.
+
+	Don't cast cmap init function pointers to an incompatible type.
+
+	Without this patch, the number of parameters between declaration and
+	the real signature differs.  Calling such a function results in
+	undefined behavior.
+
+	  ISO/IEC 9899:TC3 (Committee Draft September 7, 2007)
+	    6.5.2.2 Function calls
+	      9 If the function is defined with a type that is not
+	        compatible with the type (of the expression) pointed to by
+	        the expression that denotes the called function, the
+	        behavior is undefined.
+
+	On certain platforms (c -> js with emscripten) this causes
+	termination of execution or invalid calls because in the emscripten
+	implementation, function pointers of different types are stored in
+	different pointer arrays.  Incorrect pointer type here results in
+	indexing of an incorrect array.
+
+	* src/cff/cffcmap.c (cff_cmap_encoding_init, cff_cmap_unicode_init),
+	src/pfr/pfrcmap.c (pfr_cmap_init), src/psaux/t1cmap.c
+	t1_cmap_standard_init, t1_cmap_expert_init, t1_cmap_custom_init,
+	t1_cmap_unicode_init), src/winfonts/winfnt.c (fnt_cmap_init): Fix
+	signature.
+
+2014-11-24  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43672.
+
+	* src/sfnt/ttkern.c (tt_face_load_kern): Use correct value for
+	minimum table length test.
+
+2014-11-24  Werner Lemberg  <wl@gnu.org>
+
+	[type1, type42] Another fix for Savannah bug #43655.
+
+	* src/type1/t1load.c (parse_charstrings), src/type42/t42parse.c
+	(t42_parse_charstrings): Add another boundary testing.
+
+2014-11-24  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Formatting, copyright, improved documentation.
+
+	* src/tools/docmaker/*: No code changes besides trivial
+	modifications.
+
+2014-11-22  Werner Lemberg  <wl@gnu.org>
+
+	[bdf] Fix Savannah bug #43660.
+
+	* src/bdf/bdflib.c (_bdf_parse_glyphs) <"ENDFONT">: Check
+	`_BDF_GLYPH_BITS'.
+
+2014-11-22  Werner Lemberg  <wl@gnu.org>
+
+	[type42] Allow only embedded TrueType fonts.
+
+	This is a follow-up to Savannah bug #43659.
+
+	* src/type42/t42objs.c (T42_Face_Init): Exclusively use the
+	`truetype' font driver for loading the font contained in the `sfnts'
+	array.
+
+2014-11-22  Werner Lemberg  <wl@gnu.org>
+
+	[type42] Fix Savannah bug #43659.
+
+	* src/type42/t42objs.c (T42_Open_Face): Initialize `face->ttf_size'.
+
+	* src/type42/t42parse.c (t42_parse_sfnts): Always set
+	`face->ttf_size' directly.  This ensures a correct stream size in
+	the call to `FT_Open_Face', which follows after parsing, even for
+	buggy input data.
+	Fix error messages.
+
+2014-11-22  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Fix Savannah bug #43658.
+
+	* src/cff/cf2ft.c (cf2_builder_lineTo, cf2_builder_cubeTo): Handle
+	return values of point allocation routines.
+
+2014-11-22  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43656.
+
+	* src/sfnt/ttcmap.c (tt_cmap4_validate): Fix order of validity
+	tests.
+
+2014-11-21  Werner Lemberg  <wl@gnu.org>
+
+	[type1, type42] Fix Savannah bug #43655.
+
+	* src/type1/t1load.c (parse_charstrings), src/type42/t42parse.c
+	(t42_parse_charstrings): Fix boundary testing.
+
+2014-11-21  Werner Lemberg  <wl@gnu.org>
+
+	* src/pcf/pcfread.c (pcf_get_metrics): Sanitize invalid metrics.
+
+2014-11-21  Werner Lemberg  <wl@gnu.org>
+
+	[ftlcdfil] Obey flow direction.
+
+	* src/base/ftlcdfil.c (_ft_lcd_filter_fir, _ft_lcd_filter_legacy):
+	Handle `up' flow.
+
+2014-11-21  Werner Lemberg  <wl@gnu.org>
+
+	* src/base/ftbitmap.c (FT_Bitmap_Convert): Improve.
+
+	This commit completes argument checks and adds support for different
+	flow directions.
+
+2014-11-21  Werner Lemberg  <wl@gnu.org>
+
+	* src/base/ftbitmap.c (FT_Bitmap_Copy): Improve.
+
+	This commit adds argument checks and support for different flow
+	directions.
+
+2014-11-20  Werner Lemberg  <wl@gnu.org>
+
+	* src/base/ftbitmap.c (FT_Bitmap_New): Check argument.
+
+2014-11-19  Werner Lemberg  <wl@gnu.org>
+
+	Change some fields in `FT_Bitmap' to unsigned type.
+
+	This doesn't break ABI.
+
+	* include/ftimage.h (FT_Bitmap): Make `rows', `width', `num_grays',
+	`pixel_mode', and `palette_mode' unsigned types.
+
+	* src/base/ftbitmap.c: Updated.
+	(FT_Bitmap_Copy): Fix casts.
+
+	* src/cache/ftcsbits.c, src/raster/ftraster.c, src/sfnt/pngshim.c:
+	Updated.
+
+2014-11-19  Werner Lemberg  <wl@gnu.org>
+
+	Make `FT_Bitmap_Convert' correctly handle negative `pitch' values.
+
+	* src/base/ftbitmap.c (FT_Bitmap_Convert): Always use positive value
+	for the pitch while copying data.
+	Correctly set pitch sign in target bitmap.
+
+2014-11-19  Werner Lemberg  <wl@gnu.org>
+
+	Minor code improvement in `FT_Bitmap_Embolden'.
+
+	* src/base/ftbitmap.c (FT_Bitmap_Embolden) <FT_PIXEL_MODE_GRAY[24]>:
+	Fix thinko.
+
+2014-11-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	* src/base/fttrigon.c: Use dedicated `FT_Angle' for arctan table.
+
+2014-11-19  Behdad Esfahbod  <behdad@behdad.org>
+
+	Avoid compiler warnings on x86-64 for `FT_MulFix'.
+
+	`FT_MulFix' takes `FT_Long' parameters as defined in `freetype.h',
+	but several inline implementations of it in `ftcalc.h' take
+	`FT_Int32' arguments.  This is causing compiler warnings on x86-64:
+	If parameters of type `FT_Fixed' (= `FT_Long') are passed to the
+	inline implementation of this function, integer values are truncated
+	from 64bit to 32bit.
+
+	* include/internal/ftcalc.h (FT_MulFix) [FT_MULFIX_ASSEMBLER]: Add
+	casts.
+
+2014-11-15  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43597.
+
+	* src/sfnt/pngshim.c (Load_SBit_Png): Protect against too large
+	bitmaps.
+
+2014-11-12  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43591.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_init): Protect against addition
+	and multiplication overflow.
+
+2014-11-12  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43590.
+
+	* src/sfnt/ttload.c (check_table_dir, tt_face_load_font_dir):
+	Protect against addition overflow.
+
+2014-11-12  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43589.
+
+	* src/sfnt/sfobjs.c (woff_open_font): Protect against addition
+	overflow.
+
+2014-11-12  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43588.
+
+	* src/sfnt/ttcmap.c (tt_cmap8_validate, tt_cmap10_validate,
+	tt_cmap12_validate, tt_cmap13_validate, tt_cmap14_validate): Protect
+	against overflow in additions and multiplications.
+
+2014-11-10  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] CORDIC improvements.
+
+	The scaling between the hypotenuse and its CORDIC approximation is
+	based on regression analysis. The smaller padding for `theta' is
+	justifed by its maximum error of less than 6.
+
+	* src/base/fttrigon.c (ft_trig_downscale): Borrow code from
+	./ftcalc.c (ft_multo64), change linear intercept.
+	(ft_trig_pseudo_polarize): Decrease `theta' padding.
+
+2014-11-09  Werner Lemberg  <wl@gnu.org>
+
+	* src/base/ftstroke.c (ft_stroker_inside): Fix border intersections.
+
+	One more place to check whether `radius' is zero.
+
+	Problem reported by Marco Wertz <marco.wertz@gmx.de>.
+
+2014-11-07  Werner Lemberg  <wl@gnu.org>
+
+	[bdf] Fix Savannah bug #43535.
+
+	* src/bdf/bdflib.c (_bdf_strncmp): New macro that checks one
+	character more than `strncmp'.
+	s/ft_strncmp/_bdf_strncmp/ everywhere.
+
+2014-11-06  Werner Lemberg  <wl@gnu.org>
+
+	[pcf] Fix Savannah bug #43548.
+
+	* src/pcf/pcfread.c (pcf_get_encodings): Add sanity checks for row
+	and column values.
+
+2014-11-06  Werner Lemberg  <wl@gnu.org>
+
+	[pcf] Fix Savannah bug #43547.
+
+	* src/pcf/pcfread.c (pcf_read_TOC): Check `size' and `offset'
+	values.
+
+2014-11-06  Werner Lemberg  <wl@gnu.org>
+
+	* src/pcf/pcfread.c (pcf_read_TOC): Avoid memory leak.
+
+2014-11-03  Infinality  <infinality@infinality.net>
+
+	* src/truetype/ttsubpix.c (COMPATIBILITY_MODE_Rules): Updated.
+
+	The previous commit deteriorates rendering of DejaVu and similar
+	fonts; this gets compensated with this rule.
+
+2014-11-03  Werner Lemberg  <wl@gnu.org>
+
+	* src/truetype/ttinterp.c (Ins_DELTAP): Fix subpixel hinting.
+
+	Before this patch, it was impossible to ever call DELTAP[123] in
+	subpixel hinting mode as described in the ClearType whitepaper; it
+	only worked if in `compatibility mode'.  However, compatibility mode
+	essentially disables SHPIX, completely ruining hinting of
+	ttfautohint output, for example.
+
+	We now follow the whitepaper more closely so that DELTAP[123]
+	instructions for touched points in the non-subpixel direction are
+	executed.
+
+2014-10-31  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[smooth] Improve code readability.
+
+	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Rearrange code.
+
+2014-10-31  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[smooth] Reduce outline translations during rendering.
+
+	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Translate origin
+	virtually by modifying cbox, actually translate outline if cumulative
+	shift is not zero.
+
+2014-10-30  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[smooth] Fix Savannah bug #35604 (cont'd).
+
+	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Remove checks and
+	casts that became unnecessary after the variable type upgrades.
+
+2014-10-29  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[smooth] Improve code readability.
+
+	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Rearrange code.
+
+2014-10-29  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	Unify hypotenuse approximations.
+
+	* include/internal/ftcalc.h (FT_HYPOT): Move macro from here...
+	* include/internal/ftobjs.h: ... to here, next to required `FT_ABS'.
+	* src/smooth/ftgrays.c (gray_render_cubic): Use it here.
+
+2014-10-25  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Test valid darkening parameter macros in `ftoption.h'.
+
+	We no longer need an otherwise unused typedef that can cause a gcc
+	warning.
+	Problem reported by Alexei.
+
+	* src/cff/cffobjs.c (cff_driver_init): Use
+	`CFF_CONFIG_OPTION_DARKENING_PARAMETER_XXX' macros directly.
+	(SET_DARKENING_PARAMETERS): Removed.
+	Compile time tests are now ...
+
+	* devel/ftoption.h, include/config/ftoption.h: ... here.
+
+2014-10-25  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	Improve flat corner definition.
+
+	* include/internal/ftcalc.h (FT_HYPOT): Macro to approximate Euclidean
+	distance with the alpha max plus beta min algorithm.
+	* src/base/ftcalc.c (ft_corner_is_flat): Use it instead of Taxicab
+	metric.
+
+2014-10-23  David Weiß  <David.Weiss@ptvgroup.com>
+
+	[build] Improve property file for vc2010.
+
+	User-defined properties should be empty by default to prevent linker
+	failures.
+
+	* builds/windows/vc2010/freetype.user.props,
+	builds/windows/vc2010/freetype.vcxproj:
+	s/OptionsDirectory/UserOptionDirectory/.
+	Comment out all user options.
+
+2014-10-23  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Work around bug in preprocessor of MSVC 2010.
+
+	We have been hit by
+
+	  https://connect.microsoft.com/VisualStudio/feedback/details/718976/msvc-pr
+
+	* devel/ftoption.h, include/config/ftoption.h: Replace
+	`CFF_CONFIG_OPTION_DARKENING_PARAMETERS' with eight macros
+	`CFF_CONFIG_OPTION_DARKENING_PARAMETER_{X,Y}{1,2,3,4}'.
+
+	* src/cff/cffobjs.c (SET_DARKENING_PARAMETERS): Removed.  We no
+	longer need double expansion.
+	(SET_DARKENING_PARAMETERS_0): Renamed to ...
+	(SET_DARKENING_PARAMETERS): ... this.
+	Update call.
+
+2014-10-20  Werner Lemberg  <wl@gnu.org>
+
+	[sbit] Minor fixes.
+
+	* src/sfnt/ttsbit.c (tt_face_load_sbit) [TT_SBIT_TABLE_TYPE_SBIX]:
+	Accept overlay format also, but emit warning message in that case.
+	(tt_sbit_decoder_load_metrics): Add missing newline to error
+	message.
+	(tt_sbit_load_sbix_image): Add `rgbl' graphic type (as used on iOS
+	7.1) to the list of unsupported formats.
+
+2014-10-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[truetype] Clean up bytecode rounding.
+
+	Zero distance does not have to be treated specially if you follow
+	specifications and check the sign as the very last step of rounding.
+
+	* src/truetype/ttinterp.c (Round_None, Round_To_Grid,
+	Round_Down_To_Grid, Round_Up_To_Grid, Round_To_Double_Grid): Use
+	macros when available, do not check for non-zero distance.
+	(Round_To_Half_Grid, Round_Super, Round_Super_45): Ditto, return phase
+	if sign changed.
+
+2014-10-18  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[truetype] Unwrap engine compensation settings.
+
+	* src/truetype/ttobjs.c (tt_size_init_bytecode): Updated.
+
+2014-10-18  David Weiß  <David.Weiss@ptvgroup.com>
+
+	[build] Add property file to vc2010 project.
+
+	This simplifies custom build configurations, especially for
+	automated build environments.
+
+	* builds/windows/vc2010/freetype.user.props: New configuration file.
+
+	* builds/windows/vc2010/freetype.vcxproj: Include
+	`freetype.user.props' and use its data fields.
+
+	* builds/windows/vc2010/index.html: Updated.
+
+2014-10-18  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Add blue-zone support for Telugu.
+
+	This essentially moves the Telugu script from the `Indic' hinter to
+	the `Latin' hinter.
+
+	Note that this is a first shot and quite certainly needs
+	refinements.
+
+	* src/autofit/afblue.dat: Add blue zone data for Telugu.
+
+	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
+
+	* src/autofit/afscript.h: Add Telugu standard characters and move
+	data out of AF_CONFIG_OPTION_INDIC block.
+
+	* src/autofit/afranges.c: Move Telugu data out of
+	AF_CONFIG_OPTION_INDIC block.
+
+	* src/autofit/afstyles.h: Update Telugu data; in particular, use
+	AF_WRITING_SYSTEM_LATIN.
+
+2014-10-18  David Wimsey  <david@wimsey.us>
+
+	[cmake] Add iOS build support.
+	From Savannah patch #8497.
+
+	* builds/cmake/iOS.cmake: New file.  Universal binaries are built
+	with both 32 and 64 bit arm architectures.
+
+	* CMakeLists.txt (IOS_PLATFORM): New variable for running the iOS
+	toolchain.  Possible values are `OS' to build on iOS, or
+	`SIMULATOR' to build on APPLE.
+
+2014-10-16  Behdad Esfahbod  <behdad@behdad.org>
+	    Werner Lemberg  <wl@gnu.org>
+
+	[cff] Add `CFF_CONFIG_OPTION_DARKENING_PARAMETERS' config macro.
+
+	* devel/ftoption.h, include/config/ftoption.h
+	(CFF_CONFIG_OPTION_DARKENING_PARAMETERS): New macro.
+
+	* src/cff/cffobjs.c (SET_DARKENING_PARAMETERS,
+	SET_DARKENING_PARAMETERS_0): New macros.
+	(cff_driver_init): Use new macros.
+
+2014-10-14  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[truetype] Limit delta shift range.
+
+	The valid range for delta shift is zero through six.  Negative values
+	are invalid according to
+
+	  https://developer.apple.com/fonts/TrueType-Reference-Manual/RM04/Chap4.html#delta%20shift
+
+	* src/truetype/ttobjs.h (delta_shift, delta_base): Make unsigned.
+	* src/truetype/ttinterp.h (DO_SDS): Throw an error if `delta_shift'
+	is out of range.
+	(Ins_DELTAP, Ins_DELTAC): Optimize for valid `delta_shift'.
+
+2014-10-16  Werner Lemberg  <wl@gnu.org>
+
+	A better fix for Savannah bug #43392.
+	Suggested by Doug Felt <dougfelt@gmail.com>.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_metrics): Set
+	`vertAdvance' to zero...
+
+	* src/truetype/ttgload.c (TT_Load_Glyph): ... and set here a default
+	value for `vertAdvance' based on `linearVertAdvance' in case
+	`vertAdvance' is zero.  Note that the previous computed ad-hoc value
+	for `linearVertAdvance' was apparently not tested in a real-life
+	situation.
+
+2014-10-14  David Weiß  <David.Weiss@ptvgroup.com>
+
+	[build] Better optimization settings for vc2010 solution file.
+
+	* builds/windows/vc2010/freetype.sln,
+	builds/windows/vc2010/freetype.vcxproj: Updated.
+
+2014-10-14  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Adjust Devenagari character range.
+
+	* src/autofit/afranges.c (af_deva_uniranges): Omit characters that
+	are common to all other Indic scripts.
+
+2014-10-12  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #43392.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_metrics): Don't let
+	vertical metrics uninitialized.
+
+2014-10-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Small bbox correction.
+
+	* src/base/ftbbox.c (FT_Outline_Get_BBox): Start from nonsense bbox
+	instead of initial point that could be `off' in conic outlines.
+
+2014-10-08  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Fix Savannah bug #43356.
+
+	* src/base/ftbbox.c (BBox_Move_To, BBox_Conic_To): Update bbox in case
+	of implicit `to'.
+	(BBox_Line_To): New emitter that does not update bbox.
+
+2014-10-08  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Introduce and use new macro `FT_UPDATE_BBOX'
+
+	* src/base/ftbbox.c (FT_UPDATE_BBOX): New macro.
+	(FT_Outline_Get_BBox): Use it here.
+
+2014-10-02  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Significant optimization of `ft_div64by32'
+
+	We shift as many bits as we can into the high register, perform
+	32-bit division with modulo there, then work through the remaining
+	bits with long division. This optimization is especially noticeable
+	for smaller dividends that barely use the high register.
+
+	* src/base/ftcalc.c (ft_div64by32): Updated.
+
+2014-10-02  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Fix Savannah bug #43271.
+
+	* src/cff/cf2font.c (cf2_computeDarkening): Change overflow
+	detection to use logarithms and clamp `scaledStem'.
+
+2014-10-01  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	* src/base/ftcalc.c: Remove miscellaneous type casts.
+
+2014-10-01  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Use more common `FT_MSB' implementation with masks.
+
+	* src/base/ftcalc.c (FT_MSB): Updated.
+
+2014-09-30  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Clean up.
+
+	* src/base/ftcalc.c (FT_MOVE_SIGN): New macro for frequently used
+	code.
+
+2014-09-25  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Avoid unnecessary long division.
+
+	This applies to `FT_MulDiv' but not to `FT_DivFix', where overflows or
+	lack thereof are predicted accurately.
+
+	* src/base/ftcalc.c (ft_div64by32): Improve readability.
+	(FT_MulDiv, FT_MulDiv_No_Round) [!FT_LONG64]: Use straight division
+	when multiplication stayed within 32 bits.
+
+2014-09-24  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Minor clean-ups.
+
+	* src/autofit/afhints.c (AF_FLAGS): Remove obsolete values.
+
+	* src/autofit/afhints.c (af_glyph_hints_dump_points,
+	af_glyph_hints_align_strong_points): Updated.
+
+	* src/autofit/aflatin.c (af_latin_hints_link_segments,
+	af_latin_hints_compute_segments), src/autofit/afcjk.c
+	(af_cjk_hints_link_segments), src/autofit/aflatin2.c
+	(af_latin2_hints_link_segments, af_latin2_hints_compute_segments):
+	There are no longer fake segments since more than 10 years...
+
+2014-09-22  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Minor code streamlining.
+
+	* src/autofit/afhints.c (af_axis_hints_new_edge): Remove redundant
+	initialization.
+
+2014-09-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	* src/base/ftcalc.c: Harmonize code.
+
+2014-09-15  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Tighten the overflow check in `FT_MulDiv'.
+
+	* src/base/ftcalc.c (FT_MulDiv) [!FT_LONG64]: Updated.
+
+2014-09-08  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	Fix Savannah bug #43153.
+
+	* src/psaux/psconv.c (PS_Conv_ToFixed): Add protection against
+	overflow in `divider'.
+
+2014-09-03  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Tighten the overflow check in `FT_DivFix'.
+
+	This fixes a 13-year old bug. The original overflow check should have
+	been updated when rounding was introduced into this function
+	(c2cd00443b).
+
+	* src/base/ftcalc.c (FT_DivFix) [!FT_LONG64]: Updated.
+	* include/freetype.h (FT_DivFix): Updated documentation.
+
+2014-09-03  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Tighten the overflow check in `FT_MulFix'.
+
+	* src/base/ftcalc.c (FT_MulFix) [!FT_LONG64]: Updated.
+
+2014-09-02  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[truetype] Shortcut ppem calculations for square pixels.
+
+	* src/truetype/ttinterp.h (TT_ExecContextRec): New field
+	`cur_ppem_func' with a function pointer.
+	* src/truetype/ttinterp.c (TT_RunIns): Initialize `cur_ppem_func'
+	depending on the pixel geometry to either...
+	(Current_Ppem_Stretched): ... this for stretched pixels.
+	(Current_Ppem): ... or this for square pixels.
+	(DO_MPPEM, DO_MPS, Ins_DELTAP, Ins_DELTAC): Use `cur_ppem_func'.
+
+2014-08-31  Behdad Esfahbod  <behdad@behdad.org>
+
+	Don't use `register' keyword.  Fixes compiler warnings.
+
+	* src/base/ftcalc.c (FT_Add64) [!FT_LONG64]: Do it.
+	* src/gzip/inftrees.c (huft_build): Ditto.
+	* src/truetype/ttinterp.c (TT_MulFix14_arm): Ditto.
+
+2014-08-24  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[truetype] Optimize DELTAP and DELTAC.
+
+	* src/truetype/ttinterp.c (Ins_DELTAP, Ins_DELTAC): Move ppem
+	calculations outside of the loop.
+
+2014-08-21  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	Fix Savannah bug #43033.
+
+	* include/config/ftconfig.h, builds/unix/ftconfig.in,
+	builds/vms/ftconfig.h [FT_LONG64]: Do not disable the macro when
+	64-bit type is `long'.
+
+2014-08-20  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Small optimization of `FT_MulFix'.
+
+	* src/base/ftcalc.c (FT_MulFix): Loosen up the condition for direct
+	32-bit calculations.
+
+2014-08-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Use unsigned calculation in `FT_MulDiv'.
+
+	* src/base/ftcalc.c (FT_MulDiv): Updated to expand 32-bit range.
+
+2014-08-18  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Remove truncation in `FT_DivFix'.
+
+	* src/base/ftcalc.c (FT_DivFix): Updated.
+
+2014-08-14  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	Minor refactoring.
+
+	* src/base/ftcalc.c (FT_MulDiv, FT_MulDiv_No_Round): Updated.
+
+2014-08-14  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	Turn FT_MSB into a macro when using gcc builtins.
+
+	* src/base/ftcalc.c, include/internal/ftcalc.h: Updated.
+
+2014-08-12  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Avoid undefined FT_MSB in `BBox_Cubic_Check'.
+
+	* src/base/ftbbox.c (BBox_Cubic_Check): Update.
+	(update_cubic_max): Repalce with...
+	(cubic_peak): ... this, which now handles upscaling.
+
+2014-08-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Handle collapsed outlines to avoid undefined FT_MSB.
+
+	* src/base/ftoutln.c (FT_Outline_Get_Orientation): Update.
+
+2014-08-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Restore FT_MulFix inlining.
+
+	* include/freetype.h (FT_MulFix): Unconditionally defined.
+
+	* src/base/ftcalc.c [FT_MULFIX_ASSEMBLER]: Move code from here...
+
+	* include/internal/ftcalc.h [FT_MULFIX_ASSEMBLER]: ... to here,
+	which conditionally replaces the function with an inline version
+	through the macro.
+
+2014-08-08  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra): Refactor.
+
+2014-07-26  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Fix typo.
+
+	* src/cff/cf2hints.c (cf2_glyphpath_computeOffset): Use correct
+	offsets in third quadrant.
+
+	Reported by maks <maksqwe1@ukr.net>.
+
+2014-07-17  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #42788.
+
+	* src/pfr/pfrobjs.c: Include `ftcalc.h'.
+
+2014-07-16  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	Replace `ft_highpow2' function.
+
+	* src/pfr/pfrobjs.c (pfr_face_get_kerning): Use `FT_MSB' instead of
+	`ft_highpow2'.
+
+	* src/base/ftutil.c, include/internal/ftobjs.h (ft_highpow2): Remove
+	it.
+
+2014-07-15  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	* src/base/ftcalc.c (FT_MSB): Utilize gcc builtins.
+
+2014-07-15  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Move assembler code back in the source file.
+
+	FT_MulFix assembler used to reside in ftcalc.c before f47d263f1b.
+
+	* include/config/ftconfig.h, builds/unix/ftconfig.in,
+	builds/vms/ftconfig.h [FT_MULFIX_ASSEMBLER]: Move code from here...
+
+	* src/base/ftcalc.c [FT_MULFIX_ASSEMBLER]: ... to here.
+
+2014-07-14  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Further clean up color bitmap conversion.
+
+	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra): Stop
+	using FT_MulFix and FT_DivFix since all calculations fit into 32 bits.
+
+2014-07-13  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Improve handling of buggy `prep' tables.
+
+	In case of an error in the `prep' table, no longer try to execute it
+	again and again.  This makes FreeType handle endless loops in buggy
+	fonts much faster.
+
+	* src/truetype/ttobjs.h (TT_SizeRec): The fields `bytecode_ready'
+	and `cvt_ready' are now negative if not initialized yet, otherwise
+	they indicate the error code of the last run.
+
+	* src/truetype/ttobjs.c (tt_size_run_fpgm, tt_size_run_prep,
+	tt_size_done_bytecode, tt_size_init_bytecode,
+	tt_size_ready_bytecode, tt_size_init, tt_size_done, tt_size_reset):
+	Updated.
+
+	* src/truetype/ttgload.c (tt_loader_init): Updated.
+	* src/truetype/ttinterp.c (TT_RunIns): Force reexecution of `fpgm'
+	and `prep' only if we are in the `glyf' table.
+
+2014-07-12  Werner Lemberg  <wl@gnu.org>
+
+	* builds/vms/ftconfig.h: Synchronize.
+	Problem reported by Alexei.
+
+2014-07-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Clean up bitmap conversion.
+
+	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra): Use
+	appropriate FT_DivFix and remove superfluous upscaling.
+
+2014-07-04  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Small optimization of the ancient code.
+
+	* src/base/ftcalc.c (FT_MulDiv, FT_MulDiv_No_Round): Loosen up the
+	condition for direct 32-bit calculations.
+
+2014-06-27  Werner Lemberg  <wl@gnu.org>
+
+	Fix Apple standard glyph names.
+
+	* src/sfnt/ttpost.c (tt_post_default_names): Synchronize with
+	`tools/glnames.py'
+
+	Problem reported by Adam Twardoch <adam@fontlab.com>.
+
+2014-06-17  Werner Lemberg  <wl@gnu.org>
+
+	Partially revert commit from 2014-06-13.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Move
+	declaration of `p_first' and `p_last' out of the loop.
+
+2014-06-17  Werner Lemberg  <wl@gnu.org>
+
+	* builds/unix/freetype2.m4: s/AC_PATH_PROG/AC_PATH_TOOL/.
+
+	This simplifies cross-compiling.
+
+2014-06-13  Werner Lemberg  <wl@gnu.org>
+
+	Fix more compiler warnings.
+	Reported by Wojciech Mamrak <wmamrak@gmail.com>.
+
+	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage):
+	Make integer constant unsigned.
+
+	* src/sfnt/ttsbit.c (tt_face_load_strike_metrics)
+	<TT_SBIT_TABLE_TYPE_SBIX>: Fix types.
+	(tt_sbit_decoder_load_compound, tt_face_load_sbix_image): Add proper
+	casts.
+
+2014-06-13  Werner Lemberg  <wl@gnu.org>
+
+	Fix compiler warnings.
+	Reported by Wojciech Mamrak <wmamrak@gmail.com>.
+
+	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage),
+	src/autofit/afmodule.c (af_property_set): Fix `signed' vs.
+	`unsigned' issues.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Make compiler
+	happy.
+
+	* src/base/ftlcdfil.c (_ft_lcd_filter_fir): Use only four elements
+	for `fir'.
+	Fix `signed' vs. `unsigned' issues.
+
+	* src/sfnt/sfobjs.c (WRITE_BYTE): Removed, unused.
+	(WRITE_USHORT, WRITE_ULONG): Add proper casts.
+
+	* src/truetype/ttgload.c (TT_Get_VMetrics): Add proper casts.
+
+	* src/truetype/ttinterp.c (Ins_DELTAP): Add proper casts for `B1'
+	and `B2'.
+
+2014-05-16  Alexey Petruchik  <alexey.petruchik@gmail.com>
+
+	[cmake] Add option to build OS X framework.
+
+	* CMakeLists.txt: Update accordingly.
+
+	* builds/mac/freetype-Info.plist: New file.
+
+2014-05-13  Pavel Koshevoy  <pkoshevoy@gmail.com>
+
+	* CMakeLists.txt (BASE_SRCS): Add missing `ftbdf.c'.
+
+2014-05-11  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix variable initializations.
+
+	* src/autofit/afhints.c (af_glyph_hints_reload): Assign default
+	values to `in_dir' and `out_dir' for all points.
+
+2014-05-11  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix crash with font `CabinSketch-Bold.ttf'.
+
+	Problem reported by Ralf S. Engelschall <rse@engelschall.com>.
+
+	* src/autofit/afhints.c (af_glyph_hints_reload): Fix threshold for
+	finding first non-near point.
+	Properly initialize non-near point deltas.
+
+2014-05-01  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Add blue-zone support for Devanagari.
+
+	This essentially moves the Devanagari script from the `Indic' hinter
+	to the `Latin' hinter.  Thanks to Girish Dalvi
+	<girish.dalvi@gmail.com> for guidance with blue zone characters!
+
+	* src/autofit/afblue.dat: Add blue zone data for Devanagari.
+
+	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
+
+	* src/autofit/afscript.h: Add Devanagari standard characters and
+	move data out of AF_CONFIG_OPTION_INDIC block.
+
+	* src/autofit/afranges.c: Move Devanagari data out of
+	AF_CONFIG_OPTION_INDIC block.
+	Move U+20B9, (new) Rupee sign, from Latin to Devanagari.
+
+	* src/autofit/afstyles.h: Update Devanagari data; in particular, use
+	AF_WRITING_SYSTEM_LATIN.
+
+2014-05-01  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix handling of neutral blue zones in stems.
+
+	* src/autofit/afhints.h (AF_Edge_Flags): New value
+	`AF_EDGE_NEUTRAL'.
+
+	* src/autofit/aflatin.c (af_latin_hints_compute_blue_edges): Trace
+	neutral blue zones with AF_EDGE_NEUTRAL.
+	(af_latin_hint_edges): Skip neutral blue zones if necessary.
+
+2014-04-28  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Introduce neutral blue zones to the latin module.
+
+	Such blue zones match either the top or the bottom of a contour.  We
+	need them for scripts where accent-like elements directly touch the
+	base character (for example, some vowel signs in Devanagari, cf.
+	U+0913 or U+0914).
+
+	* src/autofit/afblue.hin (AF_BLUE_PROPERTY_LATIN_NEUTRAL): New
+	property.
+
+	* src/autofit/afblue.h: Regenerated.
+
+	* src/autofit/aflatin.h (AF_LATIN_IS_NEUTRAL_BLUE): New macro.
+	(AF_LATIN_BLUE_NEUTRAL): New enumeration value.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues,
+	af_latin_hints_compute_blue_edges): Handle neutral blue zones.
+
+2014-04-25  Werner Lemberg  <wl@gnu.org>
+
+	* src/autofit/hbshim.c: Partially revert commit from 2014-04-17.
+
+	Using input glyph coverage data is simply wrong.
+
+	Problem reported by Nikolaus Waxweiler <madigens@gmail.com> and
+	Mantas Mikulėnas <grawity@gmail.com>.
+
+2014-04-23  Werner Lemberg  <wl@gnu.org>
+
+	* src/raster/ftraster.c (Vertical_Sweep_Span): Use drop-out mode.
+
+	This spot has been missed while introducing support for various
+	drop-out modes years ago (including no drop-out mode, which this
+	commit fixes).
+
+	Problem reported by Patrick Thomas <pthomas505@gmail.com>.
+
+2014-04-22  Werner Lemberg  <wl@gnu.org>
+
+	* src/sfnt/pngshim.c (error_callback): s/longjmp/ft_longjmp/.
+
+2014-04-20  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix Savannah bug #42148.
+
+	The adaptation of the cjk auto-hinter module to blue stringsets in
+	2013-08-25 had three severe bugs.  Mea culpa.
+
+	1. Contrary to the latin auto-hinter, characters for reference and
+	   overshoot values of a blue zone are specified separately.  Due to
+	   the screwed-up change it didn't work at all.
+
+	2. A boolean comparison was erroneously replaced with a cast,
+	   causing invalid results with the `^' operator later on.  The
+	   visual artifact caused by this problem is the topic of the bug
+	   report.
+
+	3. Two flag values were inverted, causing incorrect assignment of
+	   reference and overshoot values.
+
+	* src/autofit/afblue.dat: Fix CJK bluestrings, introducing a new
+	syntax to have both reference and overshoot characters in a single
+	string.  This is error #1.
+	Add extensive comments.
+
+	* src/autofit/afblue.hin (AF_BLUE_PROPERTY_CJK_FILL): Removed, no
+	longer used.
+	(AF_BLUE_PROPERTY_CJK_TOP, AF_BLUE_PROPERTY_CJK_HORIZ): Fix values.
+	This is error #3.
+
+	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_blues): Correct error #1.
+	Use character `|' to separate characters for reference and overshoot
+	values.
+	Improve tracing messages, synchronizing them with the latin
+	auto-hinter.
+	(af_cjk_hints_compute_blue_edges): Fix value of `is_top_right_blue'.
+	This is error #2.
+	(af_cjk_align_linked_edge): Add tracing message.
+
+	* src/autofit/afcjk.h (AF_CJK_IS_FILLED_BLUE): Removed, no longer
+	used.
+
+2014-04-17  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] More coverage fixes for complex scripts.
+
+	* src/autofit/hbshim.c (af_get_coverage): Merge input glyph coverage
+	of GSUB lookups into output coverage.  Otherwise, ligatures are not
+	handled properly.
+	Don't check blue zone characters for default coverage.
+
+2014-04-17  Werner Lemberg  <wl@gnu.org>
+
+	Make `FT_Get_SubGlyph_Info' actually work.
+
+	* src/base/ftobjs.c (FT_Get_SubGlyph_Info): Return FT_Err_Ok
+	if there is no error.
+
+2014-04-15  Werner Lemberg  <wl@gnu.org>
+
+	[afblue.pl]: Minor improvements.
+
+	* src/tools/afblue.pl: Allow whitespace before comments.
+	Ignore whitespace in strings.
+
+2014-04-14  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve coverage handling.
+
+	* src/autofit/hbshim.c (af_get_coverage): Don't exclude glyphs
+	appearing in the GPOS table if we are processing the default
+	coverage.
+
+2014-04-13  David Weber <weber.aulendorf@googlemail.com>
+
+	[smooth] Fix stand-alone compilation.
+
+	* src/smooth/ftgrays.c (FT_BEGIN_STMNT, FT_END_STMNT): Define.
+
+2014-04-12  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Redesign the recognition algorithm of strong points.
+
+	In particular, local extrema without horizontal or vertical segments
+	are better recognized:
+
+	  + A                + D
+	   \                /
+	    \              /
+	     \            /
+	      \          /
+	       \        + C
+	        \    /
+	       B +/
+
+	If the distances AB and CD are large, point B wasn't previously
+	detected as an extremum since the `ft_corner_is_flat' function
+	`swallowed' BC regardless of its direction, tagging point B as weak.
+	The next iteration started at B and made `ft_corner_is_flat' swallow
+	point C, tagging it as weak also, et voilà.
+
+	To improve that, another pass gets now performed before calling
+	`ft_corner_is_flat' to improve the `topology' of an outline: A
+	sequence of non-horizontal or non-vertical vectors that point into
+	the same quadrant are handled as a single, large vector.
+
+	Additionally, distances of near points are now accumulated, which
+	makes the auto-hinter handle them as if they were prepended to the
+	next non-near vector.
+
+	This generally improves the auto-hinter's rendering results.
+
+	* src/autofit/afhints.c (af_glyph_hints_reload): Implement it.
+
+	* src/autofit/afhints.h (AF_FLAGS): Remove no longer used flag
+	`AF_FLAG_NEAR'.
+
+2014-04-05  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve scoring algorithm for identifying stems.
+
+	Problem reported by Karsten Lücke <karsten.luecke@kltf.de>.
+
+	The new algorithm takes care of the width of stems: If the distance
+	between two segments is larger than the largest stem width, the
+	demerits quickly increase for larger distances.  This improves
+	hinting of slanted fonts (especially if the inner parts of serifs
+	have non-horizontal `shoulders'), avoiding false stem links.
+
+	* src/autofit/aflatin.c (af_latin_hints_link_segments): Use largest
+	stem width (if available) to compute better demerits for distances
+	between stems.
+	(af_latin_hints_detect_features): Pass stem width array and array
+	size.
+	(af_latin_metrics_init_widths): Updated to use original algorithm.
+	(af_latin_hints_apply): Updated to use new algorithm.
+
+	* src/autofit/aflatin.h: Updated.
+	* src/autofit/afcjk.c: Updated.
+
+2014-04-03  Werner Lemberg  <wl@gnu.org>
+
+	Don't require `gzip' module for `sfnt'.
+
+	Reported by Preet <prismatic.project@gmail.com>.
+
+	* src/sfnt/sfobjs.c (woff_open_font): Guard use of
+	FT_Gzip_Uncompress with FT_CONFIG_OPTION_USE_ZLIB.
+
+2014-03-27  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #38235.
+
+	Work around a bug in pkg-config version 0.28 and earlier: If a
+	variable value gets surrounded by doublequotes (in particular values
+	for the `prefix' variable), the prefix override mechanism fails.
+
+	* builds/unix/freetype2.in: Don't use doublequotes.
+	* builds/unix/unix-def.in (freetype.pc): Escape spaces in directory
+	names with backslashes.
+
+2014-03-24  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #41946.
+
+	Based on a patch from Marek Kašík <mkasik@redhat.com>.
+
+	* builds/unix/configure.raw (LIBS_CONFIG): Remove.
+	* builds/unix/freetype-config.in (libs): Hard-code value.
+	* builds/unix/unix-def.in: Updated.
+
+2014-03-22  Werner Lemberg  <wl@gnu.org>
+
+	Another revert for the change from 2014-03-18.
+
+	Problem reported by Nikolaus Waxweiler <madigens@gmail.com>.
+
+	* src/base/ftcalc.c (FT_MulFix): Ensure that an `FT_MulFix' symbol
+	gets always exported.
+
+2014-03-20  Werner Lemberg  <wl@gnu.org>
+
+	CMakeLists.txt: Another fix for include directories.
+
+	Problem reported by Taylor Holberton <taylorcholberton@gmail.com>.
+
+2014-03-19  Werner Lemberg  <wl@gnu.org>
+
+	CMakeLists.txt: Fix include directories.
+
+	Problem reported by Taylor Holberton <taylorcholberton@gmail.com>.
+
+2014-03-19  Werner Lemberg  <wl@gnu.org>
+
+	Partially revert last commit.
+
+	Found by Alexei.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Initializing
+	those variables is plain wrong, since we are in a loop.
+
+2014-03-18  Sean McBride  <sean@rogue-research.com>
+	    Werner Lemberg  <wl@gnu.org>
+
+	Fix clang warnings.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Initialize
+	some variables.
+
+	* src/base/ftcalc.c (FT_MulFix): Only use code if
+	`FT_MULFIX_INLINED' is not defined.
+
+	* src/bdf/bdfdrivr.c (bdf_cmap_class), src/cache/ftcbasic.c
+	(ftc_basic_image_family_class, ftc_basic_image_cache_class,
+	ftc_basic_sbit_family_class, ftc_basic_sbit_cache_class),
+	src/cache/ftccmap.c (ftc_cmap_cache_class), src/cache/ftcmanag.c
+	(ftc_size_list_class, ftc_face_list_class), src/pcf/pcfdrivr.c
+	(pcf_cmap_class), src/pfr/pfrdrivr.c (pfr_metrics_service_rec): Make
+	function static.
+
+	* src/type1/t1driver.c (t1_ps_get_font_value): Remove redundant
+	code.
+
+2014-03-17  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #41869.
+
+	This works around a problem with HarfBuzz (<= 0.9.26), which doesn't
+	validate glyph indices returned by
+	`hb_ot_layout_lookup_collect_glyphs'.
+
+	* src/autofit/hbshim.c (af_get_coverage): Guard `idx'.
+
+	* docs/CHANGES: Updated.
+
+2014-03-14  Werner Lemberg  <wl@gnu.org>
+
+	* builds/unix/configure.raw: Don't show error messages of `which'.
+
+2014-03-09  Alan Coopersmith  <alan.coopersmith@oracle.com>
+
+	Fix cppcheck 1.64 warning.
+
+	* src/autofit/afglobal.c (af_face_globals_new): Catch NULL pointer
+	dereference in case of error.
+
+2014-03-09  Sean McBride  <sean@rogue-research.com>
+
+	* src/sfnt/ttcmap.c (tt_face_build_cmaps): Remove clang warning.
+
+2014-03-06  Werner Lemberg  <wl@gnu.org>
+
+	* Version 2.5.3 released.
+	=========================
+
+
+	Tag sources with `VER-2-5-3'.
+
+	* docs/VERSION.DLL: Update documentation and bump version number to
+	2.5.3.
+
+	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
+	builds/windows/vc2005/index.html,
+	builds/windows/vc2008/freetype.vcproj,
+	builds/windows/vc2008/index.html,
+	builds/windows/vc2010/freetype.vcxproj,
+	builds/windows/vc2010/index.html,
+	builds/windows/visualc/freetype.dsp,
+	builds/windows/visualc/freetype.vcproj,
+	builds/windows/visualc/index.html,
+	builds/windows/visualce/freetype.dsp,
+	builds/windows/visualce/freetype.vcproj,
+	builds/windows/visualce/index.html,
+	builds/wince/vc2005-ce/freetype.vcproj,
+	builds/wince/vc2005-ce/index.html,
+	builds/wince/vc2008-ce/freetype.vcproj,
+	builds/wince/vc2008-ce/index.html: s/2.5.2/2.5.3/, s/252/253/.
+
+	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 3.
+
+	* builds/unix/configure.raw (version_info): Set to 17:2:11.
+	* CMakeLists.txt (VERSION_PATCH): Set to 3.
+	* docs/CHANGES: Updated.
+
+2014-03-06  Werner Lemberg  <wl@gnu.org>
+
+	Fixes for compilation with C++.
+
+	* src/autofit/hbshim.c (scripts): Change type to `hb_script_t'.
+	(af_get_coverage): Updated.
+	(COVERAGE): Add cast.
+
+2014-03-06  Sean McBride  <sean@rogue-research.com>
+
+	Remove more clang analyzer warnings.
+
+	* src/bdf/bdflib.c (_bdf_readstream), src/truetype/ttgload.c
+	(TT_Load_Glyph): Remove dead stores.
+
+2014-03-05  Werner Lemberg  <wl@gnu.org>
+
+	* builds/unix/configure.raw: Simplify.
+
+2014-03-05  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	Fix a bug in configure in library dependency setting
+	Reported in https://bugs.freedesktop.org/show_bug.cgi?id=75652.
+
+	* builds/unix/configure.raw: Use `x"${xxx}" != xno' style.
+
+2014-03-04  Werner Lemberg  <wl@gnu.org>
+
+	Minor fix for `make devel'.
+
+	* builds/freetype.mk (INCLUDE_FLAGS) [DEVEL_DIR]: Don't use
+	pkg-config for bzip2 since not all GNU/Linux distributions have
+	`bzip2.pc' (and the header file `bzlib.h' is located in /usr/include
+	normally).
+
+2014-03-04  Sean McBride  <sean@rogue-research.com>
+
+	Fix several clang static analyzer dead store warnings.
+
+	* src/autofit/afhints.c (af_glyph_hints_reload,
+	af_glyph_hints_align_weak_points): Remove unnecessary assignments.
+
+	* src/bdf/bdflib.c (bdf_font_load): Ditto.
+
+	* src/pshinter/pshalgo.c (psh_glyph_compute_extrema,
+	psh_glyph_interpolate_other_points): Ditto.
+
+	* src/type1/t1load.c (T1_Set_MM_Blend): Ditto.
+
+2014-03-03  Werner Lemberg  <wl@gnu.org>
+
+	Rewrite library option handling in `configure'.
+
+	o Introduce `auto' value for `--with-XXX' library options; this is
+	  now the default.
+
+	o First use `pkg-config' for library detection, then fall back to
+	  other tests.
+
+	* builds/unix/configure.raw (--with-zlib, --with-bzip2, --with-png,
+	--with-harfbuzz): Rewrite.
+	Use new `xxx_reqpriv', `xxx_libpriv', and `xxx_libstaticconf'
+	variables to collect data for `freetype2.pc' and `freetype-config'.
+	(FT2_EXTRA_LIBS): Renamed to ...
+	(ft2_extra_libs): This since it gets no longer substituted.
+	(REQUIRES_PRIVATE, LIBS_PRIVATE, LIBS_CONFIG, LIBSSTATIC_CONFIG):
+	New output variables, replacing `XXX_PKG' and `LIBXXX'.
+	Add notice at the end of `configure' showing the library
+	configuration.
+
+	* builds/unix/freetype-config.in (--static): New command line
+	option.
+	(libs): Updated.
+	(staticlibs): New variable, to be used if `--static' is given.
+	* docs/freetype-config.1: Document `--static'.
+
+	* builds/unix/freetype2.in, builds/unix/unix-def.in: Updated.
+
+2014-03-01  Werner Lemberg  <wl@gnu.org>
+
+	Avoid `long long' warnings with older gcc compilers.
+	Problem reported by Hin-Tak Leung <htl10@users.sourceforge.net>.
+
+	* builds/unix/configure.raw: Don't use gcc's `-pedantic' flag for
+	versions < 4.6.  This is especially needed for Max OS X since this
+	OS runs a gcc variant (or emulation) based on version 4.2.1.
+
+2014-03-01  Werner Lemberg  <wl@gnu.org>
+
+	* docs/INSTALL.CROSS: Revised and updated.
+
+2014-03-01  Werner Lemberg  <wl@gnu.org>
+
+	Make `make clean' remove `freetype2.pc'.
+
+	This is a generated file at build time, not configure time.
+
+	* builds/unix/unix-def.in (DISTCLEAN): Move `freetype2.pc' to ...
+	(CLEAN): This variable.
+
+2014-03-01  Werner Lemberg  <wl@gnu.org>
+
+	Use pkg-config for detecting libpng and libbz2 also.
+
+	* builds/unix/configure.raw (HAVE_PKG): New variable.
+	Search for libbz2 using `pkg-config'; s/BZ2/BZIP2/.
+	Search for libpng using `pkg-config'.
+	Fix definition of `LIBHARFBUZZ' variable.
+	* builds/unix/freetype-config.in ($libs): Updated.
+	* builds/unix/freetype2.in: Add `URL' field.
+	Update `Requires.private' and `Libs.private'.
+	* builds/unix/unix-def.in: Updated.
+
+2014-03-01  Werner Lemberg  <wl@gnu.org>
+
+	Add configure support for HarfBuzz.
+
+	* builds/unix/pkg.m4: New file.
+	* builds/unix/configure.raw: Search for libharfbuzz using
+	`pkg-config'.
+	Add `--without-harfbuzz' option.
+	* builds/unix/freetype-config.in, builds/unix/freetype2.in,
+	builds/unix/unix-def.in (freetype-config, freetype2.pc): Handle
+	HarfBuzz.
+
+	* docs/INSTALL.UNIX: Document interdependency of Freetype with
+	HarfBuzz.
+
+2014-02-28  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[cff] Math simplifications.
+
+	* src/cf2blues.c (cf2_blues_init): Use `FT_MulDiv'.
+	* src/cf2ft.c (cf2_getScaleAndHintFlag): Use simple division.
+
+2014-02-28  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Fix Savannah bug #41697, part 2.
+
+	* src/cff/cf2ft.c (cf2_initLocalRegionBuffer,
+	cf2_initGlobalRegionBuffer): It is possible for a charstring to call
+	a subroutine if no subroutines exist.  This is an error but should
+	not trigger an assert.  Split the assert to account for this.
+
+2014-02-28  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Fix Savannah bug #41697, part 1.
+
+	* src/cff/cf2hints.c (cf2_hintmap_build): Return when `hintMask' is
+	invalid.  In this case, it is not safe to use the length of
+	`hStemHintArray'; the exception has already been recorded in
+	`hintMask'.
+
+2014-02-26  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix Savannah bug #41696.
+
+	* src/sfnt/ttcmap.c (tt_cmap0_validate, tt_cmap2_validate,
+	tt_cmap4_validate, tt_cmap14_validate): Fix limit tests.
+
+2014-02-26  Werner Lemberg  <wl@gnu.org>
+
+	[winfnt] Fix Savannah bug #41694.
+
+	* src/winfonts/winfnt.c (FNT_Load_Glyph): Check glyph offset.
+
+2014-02-26  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Fix Savannah bug #41693.
+
+	* src/cff/cffload.c (CFF_Load_FD_Select): Reject empty array.
+
+2014-02-26  Werner Lemberg  <wl@gnu.org>
+
+	[bdf] Fix Savannah bug #41692.
+
+	bdflib puts data from the input stream into a buffer in chunks of
+	1024 bytes.  The data itself gets then parsed line by line, simply
+	increasing the current pointer into the buffer; if the search for
+	the final newline character exceeds the buffer size, more data gets
+	read.
+
+	However, in case the current line's end is very near to the buffer
+	end, and the keyword to compare with is longer than the current
+	line's length, an out-of-bounds read might happen since `memcmp'
+	doesn't stop properly at the string end.
+
+	* src/bdf/bdflib.c: s/ft_memcmp/ft_strncmp/ to make comparisons
+	stop at string ends.
+
+2014-02-17  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	[autofit] Fix `make multi' compilation.
+
+	* src/autofit/hbshim.c: Include `afglobal.h' and `aftypes.h'.
+
+2014-02-19  Werner Lemberg  <wl@gnu.org>
+	    Simon Bünzli  <zeniko@gmail.com>
+
+	Fix Savannah bug #32902.
+
+	Patch taken from
+
+	  https://code.google.com/p/sumatrapdf/source/browse/trunk/ext/_patches/freetype2.patch?spec=svn8620&r=8620#87
+
+	with slight modifications.
+
+	* src/type1/t1parse.c (T1_Get_Private_Dict): Add heuristic test to
+	handle fonts that incorrectly use \r at the beginning of an eexec
+	block.
+
+2014-02-19  Simon Bünzli  <zeniko@gmail.com>
+
+	Fix Savannah bug #41590.
+
+	* src/type1/t1load.c (parse_encoding): Protect against invalid
+	number.
+
+2014-02-12  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Optimize by using `FT_MulDiv'.
+	Suggested by Alexei.
+
+	* src/cff/cf2font.c (cf2_computeDarkening): Do it.
+
+2014-02-12  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #41465.
+
+	* builds/unix/unix-def.in (CLEAN): Add `freetype-config'.
+	(DISTCLEAN): Remove `freetype-config'.
+
+2014-02-08  Sean McBride  <sean@rogue-research.com>
+
+	Fix clang static analyzer and compiler warnings.
+
+	* src/autofit/afhints.c (af_glyph_hints_align_weak_points),
+	src/autofit/afloader (af_loader_load_g) <FT_GLYPH_FORMAT_COMPOSITE>,
+	src/base/ftcalc.c (FT_MSB), src/base/ftoutln.c
+	(FT_Outline_Decompose), src/bdf/bdfdrivr.c (bdf_interpret_style),
+	src/cff/cffparse.c (cff_parse_integer), src/cid/cidparse.c
+	(cid_parser_new), src/pfr/pfrload.c (pfr_phy_font_load),
+	src/raster/ftraster.c (Decompose_Curve), src/sfnt/sfdriver.c
+	(sfnt_get_ps_name), src/sfnt/ttcmap.c (tt_cmap12_next,
+	tt_cmap13_next), src/smooth/ftgrays.c (gray_hline): Remove dead
+	code.
+
+	* src/autofit/afmodule.c (af_property_get_face_globals,
+	af_property_set, af_property_get), src/base/ftbitmap.c
+	(ft_gray_for_premultiplied_srgb_bgra): Make functions static.
+
+	* src/base/ftobjs.c (ft_remove_renderer): Protect against
+	library == NULL.
+	(ft_property_do): Make function static.
+
+	* src/base/ftrfork.c: Include `ftbase.h'.
+
+	* src/sfnt/ttsbit.c (tt_face_load_sbix_image)
+	[!FT_CONFIG_OPTION_USE_PNG], src/type1/t1gload.c
+	(T1_Compute_Max_Advance): Avoid compiler warning.
+
+	* src/truetype/ttinterp.c (TT_New_Context): Reduce scope of
+	variable.
+
+2014-02-08  Werner Lemberg  <wl@gnu.org>
+
+	Fix Windows build directories.
+
+	The build target is now `windows' instead of `win32'.
+
+	Problem reported by Nickolas George <darknova.clan@gmail.com>.
+
+	* builds/modules.mk: Don't use `win32' and `win16' (!) but
+	`windows'.
+
+	* builds/windows/detect.mk, builds/windows/win32-def.mk:
+	s/win32/windows/.
+
+2014-02-08  Eugen Sawin  <esawin@mozilla.com>
+
+	Fix Savannah bug #41507.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap)
+	[!FT_CONFIG_OPTION_USE_PNG] <17, 17, 19>: Fix error handling.
+
+2014-02-08  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Fix minor performance bug.
+
+	* src/cff/cf2font.c (cf2_font_setup): Darkening amount and blue zone
+	calculations are now cached and not recomputed on each glyph.
+
+2014-02-05  Werner Lemberg  <wl@gnu.org>
+
+	Fix problems with perl 5.8.8 as distributed with current MinGW.
+
+	* src/tools/afblue.pl: Work-around for Perl bug #63402.
+	(string_re): Avoid `possessive quantifiers', which have been
+	introduced in Perl version 5.10.
+
+2014-02-04  Werner Lemberg  <wl@gnu.org>
+
+	Fix compilation with MinGW.
+
+	Right now, compilation out of the box with latest MinGW is broken
+	due to bugs in header files of mingwrt 4.0.3 in strict ANSI mode,
+	cf.
+
+	  https://sourceforge.net/p/mingw/bugs/2024/
+	  https://sourceforge.net/p/mingw/bugs/2046/
+
+	* builds/unix/configure.raw: Don't set `-ansi' flag for MinGW.
+
+2014-02-04  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Minor fix.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_widths),
+	src/autofit/aflatin.c (af_latin_metrics_init_widths): Fix handling
+	of alternative standard characters.
+	This also fixes a compilation warning in non-debug mode.
+
+2014-02-03  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Fix Savannah bug #41363.
+
+	* src/cff/cf2ft.c (cf2_checkTransform): Convert assertion into
+	parameter check.
+	(cf2_decoder_parse_charstrings): Call `cf2_checkTransform' only if
+	we are scaling the outline.
+	(cf2_getPpemY): Remove problematic assertion.
+
+2014-01-26  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Introduce two more slots for standard characters.
+
+	This is useful for OpenType features like `c2sc' (caps to small
+	caps) that don't have lowercase letters by definition, or other
+	features that mainly operate on numerals.
+
+	* src/autofit/afscript.h: Add more standard characters.
+
+	* src/autofit/aftypes.h: Update use of `SCRIPT' macro.
+	(AF_ScriptClassRec): Add members to hold two more standard
+	characters.
+	(AF_DEFINE_SCRIPT_CLASS): Updated.
+
+	* src/autofit/afglobal.c, src/autofit/afglobal.h,
+	* src/autofit/afpic.c, src/autofit/afranges.h, src/autofit/hbshim.c:
+	Update use of `SCRIPT' macro.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_widths),
+	src/autofit/aflatin.c (af_latin_metrics_init_widths): Scan two more
+	standard characters.
+
+2014-01-24  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #41320.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues)
+	<AF_LATIN_IS_LONG_BLUE>: Avoid negative index of `last'.
+
+2014-01-23  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #41310.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap) <glyph_format==5>:
+	Don't check metrics, which this format doesn't have.
+	This is another correction to the commit from 2013-11-21.
+
+2014-01-23  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #41309.
+
+	* src/type1/t1load.c (t1_parse_font_matrix): Properly handle result
+	of `T1_ToFixedArray'.
+
+	* src/cid/cidload.c (cid_parse_font_matrix): Synchronize with
+	`t1_parse_font_matrix'.
+
+	* src/type42/t42parse.c (t42_parse_font_matrix): Synchronize with
+	`t1_parse_font_matrix'.
+	(t42_parse_encoding): Synchronize with `t1_parse_encoding'.
+
+	* src/psaux/psobjs.c (ps_parser_load_field) <T1_FIELD_TYPE_BBOX>,
+	<T1_FIELD_TYPE_MMOX>: Properly handle result of `ps_tofixedarray'.
+
+2014-01-22  Werner Lemberg  <wl@gnu.org>
+
+	* src/autofit/hbshim.c (af_get_coverage): Fix memory leaks.
+
+2014-01-16  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve tracing of style coverages.
+
+	* include/internal/fttrace.h: Add `afglobal' for tracing style
+	coverages.
+
+	* src/autofit/afglobal.c: Include FT_INTERNAL_DEBUG_H.
+	(FT_COMPONENT): Define.
+	(af_face_globals_compute_style_coverage): Trace `gstyles' array
+	data.
+
+2014-01-09  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #41158.
+
+	* builds/unix/install.mk (install): Create man page directory.
+
+2014-01-08  Chongyu Zhu  <lembacon@gmail.com>
+
+	[arm] Fix Savannah bug #41138, part 2.
+
+	* builds/unix/ftconfig.in (FT_MulFix_arm), include/config/ftconfig.h
+	(FT_MulFix_arm), src/truetype/ttinterp.c (TT_MulFix14_arm): Fix
+	preprocessor conditionals for `add.w'.
+
+2014-01-08  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix Savannah bug #41138, part 1.
+
+	* src/tools/afblue.pl <Handling #endif>: Produce correct auxiliary
+	enumeration names for generated `#else'.
+
+	* src/autofit/afblue.h: Regenerated.
+
+2014-01-06  Werner Lemberg  <wl@gnu.org>
+
+	Add manual page for `freetype-config'.
+	Contributed by Nis Martensen <nis.martensen@web.de>.
+
+	* docs/freetype-config.1: New file.
+
+	* builds/unix/unix-def.in (mandir): Define.
+	* builds/unix/install.mk (install, uninstall): Handle manpage.
+
+2014-01-05  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Minor fixes for `afblue.pl'.
+
+	* src/tools/afblue.pl (aux_name): Don't use `reverse'.
+	<Handling #endif>: Use proper indentation for generated `#else'.
+
+	* src/autofit/afblue.h: Regenerated.
+
+2014-01-04  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix Indic scripts.
+
+	Split the single, incorrect Indic entry into separate scripts so
+	that the covered ranges are the same: Bengali, Devanagari, Gujarati,
+	Gurmukhi, Kannada, Limbu, Malayalam, Oriya, Sinhala, Sundanese,
+	Syloti Nagri, Tamil, Telugu, and Tibetan.  At the same time, remove
+	entries for Meetai Mayak and Sharada – the Unicode ranges were
+	incorrect (and nobody has complained about that), fonts are scarce
+	for those scripts, and the Indic auto-hinter support is rudimentary
+	anyways.
+
+	* src/autofit/afscript.h: Updated, using AF_CONFIG_OPTION_INDIC and
+	AF_CONFIG_OPTION_CJK.
+
+	* src/autofit/afstyles.h (STYLE_DEFAULT_INDIC): New auxiliary macro.
+	Use it, together with AF_CONFIG_OPTION_INDIC and
+	AF_CONFIG_OPTION_CJK, to update.
+
+	* src/autofit/afranges.c [AF_CONFIG_OPTION_INDIC]: Updated.
+	[!AF_CONFIG_OPTION_INDIC, !AF_CONFIG_OPTION_CJK]: Removed.
+	Sort entries by tags.
+
+2014-01-03  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Thinko.
+
+	* src/autofit/hbshim.c (af_get_char_index): Similar to
+	`af_get_coverage', reject glyphs which are not substituted.
+
+2014-01-03  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix handling of default coverages.
+
+	With this commit, the implementation of coverage handling is
+	completed.
+
+	* src/autofit/hbshim.c (af_get_coverage): Exit early if nothing to
+	do.
+	Reject coverages which don't contain appropriate glyphs for blue
+	zones.
+
+2014-01-03  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix handling of default coverages.
+
+	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage):
+	First handle non-default coverages, then the default coverage of the
+	default script, and finally the other default coverages.
+
+2014-01-03  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix scaling of HarfBuzz shaping.
+
+	* src/autofit/hbshim.c (af_get_char_index): Scale to units per EM.
+
+2014-01-03  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Better ftgrid support.
+
+	* src/autofit/afhints.c (af_glyph_hints_get_segment_offset): Add
+	parameters `is_blue' and `blue_offset'.
+
+2014-01-01  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Remove some styles.
+
+	* src/autofit/afcover.h: Remove coverages for alternative fractions,
+	denominators, numerators, and fractions.
+
+	* src/autofit/afstyles.h (META_STYLE_LATIN): Updated.
+
+2014-01-01  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Add more styles.
+
+	* src/autofit/afstyles.h (STYLE_LATIN, META_STYLE_LATIN): New
+	auxiliary macros; use them to define styles for Cyrillic, Greek, and
+	Latin.
+
+	* src/autofit/afcover.h: Remove coverage for oldstyle figures.
+	Since those digits are used in combination with ordinary letters, it
+	makes no sense to handle them separately.
+
+	* src/autofit/afglobal.c (af_face_globals_get_metrics): Don't limit
+	`options' parameter to 4 bits.
+
+2014-01-01  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix style assignments to glyphs.
+
+	* src/autofit/hbshim.c (af_get_coverage)
+	[FT_CONFIG_OPTION_USE_HARFBUZZ]: Scan GPOS coverage of features also
+	so that we can skip glyphs that have both GSUB and GPOS data.
+
+2014-01-01  Werner Lemberg  <wl@gnu.org>
+
+	* src/autofit/hbshim.c: s/{lookups,glyphs}/gsub_{lookups,glyphs}/.
+
+2014-01-01  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Implement and use `af_get_char_index' with HarfBuzz.
+
+	* src/autofit/hbshim.c (COVERAGE) [FT_CONFIG_OPTION_USE_HARFBUZZ]:
+	Redefine to construct HarfBuzz features.
+	(af_get_char_index) [FT_CONFIG_OPTION_USE_HARFBUZZ]: Rewritten.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Use
+	`y_offset' to adjust `best_y'.
+
+2013-12-31  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/AF_STYLE_...._DEFAULT/AF_STYLE_...._DFLT/i.
+
+2013-12-31  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix interface of `af_get_char_index'.
+
+	* src/autofit/hbshim.c (af_get_char_index): Return error value.
+	Add argument for y offset (to be used in a yet-to-come patch).
+
+	* src/autofit/hbshim.h, src/autofit/afcjk.c,
+	src/autofit/aflatin.c: Updated.
+
+2013-12-30  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Don't combine multiple features into one set.
+
+	Combining them, as originally envisioned, would lead to much more
+	complicated code, as investigations have shown meanwhile.  The major
+	drawback is that we run out of available style slots much earlier.
+	However, this is only a theoretical issue since we don't support a
+	large number of scripts currently.
+
+	* src/autofit/afcover.h: Replace `COVERAGE_{1,2,3}' macros with
+	a single-element `COVERAGE' macro, sort the elements by the feature
+	tags, and add entry for `ruby'.
+
+	* src/autofit/aftypes.h: Updated.
+	* src/autofit/hbshim.c: Updated.
+
+2013-12-28  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Code shuffling to reduce use of cpp macros.
+
+	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage):
+	Call `af_get_coverage' unconditionally.
+
+	* src/autofit/autofit.c: Include `hbshim.c' unconditionally.
+
+	* src/autofit/hbshim.c (af_get_coverage)
+	[!FT_CONFIG_OPTION_USE_HARFBUZZ]: Provide dummy function.
+
+	* src/autofit/hbshim.h: Provide function declarations
+	unconditionally.
+
+2013-12-28  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Add wrapper function for `FT_Get_Char_Index'.
+
+	Yet-to-come changes will provide HarfBuzz functionality for the new
+	function.
+
+	* src/autofit/hbshim.c (af_get_char_index): New function.
+	* src/autofit/hbshim.h: Updated.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_widths,
+	af_cjk_metrics_init_blues, af_cjk_metrics_check_digits): Updated.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_widths,
+	af_latin_metrics_init_blues, af_latin_metrics_check_digits):
+	Updated.
+
+2013-12-28  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Use `global' HarfBuzz font object.
+
+	We now use `hb_font' instead of `hb_face' since yet-to-come changes
+	need this.
+
+	* src/autofit/afglobal.h: Include `hbshim.h'.
+	(AF_FaceGlobalsRec) [FT_CONFIG_OPTION_USE_HARFBUZZ]: New member
+	`hb_font'.
+
+	* src/autofit/afglobal.c (af_face_globals_new)
+	[FT_CONFIG_OPTION_USE_HARFBUZZ]: Create `hb_font'.
+	(af_face_globals_free) [FT_CONFIG_OPTION_USE_HARFBUZZ]: Destroy
+	`hb_font'.
+
+	* src/autofit/hbshim.h: Include HarfBuzz headers.
+
+	* src/autofit/hbshim.c: Include `hbshim.h' instead of HarfBuzz
+	headers.
+	(af_get_coverage): Updated.
+
+2013-12-27  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Handle `DFLT' OpenType script for coverages.
+
+	* include/ftautoh.h: Document new `default-script' property.
+
+	* src/autofit/hbshim.c (af_get_coverage): Use `AF_FaceGlobals' for
+	type of first parameter.
+	(script_tags): Add one more element.
+	(af_get_coverage): Adjust `script_tags' to handle `DFLT' script tag.
+
+	* src/autofit/hbshim.h: Updated.
+
+	* src/autofit/afglobal.c (af_face_globals_compute_style_coverage):
+	Updated.
+
+	* src/autofit/afglobal.h (AF_SCRIPT_DEFAULT): New macro.
+
+	* src/autofit/afmodule.h (AF_ModuleRec): New `default_script'
+	member.
+
+	* src/autofit/afmodule.c (af_property_set, af_property_get): Handle
+	`default-script' property.
+	(af_autofitter_init): Updated.
+
+2013-12-27  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	[ftrfork] Fix the face order difference between POSIX and Carbon.
+
+	The fragmented resources in Suitcase and .dfont should be reordered
+	when `POST' resource for Type1 is being restored, but reordering of
+	sfnt resources induces the different face order.  Now the ordering
+	is restricted to `POST' resource only, to prevent the different
+	order issue (e.g. the face index in the fontconfig cache generated
+	with Carbon framework is incompatible with that by FreeType 2
+	without Carbon framework.)  Found by Khaled Hosny and Hin-Tak Leung.
+
+	http://lists.gnu.org/archive/html/freetype-devel/2013-02/msg00035.html
+	http://lists.gnu.org/archive/html/freetype-devel/2013-12/msg00027.html
+
+	* src/base/ftrfork.c (FT_Raccess_Get_DataOffsets): Add a switch
+	`sort_by_res_id' to control the fragmented resource ordering.
+	* include/internal/ftrfork.h: Declare new switch.
+	* src/base/ftobjs.c (IsMacResource): Enable the sorting for `POST'
+	resource, and disable the sorting for `sfnt' resource.
+
+2013-12-25  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #40997.
+
+	* src/bdf/bdfdrivr.c (BDF_Face_Init): Only use OR operator to
+	adjust face flags since FT_FACE_FLAG_EXTERNAL_STREAM might already
+	be set.
+	* src/cff/cffobjs.c (cff_face_init): Ditto.
+	* src/cid/cidobjs.c (cid_face_init): Ditto.
+	* src/pcf/pcfread.c (pcf_load_font): Ditto.
+	* src/pfr/pfrobjs.c (pfr_face_init): Ditto.
+	* src/type1/t1objs.c (T1_Face_Init): Ditto.
+	* src/type42/t42objs.c (T42_Face_Init): Ditto.
+	* src/winfonts/winfnt.c (FNT_Face_Init): Ditto.
+
+2013-12-21  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Introduce `coverages'.
+
+	Coverages are the interface to the HarfBuzz library to acces
+	OpenType features for handling glyphs not addressable by the cmap.
+
+	Right now, compilation of HarfBuzz is only added to the development
+	build.  A solution for standard build mode will be delayed until
+	HarfBuzz gets split into two libraries to avoid mutual dependencies
+	between FreeType and HarfBuzz.
+
+	Note that this is only a first step in handling coverages, basically
+	providing the framework only.  Code for handling selected OpenType
+	features (this is, actually using the data in `afcover.h') will
+	follow.
+
+	* devel/ftoption.h, include/config/ftoption.h
+	(FT_CONFIG_OPTION_USE_HARFBUZZ): New macro.
+
+	* src/autofit/hbshim.c, src/autofit/hbshim.h, src/autofit/afcover.h:
+	New files.
+
+	* src/autofit/afscript.h: Add HarfBuzz script name tags.
+
+	* src/autofit/afstyles.h: Add default coverage enumeration values.
+
+	* src/autofit/aftypes.h: Update use of `SCRIPT' and `STYLE' macros.
+	(AF_Coverage): New enumeration (generated by `afcover.h').
+	(AF_StyleClassRec): New member `coverage'.
+	(AF_DEFINE_STYLE_CLASS): Updated.
+
+	* include/internal/fttrace.h: Add `afharfbuzz' for tracing coverage
+	data.
+
+	* src/autofit/afglobal.h: Update use of `SCRIPT' and `STYLE' macros.
+	(AF_SCRIPT_FALLBACK): Renamed to ...
+	(AF_STYLE_FALLBACK): ... this.
+
+	* src/autofit/afglobal.c: Include `hbshim.c'.
+	Update use of `SCRIPT' and `STYLE' macros.
+	(af_face_globals_compute_style_coverage)
+	[FT_CONFIG_OPTION_USE_HARFBUZZ]: Call `af_get_coverage'.
+	Update.
+
+	* src/autofit/afmodule.h (AF_ModuleRec):
+	s/fallback_script/fallback_style/.
+
+	* src/autofit/afmodule.c (af_property_set): Adapt handling of
+	`fallback-script' property to set a fallback style.
+	(af_property_get, af_autofitter_init): Updated.
+
+	* src/autofit/afpic.c: Update use of `SCRIPT' and `STYLE' macros.
+
+	* src/autofit/afranges.h: Update use of `SCRIPT' macro.
+
+	* src/autofit/autofit.c [FT_CONFIG_OPTION_USE_HARFBUZZ]: Include
+	`hbshim.c'.
+
+	* src/autofit/rules.mk (AUTOF_DRV_SRC): Add `hbshim.c'.
+	(AUTOF_DRV_H): Add `afcover.h'.
+
+	* builds/freetype.mk (INCLUDE_FLAGS) [DEVEL_DIR]: Use pkg-config for
+	all libraries needed by FreeType.
+
+2013-12-21  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #40975 (sort of).
+
+	* src/truetype/ttinterp.c (Ins_IP): Fix sign typo to make FreeType
+	behave the same as the Windows TrueType engine for the invalid case.
+
+2013-12-21  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Make PIC mode work actually.
+
+	* src/autofit/afpic.h (AFModulePIC): Fix array sizes to fit the
+	enumeration values automatically generated by including `afscript.h'
+	and friends.
+
+	* src/autofit/afpic.c (autofit_module_class_pic_init): Updated.
+
+2013-12-21  Werner Lemberg  <wl@gnu.org>
+
+	Fix PIC linking.
+
+	* include/internal/ftrfork.h (CONST_FT_RFORK_RULE_ARRAY_BEGIN): Fix
+	generated function name.
+
+	* src/base/basepic.c (FT_Init_Table_raccess_guess_table): Rename
+	to ...
+	(FT_Init_Table_ft_raccess_guess_table): ... this so that the
+	function name correctly corresponds to what the macro framework
+	expects.
+
+	* src/psnames/rules.mk (PSNAMES_DRV_SRC_S): Use correct file name so
+	that PIC functions are compiled also.
+
+2013-12-21  Werner Lemberg  <wl@gnu.org>
+
+	[base] Add missing dependencies to Makefile.
+
+	* src/base/rules.mk (BASE_SRC): Add `basepic.c' and `ftpic.c'.
+	(BASE_H): Add `basepic.h'.
+
+2013-12-20  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix PIC compilation.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_widths),
+	src/autofit/aflatin.c (af_latin_metrics_init_widths)
+	[FT_CONFIG_OPTION_PIC]: Declare `globals'.
+
+	* src/autofit/afglobal.c: Always call AF_DEFINE_SCRIPT_CLASS, and
+	AF_DEFINE_STYLE_CLASS.
+
+	* src/autofit/afpic.c: Include `afglobal.h'.
+	(autofit_module_class_pic_init): Typo.
+
+	* src/autofit/aftypes.h (AF_DEFINE_SCRIPT_CLASS,
+	AF_DEFINE_STYLE_CLASS): Don't use the same identifier for macro
+	parameter and structure member.
+
+2013-12-20  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Introduce `styles'.
+
+	This is the new top-level structure for handling glyph input data;
+	scripts are now defined separately.
+
+	* src/autofit/aftypes.h (SCRIPT): Updated.
+	(AF_ScriptClassRec): Move `blue_stringset' and `writing_system'
+	members to ...
+	(AF_Style_ClassRec): ... this new structure.
+	(AF_Style): New enumeration.
+	(AF_StyleMetricsRec): Replace `script' enumeration with
+	`style_class' pointer.
+	(AF_DEFINE_SCRIPT_CLASS, AF_DECLARE_SCRIPT_CLASS): Updated.
+	(AF_DEFINE_STYLE_CLASS, AF_DECLARE_STYLE_CLASS): New macros.
+
+	* src/autofit/afstyles.h: New file, using data from `afscript.h'.
+	* src/autofit/afscript.h: Updated.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_widths,
+	af_cjk_metrics_init_blues, af_cjk_hint_edges): Updated.
+
+	* src/autofit/afglobal.c (SCRIPT): Updated.
+	(STYLE): Redefine macro to load `afstyles.h'.
+	(af_script_names) [FT_DEBUG_LEVEL_TRACE]: Replace with...
+	(af_style_names): ... this array.
+	(af_face_globals_compute_script_coverage): Renamed to...
+	(af_face_globals_compute_style_coverage): ... this.
+	Updated.
+	(af_face_globals_new, af_face_globals_free,
+	af_face_globals_get_metrics): Updated.
+
+	* src/autofit/afglobal.h (SCRIPT): Updated.
+	(STYLE): Redefine macro to load `afstyles.h'.
+	(AF_SCRIPT_FALLBACK): Update definition.  This will get more
+	refinements with later on.
+	(AF_SCRIPT_UNASSIGNED): Replace with...
+	(AF_STYLE_UNASSIGNED): ... this macro.
+	(AF_FaceGlobalsRec): Updated.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_widths,
+	af_latin_metrics_init_blues, af_latin_metrics_scale_dim,
+	af_latin_hint_edges): Updated.
+
+	* src/autofit/aflatin2.c (af_latin2_metrics_init_widths): Updated.
+	(af_ltn2_uniranges): Removed.
+
+	* src/autofit/afloader.c (af_loader_load_g, af_loader_load_glyph):
+	Updated.
+
+	* src/autofit/afpic.c (autofit_module_class_pic_init): Updated.
+	* src/autofit/afpic.h (AF_STYLE_CLASSES_GET): New macro.
+	(AFModulePIC): Add `af_style_classes' and `af_style_classes_rec'
+	members.
+
+	* src/autofit/afranges.h: Updated.
+
+	* src/autofit/rules.mk (AUTOF_DRV_H): Add `afstyles.h'.
+
+2013-12-19  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Factor scripts and uniranges out of writing system files.
+
+	* src/autofit/afranges.c, src/autofit/afranges.h: New files.
+
+	* src/autofit/afscript.h: Extend `SCRIPT' macro with more
+	parameters, taking data from the writing system files.
+
+	* src/autofit/aftypes.h: Updated.
+
+	* src/autofit/afglobal.c: Include `afranges.h'.
+	Load `afscript.h' to call AF_DEFINE_SCRIPT_CLASS.
+	* src/autofit/afglobal.c: Include `afranges.h'.
+	Load `afscript.h' to call AF_DECLARE_SCRIPT_CLASS.
+
+	* src/autofit/afcjk.c, src/autofit/afcjk.h: Updated.
+	* src/autofit/afdummy.c, src/autofit/afdummy.h: Updated.
+	* src/autofit/afindic.c, src/autofit/afindic.h: Updated.
+	* src/autofit/aflatin.c, src/autofit/aflatin.h: Updated.
+	* src/autofit/aflatn2.c, src/autofit/aflatn2.h: Updated.
+
+	* src/autofit/afpic.c: Updated.
+
+	* src/autofir/autofit.c: Include `afranges.c'.
+	* src/autofit/rules.mk (AUTOF_DRV_SRC): Add `afranges.c'.
+
+2013-12-18  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] More code orthogonality.
+
+	* src/autofit/aftypes.h (AF_StyleMetrics): Replace `script_class'
+	pointer to an `AF_ScriptClass' structure with `script' index of type
+	`AF_Script'.
+	Move some code around.
+
+	* src/autofit/afcjk.c: Include `afpic.h'.
+	(af_cjk_metrics_init_widths, af_cjk_metrics_init_blues,
+	af_cjk_hint_edges): Updated.
+
+	* src/autofit/aflatin.c: Include `afpic.h'.
+	(af_latin_metrics_init_widths, af_latin_metrics_init_blues,
+	af_latin_metrics_scale_dim, af_latin_hint_edges): Updated.
+
+	* src/autofit/afglobal.c (af_face_globals_get_metrics): Updated.
+
+	* src/autofit/afloader.c (af_loader_load_g, af_loader_load_glyph):
+	Updated.
+
+2013-12-18  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/ScriptMetrics/StyleMetrics/.
+
+2013-12-18  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/script_{metrics,hints}/style_{metrics,hints}/
+
+2013-12-18  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/gscripts/gstyles/.
+
+2013-12-18  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/glyph_scripts/glyph_styles/.
+
+	This is the first commit of a series to create a new top-level
+	structure (a `style') for handling scripts, writing_systems, and
+	soon-to-be-added coverages.
+
+2013-12-17  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/AF_Script_/AF_WritingSystem_/ where appropriate.
+
+2013-12-11  Infinality  <infinality@infinality.net>
+
+	[truetype] Simplify logic of rendering modes.
+
+	This patch unifies the subpixel and non-subpixel cases.
+
+	* src/truetype/ttinterp.h (TT_ExecContextRec): Remove
+	`grayscale_hinting'; all code should refer to `grayscale' instead.
+	Remove unused `native_hinting' member.
+	Rename `subpixel_hinting' member to `subpixel.
+
+	* src/truetype/ttgload.c (TT_LOADER_SET_PP): Updated.
+	(tt_loader_init): Updated.
+
+	* src/truetype/ttinterp.c (Ins_GETINFO): Simplify.
+	Updated.
+
+2013-12-11  Werner Lemberg  <wl@gnu.org>
+
+	[documentation] Add section how to include FreeType header files.
+	Problem reported by David Kastrup <dak@gnu.org>.
+
+	Surprisingly, a description how to do that was completely missing in
+	the API reference.
+
+	* include/freetype.h, include/ftchapters.h: New documentation
+	section `header_inclusion'.
+
+2013-12-10  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/DFLT/NONE/, s/dflt/none/.
+
+2013-12-10  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/AF_SCRIPT_NONE/AF_SCRIPT_UNASSIGNED/.
+
+2013-12-10  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix scaling of vertical phantom points.
+
+	* src/truetype/ttgload.c (load_truetype_glyph): Scale pp3.x and
+	pp4.x also.
+
+2013-12-10  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix positioning of composite glyphs.
+	Problem reported by Nigel Tao <nigeltao@golang.org>.
+
+	* src/truetype/ttgload.c (TT_Hint_Glyph): Remove code that shifts
+	the glyph (component) by a fractional value computed from the LSB
+	phantom point.  This is wrong, since the horizontal phantom points
+	get rounded horizontally later on.
+
+2013-12-08  Werner Lemberg  <wl@gnu.org>
+
+	* Version 2.5.2 released.
+	=========================
+
+
+	Tag sources with `VER-2-5-2'.
+
+	* docs/VERSION.DLL: Update documentation and bump version number to
+	2.5.2.
+
+	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
+	builds/windows/vc2005/index.html,
+	builds/windows/vc2008/freetype.vcproj,
+	builds/windows/vc2008/index.html,
+	builds/windows/vc2010/freetype.vcxproj,
+	builds/windows/vc2010/index.html,
+	builds/windows/visualc/freetype.dsp,
+	builds/windows/visualc/freetype.vcproj,
+	builds/windows/visualc/index.html,
+	builds/windows/visualce/freetype.dsp,
+	builds/windows/visualce/freetype.vcproj,
+	builds/windows/visualce/index.html,
+	builds/wince/vc2005-ce/freetype.vcproj,
+	builds/wince/vc2005-ce/index.html,
+	builds/wince/vc2008-ce/freetype.vcproj,
+	builds/wince/vc2008-ce/index.html: s/2.5.1/2.5.2/, s/251/252/.
+
+	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 2.
+
+	* builds/unix/configure.raw (version_info): Set to 17:1:11.
+	* CMakeLists.txt (VERSION_PATCH): Set to 2.
+	* docs/CHANGES: Updated.
+
+2013-12-07  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Next round in phantom point handling.
+
+	Greg Hitchcock provided very interesting insights into the
+	complicated history of the horizontal positions of the TSB and BSB
+	phantom points.
+
+	* src/truetype/ttgload.c (TT_LOADER_SET_PP)
+	[TT_CONFIG_OPTION_SUBPIXEL_HINTING]: Use `subpixel_hinting' and
+	`grayscale_hinting' flags as conditionals for the x position of TSB
+	and BSB.
+
+2013-12-05  Werner Lemberg  <wl@gnu.org>
+
+	* builds/freetype.mk (FT_CC): Removed.  Unused.
+
+2013-12-04  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix handling of embedded bitmap strikes.
+
+	This corrects the commit from 2013-11-21.  Problem reported by
+	Andrey Panov <panov@canopus.iacp.dvo.ru>.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap): Fix logic to
+	detect excessive bytes for bit-aligned bitmaps.
+
+2013-12-03  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Remove dead code.
+
+	Reported by Nigel Tao <nigeltao@golang.org>.
+
+	* include/internal/tttypes.h (TT_LoaderRec): Remove unused
+	`preserve_pps' field.
+	* src/truetype/ttgload.c (TT_Hint_Glyph): Updated.
+
+2013-12-03  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix phantom point handling.
+
+	This is a further improvement to the changes from 2013-11-06.
+
+	* src/truetype/ttgload.c (TT_Hint_Glyph): Horizontal phantom points
+	are rounded horizontally, vertical ones are rounded vertically.
+	(TT_LOADER_SET_PP): The horizontal position of vertical phantom
+	points in pre-ClearType mode is zero, as shown in the OpenType
+	specification.
+
+2013-12-02  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix change from 2013-11-20.
+
+	Problem reported by Akira Kakuto <kakuto@fuk.kindai.ac.jp>.
+
+	* src/truetype/ttgload.c (TT_Load_Simple_Glyph): Protect call to
+	`Update_Max' with both a TT_USE_BYTECODE_INTERPRETER guard and a
+	`IS_HINTED' clause.
+	Also remove redundant check using `maxSizeOfInstructions' – in
+	simple glyphs, the bytecode data comes before the outline data, and
+	a validity test for this is already present.
+
+2013-11-27  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix use of dumping functions in `ftgrid' demo program.
+
+	* src/autofit/afhints.c (AF_DUMP) [FT_DEBUG_AUTOFIT]: New macro.
+	(af_glyph_hints_dump_points, af_glyph_hints_dump_segments,
+	af_glyph_hints_dump_edges) [FT_DEBUG_AUTOFIT]: Add parameter to
+	handle output to stdout.
+	Use AF_DUMP.
+	(af_glyph_hints_dump_points, af_glyph_hints_dump_segments,
+	af_glyph_hints_dump_edges) [!FT_DEBUG_AUTOFIT]: Removed.
+
+2013-11-25  Werner Lemberg  <wl@gnu.org>
+
+	* Version 2.5.1 released.
+	=========================
+
+
+	Tag sources with `VER-2-5-1'.
+
+	* docs/VERSION.DLL: Update documentation and bump version number to
+	2.5.1.
+
+	* README, Jamfile (RefDoc), builds/windows/vc2005/freetype.vcproj,
+	builds/windows/vc2005/index.html,
+	builds/windows/vc2008/freetype.vcproj,
+	builds/windows/vc2008/index.html,
+	builds/windows/vc2010/freetype.vcxproj,
+	builds/windows/vc2010/index.html,
+	builds/windows/visualc/freetype.dsp,
+	builds/windows/visualc/freetype.vcproj,
+	builds/windows/visualc/index.html,
+	builds/windows/visualce/freetype.dsp,
+	builds/windows/visualce/freetype.vcproj,
+	builds/windows/visualce/index.html,
+	builds/wince/vc2005-ce/freetype.vcproj,
+	builds/wince/vc2005-ce/index.html,
+	builds/wince/vc2008-ce/freetype.vcproj,
+	builds/wince/vc2008-ce/index.html: s/2.5.0/2.5.1/, s/250/251/.
+
+	* include/freetype/freetype.h (FREETYPE_PATCH): Set to 1.
+
+	* builds/unix/configure.raw (version_info): Set to 17:0:11.
+	* CMakeLists.txt (VERSION_PATCH): Set to 1.
+	* docs/CHANGES, docs/release: Updated.
+
+2013-11-23  Werner Lemberg  <wl@gnu.org>
+
+	[truetype]: Add tricky font names `hkscsiic.ttf' and `iicore.ttf'.
+
+	* src/truetype/ttobjs.c (TRICK_NAMES_MAX_CHARACTERS,
+	TRICK_NAMES_COUNT): Updated.
+	(trick_names): Add family name for the two fonts.
+
+2013-11-23  Werner Lemberg  <wl@gnu.org>
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap): Typo.
+
+2013-11-21  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Typo.
+
+	Problem reported by Hin-Tak Leung <htl10@users.sourceforge.net>.
+
+	* src/sfnt/sfobjs.c (sfnt_load_face): Return correct `bsize->width'
+	value if the font lacks an `OS/2' table.
+
+2013-11-21  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Improve handling of buggy embedded bitmap strikes.
+
+	We are now able to successfully load `AppleMyoungJo.ttf'.
+	Problem reported by Hin-Tak Leung <htl10@users.sourceforge.net>.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap): Don't trust glyph
+	format.
+
+2013-11-20  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Don't trust `maxp's `maxSizeOfInstructions'.
+
+	Problem reported by Hin-Tak Leung <htl10@users.sourceforge.net>; see
+
+	  http://lists.nongnu.org/archive/html/freetype-devel/2013-08/msg00005.html
+
+	for details.
+
+	* src/base/ftobjs.c (FT_Load_Glyph): Check size of `fpgm' and `prep'
+	tables also for setting `autohint'.
+
+	* src/truetype/ttgload.c (TT_Load_Simple_Glyph): Use code from
+	`TT_Process_Composite_Glyph' for handling unreliable values of
+	`maxSizeOfInstructions'.
+
+2013-11-16  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix `OS/2' table version 5 support.
+
+	We now follow the `official' announcement from Microsoft (on the
+	OpenType mailing list, which unfortunately hasn't a public archive).
+
+	* include/freetype/tttables.h (TT_OS2):
+	s/usLowerPointSize/usLowerOpticalPointSize/,
+	s/usUpperPointSize/usUpperOpticalPointSize/.
+
+	* src/sfnt/ttload.c (tt_face_load_os2): Update, and set correct
+	default values.
+
+2013-11-13  Werner Lemberg  <wl@gnu.org>
+
+	* builds/unix/ft2unix.h: Remove.  No longer necessary.
+
+	* builds/unix/install.mk (install): Updated.
+
+2013-11-13  Werner Lemberg  <wl@gnu.org>
+
+	Simplify header file hierarchy.
+
+	This large patch changes the header file directory layout from
+	`include/freetype/...' to `include/...', effectively removing one
+	level.  Since the file `ft2build.h' is also located in `include'
+	(and it stays there even after installation), all FreeType header
+	files are now in a single directory.
+
+	Applications that use (a) `freetype-config' or FreeType's
+	`pkg-config' file to get the include directory for the compiler, and
+	(b) the documented way for header inclusion like
+
+	  #include <ft2build.h>
+	  #include FT_FREETYPE_H
+	  ...
+
+	don't need any change to the source code.
+
+	* include/freetype/*: Move up to...
+	* include/*: ... this directory.
+
+	* builds/amiga/include/freetype/*: Move up to...
+	* builds/amiga/include/*: ... this directory.
+
+	*/*: Essentially do `s@/freetype/@/@' where appropriate.
+
+	* CMakeList.txt: Simplify.
+	* builds/unix/freetype-config.in, builds/unix/freetype2.in: For
+	`--cflags', return a single directory.
+	* builds/unix/install.mk (install): No longer try to remove `cache'
+	and `internal' subdirectories; instead, remove the `freetype'
+	subdirectory.
+
+2013-11-12  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix last `truetype' commit.
+
+	* src/truetype/ttgload.c (tt_get_metrics): Preserve stream position.
+	Return error value.
+	(load_truetype_glyph): Updated.
+
+2013-11-10  Werner Lemberg  <wl@gnu.org>
+
+	* docs/CMAKE: New dummy file.
+
+2013-11-08  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Fix for hints that touch.
+
+	* src/cff/cf2hints.c (cf2_hintmap_insertHint): Fix condition for
+	finding index value of insertion point.
+
+2013-11-06  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix handling of phantom points in composite glyphs.
+	Problem reported by Nigel Tao <nigeltao@golang.org>.
+
+	This is a follow-up commit to the previous one.
+
+	* src/truetype/ttgload.c (load_truetype_glyph): Call
+	`tt_get_metrics' after loading the glyph header.
+
+2013-11-06  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Improve emulation of vertical metrics.
+
+	This commit also improves the start values of vertical phantom
+	points.  Kudos to Greg Hitchcock for help.
+
+	* src/truetype/ttgload.c (TT_Get_VMetrics): Add parameter to pass
+	`yMax' value.  Replace code with fixed Microsoft definition.
+	(tt_get_metrics): Updated.
+	(TT_LOADER_SET_PP): Add explanation how to initialize phantom
+	points, taken from both the OpenType specification and private
+	communication with Greg (which will eventually be added to the
+	standard).
+	Fix horizontal position of `pp3' and `pp4'.
+
+	* src/truetype/ttgload.h: Updated.
+
+	* src/truetype/ttdriver.c (tt_get_advances): Updated.
+
+	* docs/CHANGES: Updated.
+
+2013-11-05  Werner Lemberg  <wl@gnu.org>
+
+	* builds/windows/vc2010/freetype.vcxproj: s/v110/v100/.
+	PlatformToolSet version 110 is for VC2012.
+
+	Problem reported (with solution) by Dave Arnold <darnold@adobe.com>.
+
+2013-11-05  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Correctly reset point tags for glyph components.
+	Problem reported by Nigel Tao <nigeltao@golang.org>.
+
+	* src/truetype/ttgload.c (TT_Process_Composite_Glyph): Fix loop.
+
+2013-11-02  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix GETINFO opcode handling of subpixel hinting bits.
+
+	* src/truetype/ttinterp.c (Ins_GETINFO): Don't request bit 6 set to
+	get info on subpixel hinting.
+
+	* docs/CHANGES: Updated.
+
+2013-11-02  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #40451.
+
+	Simply apply the patch from the bug report.
+
+	* builds/unix/ftconfig.in, builds/vms/ftconfig.h,
+	include/freetype/config/ftconfig.h: The used #pragma directives only
+	work with gcc versions 4.6 and higher.
+
+2013-11-01  Werner Lemberg  <wl@gnu.org>
+
+	* docs/CHANGES: Updated.
+
+2013-11-01  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Minor code refactoring.
+
+	Two benefits: The allocated FDEF (and IDEF) array gets slightly
+	smaller, and the `ttdebug' demo program has access to function
+	numbers without additional costs.
+
+	Fortunately, no changes to FontForge are necessary – this is the
+	only external TrueType debugger I know of, but others may exist and
+	should check the code accordingly.
+
+	* src/truetype/ttinterp.h (TT_CallRec): Replace `Cur_Restart' and
+	`Cur_End' with a pointer to the corresponding `TT_DefRecord'
+	structure.
+
+	* src/truetype/ttinterp.c (DO_JROT, DO_JMPR, DO_JROF, Ins_ENDF,
+	Ins_CALL, Ins_LOOPCALL, Ins_UNKNOWN, TT_RunIns <Invalid_Opcode>):
+	Updated.
+
+2013-10-27  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Implement support for `OS/2' table version 5.
+
+	See
+
+	  http://typedrawers.com/discussion/470/new-microsoft-size-specific-design-selection-mechanism
+
+	for the announcement.
+
+	* include/freetype/tttables.h (TT_OS2): Add fields
+	`usLowerPointSize' and `usUpperPointSize'.  Since FreeType returns
+	this structure only as a pointer through `FT_Get_Sfnt_Table', there
+	shouldn't be any ABI problems.
+
+	* src/sfnt/ttload.c (tt_face_load_os2): Implement it.
+
+	* docs/CHANGES: Updated.
+
+2013-10-24  Werner Lemberg  <wl@gnu.org>
+
+	* README.git, docs/CHANGES, docs/INSTALL: Updated.
+
+2013-10-24  John Cary  <cary@txcorp.com>
+
+	Provide cmake support.
+
+	* CMakeLists.txt: New file.
+
+2013-10-23  Kenneth Miller  <kennethadammiller@yahoo.com>
+	    Werner Lemberg  <wl@gnu.org>
+
+	Provide support for x64 builds in Visual C++ project files.
+
+	* src/builds/win32: Renamed to...
+	* src/builds/windows: This.
+
+	* src/builds/windows/vc2010/*: Updated to handle x64 target.
+
+	* src/builds/windows/*.mk, docs/INSTALL.GNU: s/win32/windows/ where
+	appropriate.
+
+2013-10-22  Werner Lemberg  <wl@gnu.org>
+
+	* src/base/md5.c, src/base/md5.h: Updated to recent version.
+
+	* src/base/ftobjs.c: Updated; `md5.c' no longer uses `free'.
+
+	The canonical URL to get updates for this file is
+
+	  http://cvsweb.openwall.com/cgi/cvsweb.cgi/Owl/packages/popa3d/popa3d/md5/
+
+	as the author told me in private communication.
+
+2013-10-19  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] s/SMALL_TOP/X_HEIGHT/.
+
+	* src/autofit/afblue.dat: Updated.
+
+	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
+
+	* src/autofit/aflatin.c, src/autofit/aflatin.h,
+	src/autofit/atlatin2.c: Updated.
+
+2013-10-19  Werner Lemberg  <wl@gnu.org>
+
+	* src/autofit/afblue.dat: s/MINOR/DESCENDER/.
+
+	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
+
+2013-10-16  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Add description strings to script entries.
+
+	Currently, this is unused.
+
+	* src/autofit/afscript.h: Do it.
+	* src/autofit/afglobal.c, src/autofit/afpic.c,
+	src/autofit/aftypes.h: Updated.
+
+2013-10-16  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve tracing message for extra light flag.
+
+	* src/autofit/aflatin.c (af_latin_metrics_scale_dim): Do it.
+
+2013-10-15  Chongyu Zhu  <lembacon@gmail.com>
+
+	[arm] Fix thumb2 inline assembly under LLVM.
+
+	When using `ADD' with an immediate operand, the instruction is
+	actually `ADD Rd, Rn, #<imm12>', that is, the maximum of the
+	immediate operand cannot exceed 4095.  It will fail to compile with
+	LLVM.
+
+	However, in GCC, due to some legacy compatibility considerations,
+	`ADD.W' will be automatically emitted when the immediate operand is
+	larger than 4095.
+
+	* builds/unix/ftconfig.in, include/freetype/config/ftconfig.h
+	(FT_MulFix_arm) [__GNUC__]: Support clang compiler.
+
+	* src/truetype/ttinterp.c (TT_MulFix14_arm) [__GNUC__]: Ditto.
+
+2013-10-12  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve tracing of `latin' hinter.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Report blue
+	zone types.
+	(af_latin_metrics_scale_dim): Report scaling changes due to x height
+	alignment.
+	Report scaled stroke width and blue zone values.
+
+2013-10-03  Dave Arnold  <darnold@adobe.com>
+
+	* src/cff/cf2font.c (cf2_computeDarkening): Avoid division by zero.
+
+	Note that the old code avoided using a region of the piecewise
+	linear function where the slope was zero.  The recovery was to use a
+	different section of the function, which produced a different,
+	incorrect amount of darkening.
+
+2013-10-02  Darrell Bellert  <darrell.bellert@hl.konicaminolta.us>
+
+	* src/sfnt/ttload.c (tt_face_load_pclt): Fix `pclt_fields'.
+
+2013-10-02  Dave Arnold  <darnold@adobe.com>
+
+	* src/cff/cf2font.c (cf2_computeDarkening): Initialize darkenAmount.
+
+	This line was lost in commit 89ca1fd6 (from 2013-06-25).  The effect
+	is to use a previous darkening amount when producing an unhinted,
+	unscaled outline.  This can cause autohint samples in ftgrid and
+	ftview to be based on darkened CFF outlines instead of unhinted,
+	undarkened ones.
+
+2013-09-29  Dave Arnold  <darnold@adobe.com>
+
+	Fix Savannah bug #39295.
+
+	The bug was caused by switching to the initial hintmap (the one in
+	effect when `moveto' executes) just before drawing the final element
+	in the charstring.  This ensured that the path was closed (in both
+	Character Space and Device Space).  But if the final element was a
+	curve and if the final hintmap was different enough from the initial
+	one, then the curve was visibly distorted.
+
+	The first part of the fix is to draw the final curve using the final
+	hintmap as specified by the charstring.  This corrects the
+	distortion but does not ensure closing in Device Space.  It may
+	require the rasterizer to automatically generate an extra closing
+	line.  Depending on the hintmap differences, this line could be from
+	zero to a couple pixels in length.
+
+	The second part of the fix covers the case where the charstring
+	subpath is closed with an explicit line.  We now modify that line's
+	end point to avoid the distortion.
+
+	Some glyphs in the bug report font (TexGyreHeros-Regular) that show
+	the change are:
+
+	  25ppem    S (98)
+	  24ppem    eight (52)
+	  25.5ppem  p (85)
+
+	Curves at the *end* of a subpath are no longer distorted.  However,
+	some of these glyphs have bad hint substitutions in the middle of a
+	subpath, and these are not affected.
+
+	The patch has been tested with a set of 106 fonts that shipped with
+	Adobe Creative Suite 4, together with 756 Open Source CFF fonts from
+	Google Fonts.  There are 1.5 million glyphs, of which some 20k are
+	changed with the fix.  A sampling of a few hundred of these changes
+	have been examined more closely, and the changes look good (or at
+	least acceptable).
+
+	* src/cff/cf2hints.h (CF2_GlyphPathRec): New element `pathIsClosing'
+	to indicate that we synthesize a closepath line.
+
+	* src/cff/cf2hints.c (cf2_glyphpath_init): Updated.
+	(cf2_glyphpath_pushPrevElem): If closing, use first hint map (for
+	`lineto' operator) and adjust hint zone.
+	For synthesized closing lines, use end point in first hint zone.
+	(cf2_glyphpath_lineTo): Take care of synthesized closing lines.  In
+	particular, shift the detection of zero-length lines from character
+	space to device space.
+	(cf2_glyphpath_closeOpenPath): Remove assertion.
+	Updated.
+
+2013-09-25  Werner Lemberg  <wl@gnu.org>
+
+	* src/autofit/aflatin.c (af_{grek,cyrl}_uniranges): Fix arrays.
+
+2013-09-25  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	[bdf, pcf] Refuse non-zero face_index.
+
+	Suggested by Akira Tagoh, see
+
+	  http://lists.gnu.org/archive/html/freetype/2013-09/msg00030.html
+
+	* src/bdf/bdfdrivr.c (BDF_Face_Init): Return `Invalid_Argument'
+	error if the font could be opened but non-zero `face_index' is
+	given.
+	* src/pcf/pcfdrivr.c (PCF_Face_Init): Ditto.
+
+	* src/type42/t42objs.c (T42_Face_Init): Remove unrequired FT_UNUSED
+	macro for `face_index' because it is validated later.
+
+2013-09-23  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #40090.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_scale): Revert commit
+	306f8c5d (from 2013-08-25) affecting this function.
+
+2013-09-22  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Disunify Cyrillic and Greek handling from Latin.
+
+	* src/autofit/afscript.h: Add Cyrillic and Greek.
+
+	* src/autofit/afblue.dat (AF_BLUE_STRINGSET_GREK,
+	AF_BLUE_STRINGSET_CYRL): Add blue zones for Greek and Cyrillic.
+	(AF_BLUE_STRINGSET_LATN): Fix typo.
+	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
+
+	* src/autofit/aflatin.c (af_grek_uniranges, af_cyrl_uniranges): New
+	arrays.
+	(af_grek_script_class, af_cyrl_script_class): New scripts.
+	* src/autofit/aflatin.h: Updated.
+
+2013-09-20  Werner Lemberg  <wl@gnu.org>
+
+	* docs/CHANGES: Updated.
+
+2013-09-20  Behdad Esfahbod  <behdad@behdad.org>
+
+	Fix vertical size of emboldened glyphs.
+
+	Cf. https://bugzilla.gnome.org/show_bug.cgi?id=686709
+
+	* src/base/ftsynth.c (FT_GlyphSlot_Embolden): Adjust `horiBearingY'
+	also.
+
+2013-09-11  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	* include/freetype/ftoutln.h: Correct FT_Outline_Get_Orientation
+	algorithm description.
+
+2013-09-11  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve Hebrew rendering.
+
+	This change introduces a new blue zone property
+	`AF_BLUE_PROPERTY_LATIN_LONG' to make the auto-hinter ignore short
+	top segments.
+
+	* src/autofit/afblue.dat: Fix Hebrew blue strings.
+	Use AF_BLUE_PROPERTY_LATIN_LONG for AF_BLUE_STRING_HEBREW_TOP.
+
+	* src/autofit/afblue.hin (AF_BLUE_PROPERTY_LATIN_LONG): New macro.
+
+	* src/autofit/afblue.c, src/autofit/afblue.h: Updated.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Handle
+	`AF_LATIN_IS_LONG_BLUE'.
+
+	* src/autofit/aflatin.h (AF_LATIN_IS_LONG_BLUE): New macro.
+
+2013-08-28  Behdad Esfahbod  <behdad@google.com>
+
+	[sfnt] Fix frame access while reading WOFF table directory.
+
+	* src/sfnt/sfobjs.c (woff_open_font): Using single memory frame
+	while reading the directory entries for the whole loop.
+
+2013-08-29  Werner Lemberg  <wl@gnu.org>
+            Behdad Esfahbod  <behdad@google.com>
+
+	Implement support for WOFF containers.
+
+	We simply synthesize a SFNT from the WOFF, create a memory stream
+	for the new data, and load the SFNT as usual.
+
+	Does NOT add any API to access WOFF metadata or private blocks.
+
+	* include/freetype/internal/tttypes.h (WOFF_HeaderRec,
+	WOFF_TableRec): New structures.
+
+	* include/freetype/tttags.h (TTAG_wOFF): New macro.
+
+	* src/base/ftobjs.c (FT_Open_Face): Set `stream' after calling
+	`open_face'.
+
+	* src/sfnt/sfobjs.c [FT_CONFIG_OPTION_SYSTEM_ZLIB]: Include
+	`FT_GZIP_H'.
+	(WRITE_BYTE, WRITE_USHORT, WRITE_ULONG): New temporary macros for
+	writing to a stream.
+	(sfnt_stream_close, compare_offsets, woff_open_font): New functions.
+	(sfnt_open_font): Handle `TTAG_wOFF'.
+	(sfnt_init_face): Set `stream' after calling `sfnt_open_font'.
+
+	* src/truetype/ttobjs.c (tt_face_init): Set `stream' after calling
+	`sfnt->init_face'.
+
+	* src/base/ftobjs.c (open_face): Use a pointer to FT_Stream as an
+	argument so that a changed stream survives.
+	Update callers.
+
+2013-08-28  Werner Lemberg  <wl@gnu.org>
+
+	[gzip] New function `FT_Gzip_Uncompress'.
+
+	This is modeled after zlib's `uncompress' function.  We need this
+	for WOFF support.
+
+	* include/freetype/ftgzip.h, src/gzip/ftgzip.c (FT_Gzip_Uncompress):
+	New function.
+
+	* src/gzip/rules.mk: Rewrite to better reflect dependencies.
+
+2013-08-28  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix `make multi' compilation.
+
+	* src/autofit/afblue.cin, src/autofit/afblue.c: Don't include
+	`afblue.h' but `aftypes.h'.
+	* src/autofit/afcjk.c: Don't include `aftypes.h' but `afglobal.h'.
+
+2013-08-28  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix C++ compilation.
+
+	* src/autofit/afglobal.c (af_face_globals_get_metrics),
+	src/autofit/afdummy.c (af_dflt_script_class), src/autofit/afindic.c
+	(af_deva_script_class): Use proper casts.
+
+2013-08-27  Behdad Esfahbod  <behdad@google.com>
+
+	* src/sfnt/ttload.c (tt_face_load_font_dir): Fix sign typos.
+
+2013-08-27  Behdad Esfahbod  <behdad@google.com>
+
+	FT_Open_Face: Improve external stream handling.
+
+	If the font's `clazz->init_face' function wants to swap to new
+	stream, handling of whether original stream was external could
+	result to either memory leak or double free.  Mark externality into
+	face flags before calling `init_face' such that the clazz can handle
+	external streams properly.
+
+	* src/base/ftobjs.c (FT_Open_Face): Move code to set
+	FT_FACE_FLAG_EXTERNAL_STREAM to...
+	(open_face): This function.
+
+2013-08-27  Werner Lemberg  <wl@gnu.org>
+
+	Remove `FT_SqrtFixed' function.
+
+	It's no longer used.
+
+	* include/freetype/internal/ftcalc.h, src/base/ftcalc.c: Do it.
+
+2013-08-27  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] While tracing, report script names instead of ID values.
+
+	* src/autofit/afglobal.c (af_script_names) [FT_DEBUG_LEVEL_TRACE]:
+	New array.
+	* src/autofit/afglobal.h: Updated.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_widths,
+	af_cjk_hint_edges): Use `af_script_names'.
+	* src/autofit/aflatin.c (af_latin_metrics_init_widths,
+	af_latin_hint_edges): Ditto.
+
+2013-08-26  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Report used script while hinting a glyph.
+
+	* src/autofit/afcjk.c (af_cjk_hint_edges), src/autofit/aflatin.c
+	(af_latin_hint_edges): Implement it.
+
+2013-08-26  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Add support for Hebrew script.
+
+	* src/autofit/afblue.dat: Add blue strings for Hebrew.
+	* src/autofit/afblue.c, src/autofit/afblue.h: Regenerated.
+
+	* src/autofit/aflatin.c (af_hebr_uniranges): New array.
+	(af_hebr_script_class): New script.
+	* src/autofit/aflatin.h, src/autofit/afscript.h: Updated.
+
+2013-08-26  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve tracing messages.
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_widths): Mention script
+	ID in tracing message.
+	(af_cjk_metrics_init_blues): Initialize `axis' outside of the inner
+	loop.
+	Improve tracing messages.
+	(af_cjk_hint_edges) [FT_DEBUG_LEVEL_TRACE]: New variable
+	`num_actions' to count hinting actions.
+	Improve tracing messages.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_widths): Mention
+	script ID in tracing message.
+	(af_latin_metrics_init_blues, af_latin_hint_edges): Improve tracing
+	messages.
+
+2013-08-26  Werner Lemberg  <wl@gnu.org>
+
+	Better tracing of loaded glyphs.
+
+	Previously, the loading of a glyph was traced at level 4, if at all.
+	With this change, all font loading routines emit a tracing message
+	at level 1, making it easier to select tracing output (for example
+	using F2_DEBUG="any:1 afhints:7 aflatin:7").
+
+	* src/bdf/bdfdrivr.c (BDF_Glyph_Load): Add tracing message.
+	* src/cff/cffdrivr.c (cff_glyph_load): Ditto.
+	* src/cff/cffgload.c (cff_decoder_prepare): Improve tracing
+	messages.
+	* src/cid/cidgload.c (cid_load_glyph): Use level 1 for tracing
+	message.
+	* src/pcf/pcfdrivr.c (PCF_Glyph_Load): Ditto.
+	* src/pfr/pfrobjs.c (pfr_slot_load): Add tracing message.
+	* src/truetype/ttgload.c (TT_Load_Glyph): Ditto.
+	* src/type1/t1gload.c (T1_Load_Glyph): Ditto.
+	* src/type42/t42objs.c (T42_GlyphSlot_Load): Ditto.
+	* src/winfonts/winfnt.c (FNT_Load_Glyph): Ditto.
+
+2013-08-26  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix script selection.
+
+	* src/autofit/afglobal.c (af_face_globals_get_metrics): Use
+	`AF_SCRIPT_DFLT', not value 0.
+	Simplify code.
+
+	* src/autofit/afscript.h: Sort by script name.
+
+2013-08-26  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Make `dummy' hinter work as expected.
+
+	* src/autofit/afdummy.c (af_dummy_hints_init): Properly set scaling
+	information.
+	(af_dummy_hints_apply): Scale the glyphs.
+
+2013-08-25  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Make `cjk' module use blue stringsets.
+
+	* src/autofit/afcjk.c (AF_CJK_MAX_TEST_CHARACTERS): Removed.
+	(af_cjk_hani_blue_chars): Removed.
+	(AF_CJK_BLUE_TYPE_*): Removed.
+	(af_cjk_metrics_init_blues): Replace AF_CJK_MAX_TEST_CHARACTERS with
+	AF_BLUE_STRING_MAX_LEN.
+	Change loops to use offsets (in file `afblue.h') into the new arrays
+	`af_blue_stringsets' and `af_blue_strings' (in file `afblue.c').
+	Instead of three dimensions (as used in the old blue string array)
+	we now use properties to do the same, saving one loop nesting level.
+
+	* src/autofit/afcjk.h: Remove old enumeration values superseded by
+	the new data in `afblue.h'.
+	(AF_CJK_IS_TOP_BLUE, AF_CJK_IS_HORIZ_BLUE, AF_CJK_IS_FILLED_BLUE,
+	AF_CJK_IS_RIGHT_BLUE): New macros, to be used in
+	`af_cjk_metrics_init_blues'.
+	(AF_CJK_BLUE_IS_RIGHT): Remove this now redundant enum value.
+	(AF_CJK_BLUE_IS_TOP): Renamed to...
+	(AF_CJK_BLUE_TOP): This.
+	(AF_CJK_MAX_BLUES): Remove.
+	(AF_CJKAxisRec): Updated.
+
+2013-08-25  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Typo.
+
+	* src/autofit/afblue.hin, src/autofit/afblue.c (GET_UTF8_CHAR): Use
+	cast.
+
+2013-08-25  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Synchronize `cjk' with `latin' module (and vice versa).
+
+	* src/autofit/afcjk.c (af_cjk_metrics_init_widths): Add tracing
+	messages.
+	(af_cjk_metrics_init_blues): Don't pass blue string array as
+	argument but use the global array directly.
+	Use `outline' directly.
+	Update and add tracing messages.
+	(af_cjk_metrics_init): Simplify code.
+	(af_cjk_metrics_scale_dim): Improve tracing message.
+	(af_cjk_metrics_scale): Synchronize.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_widths,
+	af_latin_metrics_init_blues): Improve and add tracing messages.
+
+2013-08-25  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Make `latin' module use blue stringsets.
+
+	* src/autofit/aflatin.c (AF_LATIN_MAX_TEST_CHARACTERS): Removed.
+	(af_latin_blue_chars): Removed.
+	(af_latin_metrics_init_blues): Replace AF_LATIN_MAX_TEST_CHARACTERS
+	with AF_BLUE_STRING_MAX_LEN.
+	Change loops to use offsets (in file `afblue.h') into the new arrays
+	`af_blue_stringsets' and `af_blue_strings' (in file `afblue.c').
+	Use `AF_LATIN_IS_SMALL_TOP_BLUE' macro.
+
+	* src/autofit/aflatin.h: Remove old enumeration values superseded by
+	the new data in `afblue.h'.
+	(AF_LATIN_IS_TOP_BLUE): Updated definition.
+	(AF_LATIN_IS_SMALL_TOP_BLUE): New macro.
+	(AF_LATIN_MAX_BLUES): Remove.
+	(AF_LatinAxisRec): Updated.
+
+2013-08-25  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Add blue stringsets.
+
+	* src/autofit/aftypes.h: Include `afblue.h'.
+	(AF_ScriptClassRec): Add `blue_stringset' field.
+	(AF_DEFINE_SCRIPT_CLASS): Updated.
+
+	* src/autofit/autofit.c: Include `afblue.c'.
+
+	* src/autofit/afcjk.c (af_hani_script_class), src/autofit/afdummy.c
+	(af_dflt_script_class), src/autofit/afindic.c
+	(af_deva_script_class), src/autofit/aflatin.c
+	(af_latn_script_class), src/autofit/aflatin2.c
+	(af_ltn2_script_class): Updated.
+
+	* src/autofit/rules.mk (AUTOF_DRV_SRC): Add `afblue.c'.
+
+2013-08-25  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Introduce data file for blue strings.
+
+	The idea is to have a central file which gets processed by a Perl
+	script to create proper `.c' and `.h' files using templates.  There
+	are two other reasons to do that:
+
+	  . The data file should be easily readable.  We use UTF-8 encoding
+	    which then gets converted to single bytes.
+
+	  . Since the number of supported scripts will increase soon, the
+	    current usage of blue string arrays is a waste of space.  Using
+	    the Perl script it is possible to imitate jagged arrays,
+	    defining enumeration constants as offsets into the arrays.
+
+	This commit only adds files without changing any functionality.
+
+	* src/autofit/afblue.dat: New data file.
+	* src/tools/afblue.pl: New Perl script for processing `afblue.dat'.
+
+	* src/autofit/afblue.cin, src/autofit/afblue.hin: New template files
+	for...
+	* src/autofit/afblue.c, src/autofit/afblue.c: New source files.
+	To avoid a dependency on Perl, we add them too.
+
+2013-08-19  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Enable new algorithm for `BBox_Cubic_Check'.
+
+	* src/base/ftbbox.c: Enable new BBox_Cubic_Check algorithm, remove
+	the old one.
+	Improve comments.
+
+2013-08-18  Werner Lemberg  <wl@gnu.org>
+
+	* builds/unix/unix-def.in (freetype2.pc): Don't set executable bit.
+
+2013-08-18  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #39804.
+
+	* builds/unix/configure.raw (LIBPNG): Define and export.
+	* builds/unix/freetype-config.in, builds/unix/freetype2.in: Handle
+	libpng.
+
+2013-08-17  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Clean up BBox_Conic_Check.
+
+	* src/base/ftbbox.c (BBox_Conic_Check): Remove redundant checks for
+	extremum at the segment ends, which are already within the bbox.
+	Slightly modify calculations.
+
+2013-08-15  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Finish experimental (disabled) BBox_Cubic_Check implementation.
+
+	* src/base/ftbbox.c (BBox_Cubic_Check): Scale arguments to improve
+	accuracy and avoid overflows.
+
+2013-08-13  Alexei Podtelezhnikov  <apodtele@gmail.com>
+
+	[base] Refactor experimental (disabled) BBox_Cubic_Check.
+
+	* src/base/ftbbox.c (BBox_Cubic_Check): Implement the minimum search
+	as the mirror image of the maximum search implemented here...
+	(update_max): New function.
+
+2013-08-06  John Tytgat  <John.Tytgat@esko.com>
+
+	Fix Savannah bug #39702.
+
+	* src/cff/cffload.c (cff_index_get_pointers): Check for `cur_offset
+	!= 0'; this stronger test is mandated by the CFF specification.
+	Fix test for INDEX structures which have one or more empty entries
+	at the end.
+
+2013-08-05  Werner Lemberg  <wl@gnu.org>
+
+	Fix gcc pragmas, part 2.
+
+	* src/truetype/ttinterp.c (TT_MulFix14_long_long,
+	TT_DotFix14_long_long): `#pragma gcc diagnostic {push,pop}' has been
+	introduced with gcc version 4.6.
+
+2013-08-05  Werner Lemberg  <wl@gnu.org>
+
+	Fix gcc pragmas.
+
+	* src/truetype/ttinterp.c (TT_MulFix14_long_long,
+	TT_DotFix14_long_long): Older gcc versions don't accept diagnostic
+	pragmas within a function body.
+
+2013-08-05  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #39700.
+
+	* builds/unix/ftconfig.h: Synchronize with
+	`include/freetype/config/ftconfig.h'.
+
+	* builds/vms/ftconfig.h: Ditto.
+	Make the differences to the master `ftconfig.h' file as small as
+	possible for easier maintainance.
+
+2013-08-05  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve handling of `near' points.
+
+	Points which are very near to each other are now marked as such.
+	The `weak' flag is then computed by using the `in' vector of the
+	first and the `out' vector of the last point of a group of near
+	points.
+
+	For example, this fixes the rendering of glyph `Oslash' in
+	`Roboto-Thin.ttf'.
+
+	* src/autofit/afhints.h (AF_Flags): New value `AF_FLAGS_NEAR'.
+
+	* src/autofit/afhints.c (af_glyph_hints_reload): Introduce
+	the heuristic value `near_limit' to decide whether the current point
+	is near to the previous one, then set `AF_FLAG_NEAR' accordingly.
+	Store good `in' vector (of last non-near point) in
+	`last_good_in_{x,y}' and use it as an argument to
+	`ft_corner_is_flat' if necessary.
+
+2013-08-02  Werner Lemberg  <wl@gnu.org>
+
+	* include/freetype/ftcffdrv.h: Improve documentation.
+	This is based on blog entries from David Lemon and Dave Arnold (both
+	from Adobe) with kind permission.  Dave also helped in
+	proof-reading.
+
+2013-08-02  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Move declaration of scripts into separate file.
+
+	This has the benefit that we don't need to duplicate the data at
+	different places.
+
+	* src/autofit/afscript.h: New file.
+
+	* src/autofit/aftypes.h (AF_Script): Include `afscript.h' to define
+	the enumeration values.
+
+	* src/autofit/afglobal.c: Include `afscript.h' to get the script
+	specific header files.
+	(af_script_classes): Include `afscript.h' to fill this array.
+
+	* src/autofit/afpic.c: Include `afscript.h' to get the script
+	specific header files.
+	(autofit_module_class_pic_init): Include `afscript.h' for
+	initialization.
+	* src/autofit/afpic.h (AF_SCRIPT_CLASSES_COUNT,
+	AF_SCRIPT_CLASSES_REC_COUNT): Removed.  Use `AF_SCRIPT_MAX' instead.
+
+	* src/autofit/rules.mk (AUTOF_DRV_H): Updated.
+
+2013-08-02  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Move declaration of writing systems into separate file.
+
+	This has the benefit that we don't need to duplicate the data at
+	different places.
+
+	* src/autofit/afwrtsys.h: New file.
+
+	* src/autofit/aftypes.h (AF_WritingSystem): Include `afwrtsys.h' to
+	define the enumeration values.
+
+	* src/autofit/afglobal.c: Include `afwrtsys.h' to get the writing
+	system specific header files.
+	Include `afpic.h'.
+	(af_writing_system_classes): Include `afwrtsys.h' to fill this
+	array.
+
+	* src/autofit/afpic.c: Include `afwrtsys.h' to get the writing
+	system specific header files.
+	(autofit_module_class_pic_init): Include `afwrtsys.h' for
+	initialization.
+	* src/autofit/afpic.h (AF_WRITING_SYSTEM_CLASSES_COUNT,
+	AF_WRITING_SYSTEM_CLASSES_REC_COUNT): Removed.  Use
+	`AF_WRITING_SYSTEM_MAX' instead.
+
+2013-08-02  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Fix compilation with g++.
+
+	* src/sfnt/pngshim.c (error_callback, read_data_from_FT_stream): Use
+	cast.
+	(Load_SBit_Png): Pacify compiler.
+
+2013-08-02  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+            Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix `make multi'.
+
+	* include/freetype/config/ftconfig.h (FT_LOCAL_ARRAY,
+	FT_LOCAL_ARRAY_DEF): New macros.
+
+	* src/autofit/afglobal.c (af_writing_system_classes,
+	af_script_classes): Use FT_LOCAL_ARRAY_DEF.
+	* src/autofit/afglobal.h: Declare `af_writing_system_classes' and
+	`af_script_classes'.
+	* src/autofit/afloader.c: Include `afpic.h'.
+
+2013-08-01  Werner Lemberg  <wl@gnu.org>
+
+	Another round of cppcheck nitpicks.
+
+	The call was (from the top-level of the FreeType tree):
+
+	  cppcheck --force \
+	           --enable=all \
+	           -I /usr/include \
+	           -I /usr/local/include \
+	           -I /usr/lib/gcc/i586-suse-linux/4.7/include \
+	           -I include \
+	           -I include/freetype \
+	           -I include/freetype/config \
+	           -I include/freetype/internal \
+	           -DFT2_BUILD_LIBRARY \
+	           . &> cppcheck.log
+
+	using cppcheck git commit f7e93f99.
+
+	Note that cppcheck still can't handle `#include FOO' (with `FOO' a
+	macro).
+
+	*/* Improve variable scopes.
+	*/* Remove redundant initializations which get overwritten.
+
+	* src/gxvalid/*: Comment out redundant code or guard it with
+	FT_DEBUG_LEVEL_TRACE.
+
+2013-07-30  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Introduce `writing systems'.
+
+	This patch adds a new top level to the auto-hinter's script class
+	hierarchy.  It defines `writing systems' which can contain multiple
+	scripts.
+
+	For example, the `latin' writing system (in file `aflatin.c') is
+	able to support scripts like Latin, Cyrillic, Armenian, etc., which
+	can be handled similarly.
+
+	Scripts are now named using four-letter OpenType tags.
+
+	* src/autofit/aftypes.h (AF_ScriptClassRec): Move relevant members
+	to...
+	(AF_WritingSystemClassRec): This new structure.  It holds pointers
+	to functions which can be shared among related scripts.
+	(AF_WritingSystem): New enumeration.
+	(AF_Script): Revised values using four-letter tags.
+	(AF_DEFINE_WRITING_SYSTEM_CLASS): New macro.
+	(AF_DEFINE_SCRIPT_CLASS): Updated.
+
+	* src/autofit/afglobal.c (af_writing_system_classes): New global,
+	constant array.
+	(af_script_classes): Updated.
+	(af_face_globals_free): Updated.
+	Remove assertion.
+	(af_face_globals_get_metrics): Updated.
+
+	* src/autofit/afglobal.h (AF_SCRIPT_FALLBACK)
+	[!AF_CONFIG_OPTION_CJK]: Handle this case.
+
+	* src/autofit/afloader.c (af_loader_load_g, af_loader_load_glyph):
+	Updated.
+
+	* src/autofit/afpic.c (autofit_module_class_pic_init): Updated;
+	initialize structures for both writing systems and scripts.
+	* src/autofit/afpic.h: Updated.
+	(AF_WRITING_SYSTEM_CLASSES_GET): New macro.
+
+	* src/autofit/afcjk.c (af_cjk_writing_system_class): New writing
+	system.
+	(af_cjk_uniranges): Renamed to...
+	(af_hani_uniranges): This.
+	(af_cjk_script_class): Reduced and renamed to...
+	(af_hani_script_class): This.
+	* src/autofit/afcjk.h: Updated.
+
+	* src/autofit/afdummy.c (af_dummy_writing_system_class): New writing
+	system.
+	(af_dummy_script_class): Reduced and renamed to...
+	(af_dflt_script_class): This.
+	* src/autofit/afdummy.h: Updated.
+
+	* src/autofit/afindic.c (af_indic_writing_system_class): New writing
+	system.
+	(af_indic_uniranges): Renamed to...
+	(af_deva_uniranges): This.
+	(af_indic_script_class): Reduced and renamed to...
+	(af_deva_script_class): This.
+	* src/autofit/afcjk.h: Updated.
+
+	* src/autofit/aflatin.c (af_latin_writing_system_class): New writing
+	system.
+	(af_latin_uniranges): Renamed to...
+	(af_latn_uniranges): This.
+	(af_latin_script_class): Reduced and renamed to...
+	(af_latn_script_class): This.
+	* src/autofit/aflatin.h: Updated.
+
+	* src/autofit/aflatin2.c (af_latin2_writing_system_class): New
+	writing system.
+	(af_latin2_uniranges): Renamed to...
+	(af_ltn2_uniranges): This.
+	Synchronize ranges with `latin'.
+	(af_latin2_script_class): Reduced and renamed to...
+	(af_ltn2_script_class): This.
+	* src/autofit/aflatin2.h: Updated.
+
+2013-07-30  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Variable renaming.
+
+	* src/autofit/aftypes.h (AF_ScriptMetricsRec):
+	s/clazz/script_class/.
+	Update all users.
+
+2013-07-30  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	Ignore libpng-config under cross-building configuration,
+	because it will return the flags for the hosting environment.
+
+	* builds/unix/configure.raw: Ignore libpng-config when
+	`cross_compiling' == yes.
+
+2013-07-30  Behdad Esfahbod  <behdad@google.com>
+
+	Prevent division by zero by a transparent color.
+
+	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra):
+	Return 0 immediately, when alpha channel is zero.
+
+2013-07-25  Behdad Esfahbod  <behdad@google.com>
+
+	Add FT_FACE_FLAG_COLOR and FT_HAS_COLOR.
+
+	Also disambiguate Google's color bitmap tables.
+
+	* include/freetype/freetype.h (FT_FACE_FLAG_COLOR, FT_HAS_COLOR):
+	New macros.
+
+	* include/freetype/internal/tttypes.h (TT_SbitTableType): Add
+	TT_SBIT_TABLE_TYPE_CBLC.
+
+	* src/sfnt/sfobjs.c (sfnt_load_face): Handle FT_FACE_FLAG_COLOR.
+
+	* src/sfnt/ttsbit.c (tt_face_load_sbit,
+	tt_face_load_strike_metrics, tt_face_load_sbit_image): Handle
+	TT_SBIT_TABLE_TYPE_CBLC.
+
+2013-07-24  suzuki toshiya  <mpsuzuki@hiroshima-u.ac.jp>
+
+	[sfnt] Fix for `make multi' target.
+
+	* src/sfnt/pngshim.c (Load_SBit_Png): Use FT_LOCAL_DEF().
+
+2013-07-20  Werner Lemberg  <wl@gnu.org>
+
+	* docs/INSTALL.GNU: Updated.
+
+2013-07-20  Behdad Esfahbod  <behdad@google.com>
+
+	[sfnt] Fix `sbix' table version handling.
+
+	* src/sfnt/ttsbit.c (tt_face_load_sbit) [TT_SBIT_TABLE_TYPE_SBIX]:
+	USHORT version numbers are to be considered as `minor'.
+
+2013-07-19  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Fix segment classification for blue zones.
+
+	The old code (essentially unchanged since the very beginning)
+	incorrectly handled this configuration
+
+	               x -o- x
+	                /   \
+	               /     \
+	              /       \
+	             o         o
+
+	as flat and this
+
+	                o               o
+	               /               /
+	             x|              x|
+	              |               |
+	              o---------------o
+
+	as round.  (`o' and `x' are on and off points, respectively).
+
+	This is a major change which should improve the rendering results
+	enormously for many TrueType fonts, especially in the range approx.
+	20-40ppem, fixing the appearance of many overshoots.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Look at the
+	first and last points of the segment, not the points right before
+	and after.
+
+2013-07-19  Behdad Esfahbod  <behdad@google.com>
+
+	[sfnt] `sbix' fix-ups.
+
+	* src/sfnt/sfobjs.c (sfnt_load_face): Apple's `sbix' color bitmaps
+	are rendered scaled and then the `glyf' outline rendered on top.  We
+	don't support that yet, so just ignore the `glyf' outline and
+	advertise it as a bitmap-only font.
+
+	* src/sfnt/ttsbit.c (tt_face_load_strike_metrics)
+	[TT_SBIT_TABLE_TYPE_SBIX]: Return metrics in 26.6 units.
+	(tt_face_load_sbix_image): Typo.
+
+2013-07-18  Behdad Esfahbod  <behdad@google.com>
+
+	[sfnt] Add support for Apple's `sbix' color bitmap table.
+
+	* include/freetype/internal/tttypes.h (TT_SBit_MetricsRec): Widen
+	fields to FT_Short and FT_UShort, respectively.
+	(TT_SBitTableType): New enumeration.
+	(TT_FaceRec): Add `sbit_table_type' field.
+
+	* include/freetype/tttags.h (TTAG_sbix): New macro.
+
+	* src/sfnt/pngshim.c (Load_SBit_Png): Pass a more generic
+	FT_GlyphSlot argument instead FT_Bitmap.
+	Add flag to control map and metrics handling.
+	Update all users.
+
+	* src/sfnt/ttsbit.c: Include `ttmtx.h'.
+	(tt_face_load_eblc): Renamed to...
+	(tt_face_load_sbit): This.
+	Handlic `sbix' bitmaps.
+	(tt_face_free_eblc): Renamed to...
+	(tt_face_load_sbit): This.
+	Updated.
+	(tt_face_load_strike_metrics): Handle `sbix' bitmaps.
+	(tt_face_load_sbix_image): New function.
+	(tt_sbit_decoder_alloc_bitmap, tt_sbit_decoder_load_image,
+	tt_sbit_decoder_load_byte_aligned, tt_sbit_decoder_load_bit_aligned,
+	tt_sbit_decoder_load_compound, tt_sbit_decoder_load_png,
+	tt_sbit_decoder_load_image, tt_sbit_decoder_load_bitmap): Don't pass
+	and handle load flags.
+	(tt_sbit_decoder_load_bitmap) [!FT_CONFIG_OPTION_USE_PNG]: Better
+	handle formats 17-19.
+	Move color to grayscale conversion to...
+	(tt_face_load_sbit_image): Here.
+	Handle `sbix' bitmaps.
+
+	* src/sfnt/pngshim.h: Updated.
+	* src/sfnt/ttsbit.h: Updated.
+	* src/sfnt/sfdriver.c: Updated.
+
+2013-07-18  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Ignore invalid magic number in `head' or `bhed'.
+
+	Other font engines seem to ignore it also.  Problem reported by
+	Hin-Tak Leung <htl10@users.sourceforge.net>.
+
+	* src/sfnt/ttload.c (check_table_dir): Don't abort but warn only if
+	we have an invalid magic number.
+
+2013-07-16  Werner Lemberg  <wl@gnu.org>
+
+	[smooth] Fix segfault caused by previous commit.
+
+	* src/smooth/ftgrays.c (gray_set_cell): Always compute
+	`ras.invalid'.
+
+2013-07-16  David Turner  <digit@google.com>
+
+	[smooth] Improve performance.
+
+	Provide a work-around for an ARM-specific performance bug in GCC.
+	This speeds up the rasterizer by more than 5%.
+
+	Also slightly optimize `set_gray_cell' and `gray_record_cell' (which
+	also improves performance on other platforms by a tiny bit (<1%).
+
+	* src/smooth/ftgrays.c (FT_DIV_MOD): New macro.
+	Use it where appropriate.
+
+	(gray_record_cell, gray_set_cell, gray_move_to,
+	gray_convert_glyph_inner): Streamline condition handling.
+
+2013-07-16  David Turner  <digit@google.com>
+
+	[truetype] Add assembler code for TT_MulFix14 and TT_DotFix14.
+
+	This patch provides slightly optimized versions for ARM, x86, and
+	x86_64 CPUs if built with GCC.
+
+	Also remove some dead code.
+
+	* src/truetype/ttinterp.c (TT_MulFix14_arm, TT_MulFix14_long_long,
+	TT_DotFix14_long_long): New functions.
+
+2013-07-16  David Turner  <digit@google.com>
+
+	Optimize FT_MulFix for x86_64 GCC builds.
+
+	This patch provides an optimized `FT_MulFix' implementation for
+	x86_64 machines when FreeType is built with GCC, or compatible
+	compilers like Clang.
+
+	Example:
+	  bin/ftbench -p -t 5 -s 14 -f 0008 Arial.ttf
+
+	Before:
+
+	  Load                       4.863 us/op
+	  Load_Advances (Normal)     4.816 us/op
+	  Load_Advances (Fast)       0.028 us/op
+	  Render                     2.753 us/op
+	  Get_Glyph                  0.463 us/op
+	  Get_CBox                   0.077 us/op
+	  Get_Char_Index             0.023 us/op
+	  Iterate CMap              13.898 us/op
+	  New_Face                  12.368 us/op
+	  Embolden                   0.028 us/op
+	  Get_BBox                   0.302 us/op
+
+	After:
+
+	  Load                       4.617 us/op
+	  Load_Advances (Normal)     4.645 us/op
+	  Load_Advances (Fast)       0.027 us/op
+	  Render                     2.789 us/op
+	  Get_Glyph                  0.460 us/op
+	  Get_CBox                   0.077 us/op
+	  Get_Char_Index             0.024 us/op
+	  Iterate CMap              13.403 us/op
+	  New_Face                  12.278 us/op
+	  Embolden                   0.028 us/op
+	  Get_BBox                   0.301 us/op
+
+	* builds/unix/ftconfig.in, include/freetype/config/ftconfig.h
+	(FT_MulFix_x86_64): New function.
+
+2013-07-16  David Turner  <digit@google.com>
+
+	Speed up ARMv7 support.
+
+	When building for ARMv7 with thumb2 instructions, the optimized
+	`FT_MulFix_arm' assembly routine was not being used.
+
+	The reason for this is in the `ftconfig.h' header, namely:
+
+	- The assembly routine uses the `smull' instruction which is not
+	  available when generating Thumb-1 machine code.  It is available
+	  in Thumb-2 mode, though.
+
+	- The header was written a long time ago before Thumb-2 became
+	  widely popular (e.g. with Android).  So it simply doesn't use the
+	  assembly routine if the `__thumb__' built-in macro is defined.
+
+	- When compiling in Thumb-2 mode, the compiler will define both
+	  `__thumb__' and `__thumb2__'.
+
+	By checking for `(__thumb2__ || !__thumb__)', we ensure that the
+	assembly routine is only avoided when generating Thumb-1 code.
+
+	Given that this is performance-sensitive function, this improves
+	`ftbench' as follows on a Galaxy Nexus:
+
+	                           Before (us/op)   After (us/op)
+
+	  - loading Arial.ttf glyphs at 14 ppem [1]
+
+	      Load                   34.285          33.098
+
+	  - same operation with the light auto-hinter [2]
+
+	      Load                   31.317          29.590
+
+	  - same operation without hinting [3]
+
+	      Load                    6.143           5.376
+
+	  - loading Arial.ttf advances at 14 ppem [4]
+
+	      Load_Advances (normal) 34.216          33.016
+	      Load_Advances (fast)    0.176           0.176
+
+	  [1] ftbench -t 5 -p -s 14 -b a -f 0008 Arial.ttf
+	  [2] ftbench -t 5 -p -s 14 -b a -r 1 -f 0028 Arial.ttf
+	  [3] ftbench -t 5 -p -s 14 -b a -f 000a Arial.ttf
+	  [4] ftbench -t 5 -p -s 14 -b b -f 0008 Arial.ttf
+
+	* builds/unix/ftconfig.in, include/freetype/config/ftconfig.h
+	(FT_MULFIX_ASSEMBLER): Fix handling for ARMv7.
+
+2013-06-28  Werner Lemberg  <wl@gnu.org>
+
+	* docs/CHANGES: Updated.
+
+2013-06-27  Werner Lemberg  <wl@gnu.org>
+
+	* src/winfonts/winfnt.c (FNT_Load_Glyph): Fix bitmap width guard.
+
+2013-06-25  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Add darkening limit to `darkening-parameters'.
+
+	* src/cff/cffdrivr.c (cff_property_set): Add check.
+
+2013-06-25  Werner Lemberg  <wl@gnu.org>
+
+	[cff] Add `darkening-parameters' property.
+
+	* include/freetype/ftcffdrv.h: Document it.
+
+	* src/cff/cffdrivr.c (cff_property_set, cff_property_get): Handle
+	`darkening-parameters' property.
+
+	* src/cff/cf2font.h (CF2_FontRec): Add `darkenParams' array.
+
+	* src/cff/cf2font.c (cf2_computeDarkening): Add `darkenParams'
+	argument and use it.
+	Update all callers.
+
+	* src/cff/cf2ft.c (cf2_decoder_parse_charstrings): Copy
+	`darken_params' values.
+
+	* src/cff/cffobjs.h (CFF_DriverRec): Add `darken_params' array.
+
+	* src/cff/cffobjs.c (cff_driver_init): Set default values for
+	`darken_params'.
+
+2013-06-25  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Code shuffling.
+
+	* src/tools/docmaker/tohtml.py (re_url): Move regexp...
+	* src/tools/docmaker/sources.py: ... to this file.
+
+2013-06-25  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Remove unused functions.
+
+	* src/tools/docmaker/content.py (DocMarkup.get_start,
+	DocBlock.get_markup_name): Removed.
+	* src/tools/docmaker/tohtml.py (html_quote0, dump_html_code,
+	HtmlFormatter.make_html_words): Removed.
+
+2013-06-25  Werner Lemberg  <wl@gnu.org>
+
+	* builds/freetype.mk (dll): Remove target.
+
+	Problem reported by Jörg Günnewig <joerg.guennewig@googlemail.com>.
+
+2013-06-25  Werner Lemberg  <wl@gnu.org>
+
+	[docmaker] Recognise URLs.
+
+	* src/tools/docmaker/tohtml.py (re_url): New regular expression.
+	(make_html_para): Use it.
+
+2013-06-19  Werner Lemberg  <wl@gnu.org>
+
+	* Version 2.5.0.1 released.
+	===========================
+
+
+	Tag sources with `VER-2-5-0-1'.
+
+	* include/freetype/config/ftoption.h: Undefine
+	CFF_CONFIG_OPTION_OLD_ENGINE.
+	* devel/ftoption.h: Define CFF_CONFIG_OPTION_OLD_ENGINE.
+
+2013-06-19  Werner Lemberg  <wl@gnu.org>
+
+	* builds/unix/install.mk (install): Don't create `cache' directory.
+
+	Found by Peter Breitenlohner <peb@mppmu.mpg.de>.
+
+2013-06-19  Werner Lemberg  <wl@gnu.org>
+
+	* Version 2.5.0 released.
+	=========================
+
+
+	Tag sources with `VER-2-5-0'.
+
+	* docs/VERSION.DLL: Update documentation and bump version number to
+	2.5.0.
+
+	* README, Jamfile (RefDoc),
+	builds/win32/vc2005/freetype.vcproj, builds/win32/vc2005/index.html,
+	builds/win32/vc2008/freetype.vcproj, builds/win32/vc2008/index.html,
+	builds/win32/vc2010/freetype.vcxproj, builds/win32/vc2010/index.html,
+	builds/win32/visualc/freetype.dsp,
+	builds/win32/visualc/freetype.vcproj,
+	builds/win32/visualc/index.html, builds/win32/visualce/freetype.dsp,
+	builds/win32/visualce/freetype.vcproj,
+	builds/win32/visualce/index.html,
+	builds/wince/vc2005-ce/freetype.vcproj,
+	builds/wince/vc2005-ce/index.html,
+	builds/wince/vc2008-ce/freetype.vcproj,
+	builds/wince/vc2008-ce/index.html: s/2.4.12/2.5.0/, s/2412/250/.
+
+	* include/freetype/freetype.h (FREETYPE_MINOR): Set to 5.
+	(FREETYPE_PATCH): Set to 0.
+
+	* builds/unix/configure.raw (version_info): Set to 16:2:10.
+
+	* src/base/ftobjs.c (FT_Open_Face): Pacify compiler.
+	* src/truetype/ttinterp.c (Ins_MSIRP, Ins_MIRP): Ditto.
+
+2013-06-18  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #39269.
+
+	* src/base/ftgloadr.c (FT_GlyphLoader_CheckPoints): Free memory in
+	case of reacollocation failures.
+
+2013-06-18  Andrew Church  <achurch+savannah@achurch.org>
+
+	Fix Savannah bug #39266.
+
+	If memory allocations fail at certain points while opening a font,
+	FreeType can either crash due to a NULL dereference or leak memory.
+
+	* include/freetype/internal/ftobjs.c (FT_Face_InternalRec,
+	FT_LibraryRec): Make `refcount' a signed integer.  If, for example,
+	FT_Open_Face() fails in a memory allocation before the face's
+	reference count is set to 1, a subsequent `FT_Done_Library' call
+	would otherwise loop over `FT_Done_Face' 2^32 times before freeing
+	the face.
+
+	* src/base/ftobjs.c (open_face): Initialize `stream' and friends
+	earlier.
+	(FT_Open_Face) <Fail>: Behave correctly if `node' is NULL.
+	(FT_Destroy_Module) <Fail>: Check that `renderer_clazz' is valid.
+
+2013-06-14  Werner Lemberg  <wl@gnu.org>
+
+	* src/smooth/ftgrays.c One final pragma to silence 64-bit MSVC.
+
+2013-06-06  Dave Arnold  <darnold@adobe.com>
+	    Werner Lemberg  <wl@gnu.org>
+
+	[cff] Add code to Adobe's engine to handle ppem > 2000.
+
+	* src/cff/cffgload.c (cff_slot_load): If we get
+	FT_Err_Glyph_Too_Big, retry unhinted and scale up later on.
+
+2013-06-12  Werner Lemberg  <wl@gnu.org>
+
+	Another try on pragmas.
+
+	* include/freetype/internal/ftdebug.h: Move pragmas to...
+	* include/freetype/internal/internal.h: ... this file since it gets
+	included by all source files.
+	* include/freetype/internal/ftserv.h: Remove pragma which has no
+	effect.
+
+2013-06-12  Werner Lemberg  <wl@gnu.org>
+
+	* include/freetype/internal/ftdebug.h: Disable MSVC warning C4127.
+
+	This partially undoes commit 3f6e0e0c.
+
+2013-06-12  Werner Lemberg  <wl@gnu.org>
+
+	More compiler warning fixes.
+
+	*/*: Use cast to `FT_Bool' (or `Bool') where appropriate.
+
+2013-06-10  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Improve handling of broken sbit advance widths.
+
+	* src/truetype/ttgload.c (TT_Load_Glyph): Use the glyph's (scaled)
+	`linearHoriAdvance' if the sbit's `horiAdvance' value is zero.
+
+	Cf. font `Fixedsys Excelsior' v3.01 (FSEX300.ttf), glyph A, 16ppem.
+
+2013-06-10  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Improve embedded bitmap tracing.
+
+	* src/base/ftobjs.c (FT_Request_Size): Move trace message regarding
+	bitmap strike match to...
+	(FT_Match_Size): This function.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_metrics,
+	tt_sbit_decoder_load_byte_aligned, tt_sbit_decoder_load_bit_aligned,
+	tt_sbit_decoder_load_compound, tt_sbit_decoder_load_png,
+	tt_sbit_decoder_load_image): Decorate with tracing messages.
+
+2013-06-10  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #39160.
+
+	* src/truetype/ttinterp.c (Ins_SDPVTL): Set projection vector too
+	for the degenerate case.
+
+2013-06-09  David Turner  <digit@google.com>
+
+	* src/cache/ftcmanag.c (FTC_Manager_Reset): Add missing cache flush.
+
+	This code, present since eight(!) years in the unused `CACHE'
+	branch, has been forgotten to apply to the master branch.  It's
+	really amazing that noone has ever complained since
+	`FTC_Manager_Reset' is pretty useless without flushing the cache.
+
+2013-06-07  Werner Lemberg  <wl@gnu.org>
+
+	Add and improve pragmas for MSVC compiler.
+
+	* include/freetype/internal/ftdebug.h: Remove pragmas.
+	* include/freetype/internal/ftserv.h: Use push and pop for pragmas.
+	* include/freetype/internal/ftvalid.h: Handle warning C4324.
+	* src/base/ftobjs.c: Use push and pop for pragmas.
+	* src/gzip/ftgzip.c: Handle warning C4244.
+
+2013-06-07  Werner Lemberg  <wl@gnu.org>
+
+	[cff] s/cf2_getGlyphWidth/cf2_getGlyphOutline/.
+
+	* src/cff/cf2font.c, src/cff/cf2font.h, src/cff/cf2ft.c: Do it.
+
+2013-06-06  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Add early exit feature for width-only calls.
+
+	This is for `FT_Get_Advance'.
+
+	There are 7 places where the spec says the width can be defined:
+
+	  hstem/hstemhm
+	  vstem/vstemhm
+	  cntrmask/hintmask
+	  hmoveto
+	  vmoveto
+	  rmoveto
+	  endchar
+
+	* src/cff/cf2intrp.c (cf2_doStems): Exit early for width-only calls,
+	if possible.
+
+	(cf2_interpT2CharString) <cf2_cmdHSTEM>, <cf2_cmdVSTEM>,
+	<cf2_cmdVMOVETO>, <cf2_cmdENDCHAR>, <cf2_cmdHINTMASK>,
+	<cf2_cmdRMOVETO>, <cf2_cmdHMOVETO>: Exit early for width-only calls.
+
+2013-06-06  Werner Lemberg  <wl@gnu.org>
+
+	Next round of compiler fixes.
+
+	* builds/win32/ftdebug.c, builds/wince/ftdebug.c (ft_debug_init):
+	Add proper cast.
+
+	* include/freetype/internal/ftserv.h (FT_SERVICE_UNAVAILABLE): Fix
+	cast.
+	* include/freetype/internal/ftstream.h: Decorate stream and frame
+	macros with `FT_Long' and `FT_ULong' as appropriate.
+
+	* src/base/ftrfork.c (raccess_guess_darwin_hfsplus,
+	raccess_guess_darwin_newvfs): Use cast.
+
+	* src/bdf/bdflib.c (_bdf_set_default_spacing): Use cast.
+
+	* src/cache/ftcmanag.c (FTC_Manager_Check): Fix cast.
+	* src/cache/ftcmanag.h (FTC_ManagerRec): Ditto.
+
+	* src/cff/cf2arrst.c (cf2_arrstack_setNum_Elements): Use cast.
+	* src/cff/cf2ft.c (cf2_freeSeacComponent): Ditto.
+	* src/cff/cffobjs.c (remove_subset_prefix, remove_style): Ditto.
+
+	* src/cid/cidparse.c (cid_parser_new): Use cast.
+
+	* src/pcf/pcfdrivr.c (PCF_Glyph_Load): Use cast.
+
+	* src/psaux/psobjs.c (reallocate_t1_table): Fix argument type.
+
+	* src/raster/ftraster.c (ft_black_reset): Use cast.
+
+	* src/truetype/ttgxvar.c (FT_Stream_FTell): Use cast.
+	(ALL_POINTS): Fix cast.
+
+	* src/type1/t1driver.c (t1_ps_get_font_value): Add casts.
+	* src/type1/t1parse.c (T1_Get_Private_Dict): Add cast.
+
+2013-06-05  Dave Arnold  <darnold@adobe.com>
+
+	Fix more MSVC Win32 compiler warnings.
+
+	* src/base/ftobjs.c: Fix typo in MS pragma.
+
+	* src/base/bdflib.c (_bdf_set_default_spacing, _bdf_add_property):
+	`lineno' is only used in debug mode.
+
+	* src/cff/cf2ft.c (cf2_builder_moveTo): `params' is only used in
+	debug mode.
+
+2013-06-05  Werner Lemberg  <wl@gnu.org>
+
+	Fix compiler warnings.
+
+	* include/freetype/internal/ftmemory.h: Decorate memory allocation
+	macros with `FT_Long' where appropriate.
+	Remove duplicate of FT_MEM_QRENEW_ARRAY definition.
+
+	* src/base/ftbitmap.c (ft_gray_for_premultiplied_srgb_bgra): Use
+	cast.
+
+	* src/base/ftobjs.c: Add warning disabling pragma for MSVC while
+	including `md5.c'.
+
+	* src/cff/cf2intrp.c (cf2_interpT2CharString) <cf2_cmdESC>: Add
+	cast.
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_compound): Fix casts.
+	(tt_sbit_decoder_load_bitmap): Beautification.
+
+	* src/smooth/ftsmooth.c (ft_smooth_render_generic): Initialize
+	variables (earlier).
+
+	* src/truetype/ttgload.c (TT_Process_Simple_Glyph): Pacify compiler.
+
+	* src/truetype/ttgxvar.c (TT_Get_MM_Var): Use unsigned constants
+	where appropriate.
+
+	* src/type1/t1load.c (T1_Get_MM_Var): Ditto.
+
+2013-06-04  Werner Lemberg  <wl@gnu.org>
+
+	* src/cff/cf2font.c (cf2_getGlyphWidth): Initialize `advWidth'.
+
+	Problem reported by Ingmar Sittl <ingmar.sittl@elektrobit.com>.
+
+2013-06-04  Werner Lemberg  <wl@gnu.org>
+
+	Apply fixes for cppcheck nitpicks.
+
+	  http://cppcheck.sourceforge.net/
+
+	The call was (from the top-level of the FreeType tree):
+
+	  cppcheck --force \
+	           --enable=all \
+	           -I include \
+	           -I include/freetype/ \
+	           -I include/freetype/config/ \
+	           -I include/freetype/internal/ \
+	           . &> cppcheck.log
+
+	Note that the current version heavily chokes on FreeType, delivering
+	many wrong results.  I will report those issues to the cppcheck team
+	so that a newer version gives improved results hopefully.
+
+	*/* Improve variable scopes.
+	*/* Remove redundant initializations which get overwritten.
+
+	* src/base/ftmac.c, builds/mac/ftmac.c (count_faces_scalable):
+	Remove unused variable.
+
+	* src/base/ftdbgmem.c (ft_mem_table_destroy): `table' can't be zero.
+
+	* src/gxvalid/gxvkern.c (gxv_kern_subtable_fmt1_entry_validate):
+	Remove functionless code.
+
+	* src/tools/ftrandom.c (main): Fix memory leak.
+
+2013-06-03  Werner Lemberg  <wl@gnu.org>
+
+	Add CFF_CONFIG_OPTION_OLD_ENGINE configuration option.
+
+	This controls whether the old FreeType CFF engine gets compiled into
+	FreeType.  It is now disabled by default.
+
+	* devel/ftoption.h, include/freetype/config/ftoption.h
+	(CFF_CONFIG_OPTION_OLD_ENGINE): New macro.
+
+	* src/cff/cffdrivr.c (cff_property_set), src/cff/cffgload.c
+	(CFF_Operator, cff_argument_counts, cff_builder_add_point,
+	cff_operator_seac, cff_decoder_parse_charstrings, cff_slot_load),
+	src/cff/cffgload.h, src/cff/cffobjs.c (cff_driver_init): Use
+	CFF_CONFIG_OPTION_OLD_ENGINE to guard the affected code.
+
+	* docs/CHANGES: Updated.
+
+2013-06-02  Werner Lemberg  <wl@gnu.org>
+
+	Fix PNG library handling.
+
+	* builds/unix/configure.raw: Don't use LIBPNG_LIBS but
+	LIBPNG_LDFLAGS.
+
+2013-05-23  Behdad Esfahbod  <behdad@google.com>
+
+	Add support for color embedded bitmaps (eg. color emoji).
+
+	A new load flag, FT_LOAD_COLOR, makes FreeType load color
+	embedded-bitmaps, following this draft specification
+
+	  https://color-emoji.googlecode.com/git/specification/v1.html
+
+	which defines two new SFNT tables, `CBDT' and `CBLC' (named and
+	modeled after `EBDT' and `EBLC', respectively).  The color bitmaps
+	are stored in the new FT_PIXEL_MODE_BGRA format to represent BGRA
+	pre-multiplied sRGB images.  If PNG support is available, PNG color
+	images as defined in the same proposed specification are supported
+	also.
+
+	Note that color bitmaps are converted to grayscale if client didn't
+	ask for color.
+
+	* builds/unix/configure.raw: Search for libpng.
+	Add `--without-png' option.
+
+	* devel/ftoption.h, include/freetype/config/ftoption.h
+	(FT_CONFIG_OPTION_USE_PNG): New macro.
+
+	* include/freetype/freetype.h (FT_LOAD_COLOR): New load flag.
+
+	* include/freetype/ftimage.h (FT_Pixel_Mode): Add
+	`FT_PIXEL_MODE_BGRA'.
+
+	* include/freetype/tttags.h (TTAG_CBDT, TTAG_CBLC): New tags.
+
+	* src/base/ftbitmap.c (FT_Bitmap_Embolden): Updated.
+	(ft_gray_for_premultiplied_srgb_bgra): New function.
+	(FT_Bitmap_Convert): Handle FT_PIXEL_MODE_BGRA.
+
+	* src/sfnt/pngshim.c, src/sfnt/pngshim.h: New files.
+
+	* src/sfnt/sfnt.c: Include `pngshim.c'.
+
+	* src/sfnt/ttsbit.c: Include FT_BITMAP_H and `pngshim.h'
+	(tt_face_load_eblc): Load `CBLC'.
+	(tt_sbit_decoder_init): Load `CBDT'.
+	(tt_sbit_decoder_alloc_bitmap): Pass load flags to select between
+	color and grayscale bitmaps.
+	Set `num_grays'.  This is used by `ftview' to choose the blending
+	algorithm.
+	(tt_sbit_decoder_load_byte_aligned,
+	tt_sbit_decoder_load_bit_aligned, tt_sbit_decoder_load_compound,
+	tt_sbit_decoder_load_image): Pass load flag.
+	s/write/pwrite/.
+	Don't call `tt_sbit_decoder_alloc_bitmap'.
+	Updated.
+	(tt_sbit_decoder_load_png) [FT_CONFIG_OPTION_USE_PNG]: New function.
+	(tt_sbit_decoder_load_bitmap): Pass load flag.
+	Handle new glyph formats 17, 18, and 19.
+	Call `tt_sbit_decoder_alloc_bitmap'.
+	Flatten color bitmaps if necessary.
+	(tt_face_load_sbit_image): Updated.
+
+	* src/sfnt/rules.mk (SFNT_DRV_SRC): Add `pngshim.c'.
+
+	* docs/CHANGES: Updated.
+
+2013-05-24  Guenter  <info@gknw.net>
+
+	Apply Savannah patch #8055.
+
+	Make `apinames' create an import file for NetWare.
+
+	* src/tools/apinames.c (PROGRAM_VERSION): Set to 0.2.
+	(OutputFormat): Add `OUTPUT_NETWARE_IMP'.
+	(names_dump): Handle it.
+	(usage): Updated.
+	(main): Handle new command line flag `-wN'.
+
+2013-05-23  Behdad Esfahbod  <behdad@behdad.org>
+
+	Compilation fix.
+
+	* src/truetype/ttinterp.c (TT_RunIns)
+	[!TT_CONFIG_OPTION_SUBPIXEL_HINTING]: Make it work.
+
+2013-05-22  Infinality  <infinality@infinality.net>
+
+	[truetype] Formatting and an additional subpixel tweak.
+
+	* src/truetype/ttinterp.c (Ins_SHPIX): Formatting fix.
+	* src/truetype/ttsubpix.c (SKIP_NONPIXEL_Y_MOVES_Rules):
+	Revert previous modification for Verdana clones.
+
+2013-05-22  Infinality  <infinality@infinality.net>
+
+	[truetype] Adjust subpixel zp2 moves and tweak rules.
+
+	These modifications fix thin diagonal stems in some legacy fonts.
+
+	* src/truetype/ttinterp.c (Direct_Move_X): Remove unused macro.
+	(Move_Zp2_Point): Don't always disable x moves for subpixel rendering.
+	(Ins_SHP): Disable x moves here for subpixel rendering.
+	(Ins_SHPIX): Only disable x moves in compatibility mode.
+	Split out zp2 move reversals and reorder conditional respectively.
+
+	* src/truetype/ttsubpix.c (SKIP_NONPIXEL_Y_MOVES_Rules): Fix oversight.
+	Only adjust Verdana clones for 17 ppem.
+	(SKIP_NONPIXEL_Y_MOVES_Rules_Exceptions): Add Courier New.
+	(ALWAYS_SKIP_DELTAP_Rules): Found additional cases for Arial `s'.
+
+2013-05-20  Infinality  <infinality@infinality.net>
+
+	[truetype] Simplify and improve subpixel function detection.
+
+	Some small enhancements have allowed the removal of many macros and
+	the simplification of existing rules in `ttsubpix.c'.
+
+	* src/truetype/ttsubpix.h (SPH_TWEAK_ALLOW_X_DMOVEX,
+	SPH_TWEAK_ALLOW_X_MOVE_ZP2,
+	SPH_TWEAK_DELTAP_SKIP_EXAGGERATED_VALUES,
+	SPH_TWEAK_SKIP_INLINE_DELTAS, SPH_TWEAK_MIRP_CVT_ZERO): Removed.
+	(SPH_TWEAK_SKIP_NONPIXEL_Y_MOVES_DELTAP): New rule macro.
+
+	* src/truetype/ttsubpix.c: Updated affected rules.
+
+	* src/truetype/ttinterp.c (Direct_Move_X): Updated.
+	(INS_FDEF): Add additional function detection.
+	(INS_ENDF): Set runtime flag.
+	(Ins_CALL): Skip the call under certain conditions.
+	Remove bad code.
+	(Ins_LOOPCALL): Skip the call under certain conditions.
+	Remove bad code.
+	(Move_Zp2_Point): Updated.
+	(Ins_SHPIX): Updated.
+	Skip the move under some situations.
+	(Ins_MIAP): Improve conditions.
+	(Ins_MIRP): Updated.
+	(Ins_DELTAP): Skip move under certain conditions.
+	Simplify conditions.
+	(TT_RunIns): Updated.
+	Add code to handle new function detection.
+	Trace messages.
+
+2013-05-17  Werner Lemberg  <wl@gnu.org>
+
+	Update more FT_Err_XXX macros using FT_ERR and FT_THROW;
+
+	* builds/amiga/src/base/ftsystem.c, builds/mac/ftmac.c,
+	builds/unix/ftsystem.c, builds/vms/ftsystem.c: Do it.
+
+2013-05-15  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Add `interpreter-version' property.
+
+	This makes the option TT_CONFIG_OPTION_SUBPIXEL_HINTING controllable
+	at runtime.
+
+	* include/freetype/ftttdrv.h: New file.
+
+	* include/freetype/config/ftheader.h (FT_TRUETYPE_DRIVER_H): New
+	macro.
+
+	* src/truetype/ttdriver.c: Include FT_TRUETYPE_DRIVER_H.
+	(tt_property_set, tt_property_get): Fill templates.
+
+	* src/truetype/ttobjs.h (TT_DriverRec): Add `interpreter_version'
+	member.
+	Remove unused `extension_component' member.
+
+	* src/truetype/ttgload.c: Include FT_TRUETYPE_DRIVER_H.
+	(tt_get_metrics, TT_Hint_Glyph, TT_Process_Simple_Glyph,
+	compute_glyph_metrics, tt_loader_init): Use `interpreter_version'.
+
+	* src/truetype/ttinterp.c: Include FT_TRUETYPE_DRIVER_H.
+	(SUBPIXEL_HINTING): New macro to check `interpreter_version' flag.
+	Update all affected functions to use it.
+	Use TT_INTERPRETER_VERSION_XXX where appropriate.
+
+	* src/truetype/ttobjs.c: Include FT_TRUETYPE_DRIVER_H.
+	(tt_driver_init): Initialize `interpreter_version'.
+
+	* src/truetype/ttsubpix.c: Include FT_TRUETYPE_DRIVER_H.
+	Use TT_INTERPRETER_VERSION_XXX where appropriate.
+
+2013-05-13  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Avoid empty source file.
+
+	* src/truetype/ttsubpix.c [!TT_CONFIG_OPTION_SUBPIXEL_HINTING]:
+	Provide dummy typedef.
+
+2013-05-13  Werner Lemberg  <wl@gnu.org>
+
+	* src/cff/cf2font.c (cf2_getGlyphWidth): Fix uninitialized variable.
+
+	Fix suggested by Vaibhav Nagarnaik <vnagarnaik@gmail.com>.
+
+2013-05-13  Brian Nixon  <bnixon@yahoo.com>
+
+	Fix Savannah bug #38970.
+
+	* src/base/ftdebug.c, builds/win32/ftdebug.c,
+	builds/wince/ftdebug.c, builds/amiga/src/base/ftdebug.c
+	(ft_debug_init): Don't read past the environment variable FT2_DEBUG.
+
+2013-05-12  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Add framework for TrueType properties.
+
+	* src/truetype/ttdrivr.c: Include FT_SERVICE_PROPERTIES_H.
+	(tt_property_set, tt_property_get): New functions, still empty.
+	Define `tt_service_properties' service.
+	Update `tt_services'.
+
+	* src/truetype/ttpic.h: Include FT_SERVICE_PROPERTIES_H.
+	(TT_SERVICE_PROPERTIES_GET): New macro.
+	(TTModulePIC): Add `tt_service_properties'.
+
+2013-05-12  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #38967.
+
+	* src/base/ftcalc.c (FT_DivFix) [FT_LONG64]: Fix cast.
+
+2013-05-12  Werner Lemberg  <wl@gnu.org>
+
+	Introduce unsigned 64bit type (if available).
+
+	* include/freetype/config/ftconfig.h: Define FT_UINT64 if available.
+	[FT_LONG64]: Provide FT_UInt64.
+
+	* builds/unix/ftconfig.in: Synchronized.
+
+2013-05-12  Werner Lemberg  <wl@gnu.org>
+
+	Fix Savannah bug #38968.
+
+	* include/freetype/ftmodapi.h: Add `FT_EXPORT' to
+	FT_Property_{Set,Get}.
+	* src/base/ftobjs.c: Add `FT_EXPORT_DEF' to
+	FT_Property_{Set,Get}.
+
+2013-05-10  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Clean up bitmap code.
+
+	* src/sfnt/ttsbit.c: Deleted.
+	* src/sfnt/ttsbit0.c: Renamed to `ttsbit.c'.
+	* rules.mk (SFNT_DRV_H): Updated.
+
+2013-05-10  Werner Lemberg  <wl@gnu.org>
+
+	*/* [FT_CONFIG_OPTION_OLD_INTERNALS]: Remove macro and guarded code.
+
+----------------------------------------------------------------------------
+
+Copyright 2013-2015 by
+David Turner, Robert Wilhelm, and Werner Lemberg.
+
+This file is part of the FreeType project, and may only be used, modified,
+and distributed under the terms of the FreeType project license,
+LICENSE.TXT.  By continuing to use, modify, or distribute this file you
+indicate that you have read the license and understand and accept it
+fully.
+
+
+Local Variables:
+version-control: never
+coding: utf-8
+End:
-- 
2.6.2

From 4f7f6f6e47232e3df95174833c1c5bead20e8f9e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sun, 11 Oct 2015 07:55:25 +0200
Subject: [PATCH 037/110] [sfnt] Improve extraction of number of named
 instances.

* src/sfnt/sfobjs.c (sfnt_init_face)
[TT_CONFIG_OPTION_GX_VAR_SUPPORT]: Check number of instances against
`fvar' table size.
---
 ChangeLog         |  8 ++++++++
 src/sfnt/sfobjs.c | 39 +++++++++++++++++++++++++++++++++++----
 2 files changed, 43 insertions(+), 4 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 9464b14..067bf74 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,11 @@
+2015-10-11  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Improve extraction of number of named instances.
+
+	* src/sfnt/sfobjs.c (sfnt_init_face)
+	[TT_CONFIG_OPTION_GX_VAR_SUPPORT]: Check number of instances against
+	`fvar' table size.
+
 2015-10-10  Alexei Podtelezhnikov  <apodtele@gmail.com>
 
 	* src/base/ftoutln.c (FT_Outline_Get_Orientation): Fix overflow
diff --git a/src/sfnt/sfobjs.c b/src/sfnt/sfobjs.c
index 14d3ade..42c7222 100644
--- a/src/sfnt/sfobjs.c
+++ b/src/sfnt/sfobjs.c
@@ -883,9 +883,17 @@
 
 #ifdef TT_CONFIG_OPTION_GX_VAR_SUPPORT
     {
-      FT_ULong   fvar_len;
+      FT_ULong  fvar_len;
+
+      FT_ULong  version;
+      FT_ULong  offset;
+
+      FT_UShort  num_axes;
+      FT_UShort  axis_size;
       FT_UShort  num_instances;
-      FT_Int     instance_index;
+      FT_UShort  instance_size;
+
+      FT_Int  instance_index;
 
 
       instance_index = FT_ABS( face_instance_index ) >> 16;
@@ -893,8 +901,31 @@
       /* test whether current face is a GX font with named instances */
       if ( face->goto_table( face, TTAG_fvar, stream, &fvar_len ) ||
            fvar_len < 20                                          ||
-           FT_STREAM_SKIP( 12 )                                   ||
-           FT_READ_USHORT( num_instances )                        )
+           FT_READ_ULONG( version )                               ||
+           FT_READ_USHORT( offset )                               ||
+           FT_STREAM_SKIP( 2 )                                    ||
+           FT_READ_USHORT( num_axes )                             ||
+           FT_READ_USHORT( axis_size )                            ||
+           FT_READ_USHORT( num_instances )                        ||
+           FT_READ_USHORT( instance_size )                        )
+      {
+        version       = 0;
+        num_axes      = 0;
+        axis_size     = 0;
+        num_instances = 0;
+        instance_size = 0;
+      }
+
+      /* check that the data is bound by the table length; */
+      /* based on similar code in function `TT_Get_MM_Var' */
+      if ( version != 0x00010000UL                    ||
+           axis_size != 20                            ||
+           num_axes > 0x3FFE                          ||
+           instance_size != 4 + 4 * num_axes          ||
+           num_instances > 0x7EFF                     ||
+           offset                          +
+             axis_size * num_axes          +
+             instance_size * num_instances > fvar_len )
         num_instances = 0;
 
       /* we support at most 2^15 - 1 instances */
-- 
2.6.2

From b9880aa0f8f52accc9074334f9e9f962b1b5a8e6 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Mon, 12 Oct 2015 10:13:26 +0200
Subject: [PATCH 038/110] [unix] Make MKDIR_P actually work.

* builds/unix/configure.raw: Fix underquoting of `INSTALL' and
`MKDIR_P'.

Problem reported by Dan Liddell <lddll@yahoo.com>.
---
 ChangeLog                 |  9 +++++++++
 builds/unix/configure.raw | 15 ++++++++-------
 2 files changed, 17 insertions(+), 7 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 067bf74..b02735f 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,12 @@
+2015-10-12  Werner Lemberg  <wl@gnu.org>
+
+	[unix] Make MKDIR_P actually work.
+
+	* builds/unix/configure.raw: Fix underquoting of `INSTALL' and
+	`MKDIR_P'.
+
+	Problem reported by Dan Liddell <lddll@yahoo.com>.
+
 2015-10-11  Werner Lemberg  <wl@gnu.org>
 
 	[sfnt] Improve extraction of number of named instances.
diff --git a/builds/unix/configure.raw b/builds/unix/configure.raw
index 5a30c65..f28baff 100644
--- a/builds/unix/configure.raw
+++ b/builds/unix/configure.raw
@@ -70,24 +70,25 @@ AC_SUBST(CC_BUILD)
 AC_SUBST(EXEEXT_BUILD)
 
 
-# Since this file will be finally moved to another directory we make
-# the path of the install scripts absolute.  This small code snippet has
-# been taken from automake's `ylwrap' script.
+# Since these files will be eventually called from another directory (namely
+# from the top level) we make the path of the scripts absolute.
+#
+# This small code snippet has been taken from automake's `ylwrap' script.
 
 AC_PROG_INSTALL
 case "$INSTALL" in
-[\\/]* | ?:[\\/]*)
+[[\\/]]* | ?:[[\\/]]*)
   ;;
-*[\\/]*)
+*[[\\/]]*)
   INSTALL="`pwd`/$INSTALL"
   ;;
 esac
 
 AC_PROG_MKDIR_P
 case "$MKDIR_P" in
-[\\/]* | ?:[\\/]*)
+[[\\/]]* | ?:[[\\/]]*)
   ;;
-*[\\/]*)
+*[[\\/]]*)
   MKDIR_P="`pwd`/$MKDIR_P"
   ;;
 esac
-- 
2.6.2

From f96094eef0541af5fa09c4a3fed61ac143de8121 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 13 Oct 2015 07:13:56 +0200
Subject: [PATCH 039/110] [truetype] Fix commit from 2015-10-10.

* src/truetype/ttgxvar.c (ft_var_load_gvar): Add missing error
handling body to condition.
---
 ChangeLog              | 7 +++++++
 src/truetype/ttgxvar.c | 5 +++++
 2 files changed, 12 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index b02735f..73a717b 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-13  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix commit from 2015-10-10.
+
+	* src/truetype/ttgxvar.c (ft_var_load_gvar): Add missing error
+	handling body to condition.
+
 2015-10-12  Werner Lemberg  <wl@gnu.org>
 
 	[unix] Make MKDIR_P actually work.
diff --git a/src/truetype/ttgxvar.c b/src/truetype/ttgxvar.c
index b8ff141..31954e2 100644
--- a/src/truetype/ttgxvar.c
+++ b/src/truetype/ttgxvar.c
@@ -489,6 +489,11 @@
     /* and a single variation needs at least 4 bytes per glyph */
     if ( (FT_ULong)gvar_head.glyphCount *
            ( ( gvar_head.flags & 1 ) ? 8 : 6 ) > table_len )
+    {
+      FT_TRACE1(( "ft_var_load_gvar: invalid number of glyphs\n" ));
+      error = FT_THROW( Invalid_Table );
+      goto Exit;
+    }
 
     FT_TRACE2(( "loaded\n" ));
 
-- 
2.6.2

From 7ef0d8661afb31a446e36f33cdae31bd4398c99d Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 13 Oct 2015 08:14:20 +0200
Subject: [PATCH 040/110] [truetype] Fix memory leak for broken GX fonts
 (#46188).

* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Fix scope of
deallocation.
---
 ChangeLog              | 7 +++++++
 src/truetype/ttgxvar.c | 4 ++--
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 73a717b..96e45a6 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-13  Werner Lemberg  <wl@gnu.org>
 
+	[truetype] Fix memory leak for broken GX fonts (#46188).
+
+	* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Fix scope of
+	deallocation.
+
+2015-10-13  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] Fix commit from 2015-10-10.
 
 	* src/truetype/ttgxvar.c (ft_var_load_gvar): Add missing error
diff --git a/src/truetype/ttgxvar.c b/src/truetype/ttgxvar.c
index 31954e2..2f11504 100644
--- a/src/truetype/ttgxvar.c
+++ b/src/truetype/ttgxvar.c
@@ -2059,8 +2059,6 @@
 
       if ( localpoints != ALL_POINTS )
         FT_FREE( localpoints );
-      if ( sharedpoints != ALL_POINTS )
-        FT_FREE( sharedpoints );
       FT_FREE( deltas_x );
       FT_FREE( deltas_y );
 
@@ -2072,6 +2070,8 @@
     FT_TRACE5(( "\n" ));
 
   Fail2:
+    if ( sharedpoints != ALL_POINTS )
+      FT_FREE( sharedpoints );
     FT_FREE( tuple_coords );
     FT_FREE( im_start_coords );
     FT_FREE( im_end_coords );
-- 
2.6.2

From 052f6c5649f7a46e599742eb6f47fa91d090f77e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 13 Oct 2015 08:24:32 +0200
Subject: [PATCH 041/110] [truetype] Another GX sanity test.

* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Check
`tupleCount'.
Add tracing message.
---
 ChangeLog              |  8 ++++++++
 src/truetype/ttgxvar.c | 17 ++++++++++++++++-
 2 files changed, 24 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 96e45a6..ba383ef 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,13 @@
 2015-10-13  Werner Lemberg  <wl@gnu.org>
 
+	[truetype] Another GX sanity test.
+
+	* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Check
+	`tupleCount'.
+	Add tracing message.
+
+2015-10-13  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] Fix memory leak for broken GX fonts (#46188).
 
 	* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Fix scope of
diff --git a/src/truetype/ttgxvar.c b/src/truetype/ttgxvar.c
index 2f11504..3ae31d6 100644
--- a/src/truetype/ttgxvar.c
+++ b/src/truetype/ttgxvar.c
@@ -1864,7 +1864,19 @@
       goto Fail2;
 
     tupleCount   = FT_GET_USHORT();
-    offsetToData = glyph_start + FT_GET_USHORT();
+    offsetToData = FT_GET_USHORT();
+
+    /* rough sanity test */
+    if ( offsetToData + tupleCount * 4 > stream->size - stream->pos )
+    {
+      FT_TRACE2(( "TT_Vary_Apply_Glyph_Deltas:"
+                  " invalid glyph variation array header\n" ));
+
+      error = FT_THROW( Invalid_Table );
+      goto Fail2;
+    }
+
+    offsetToData += glyph_start;
 
     if ( tupleCount & GX_TC_TUPLES_SHARE_POINT_NUMBERS )
     {
@@ -1901,6 +1913,9 @@
       }
       else if ( ( tupleIndex & GX_TI_TUPLE_INDEX_MASK ) >= blend->tuplecount )
       {
+        FT_TRACE2(( "TT_Vary_Apply_Glyph_Deltas:"
+                    " invalid tuple index\n" ));
+
         error = FT_THROW( Invalid_Table );
         goto Fail2;
       }
-- 
2.6.2

From 43a96eb26f28dfc78fd48cab34e90f6f468c42da Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 13 Oct 2015 11:18:55 +0200
Subject: [PATCH 042/110] [truetype] Refine some GX sanity tests.

Use the `gvar' table size instead of the remaining bytes in the
stream.

* src/truetype/ttgxvar.h (GX_BlendRec): New field `gvar_size'.

* src/truetype/ttgxvar.c (ft_var_load_gvar): Set `gvar_size'.
(ft_var_readpackedpoints, ft_var_readpackeddeltas: New argument
`size'.
(tt_face_vary_cvt, TT_Vary_Apply_Glyph_Deltas): Updated.
---
 ChangeLog              | 14 ++++++++++++++
 src/truetype/ttgxvar.c | 28 ++++++++++++++++++++++------
 src/truetype/ttgxvar.h |  2 ++
 3 files changed, 38 insertions(+), 6 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index ba383ef..2163162 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,19 @@
 2015-10-13  Werner Lemberg  <wl@gnu.org>
 
+	[truetype] Refine some GX sanity tests.
+
+	Use the `gvar' table size instead of the remaining bytes in the
+	stream.
+
+	* src/truetype/ttgxvar.h (GX_BlendRec): New field `gvar_size'.
+
+	* src/truetype/ttgxvar.c (ft_var_load_gvar): Set `gvar_size'.
+	(ft_var_readpackedpoints, ft_var_readpackeddeltas: New argument
+	`size'.
+	(tt_face_vary_cvt, TT_Vary_Apply_Glyph_Deltas): Updated.
+
+2015-10-13  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] Another GX sanity test.
 
 	* src/truetype/ttgxvar.c (TT_Vary_Apply_Glyph_Deltas): Check
diff --git a/src/truetype/ttgxvar.c b/src/truetype/ttgxvar.c
index 3ae31d6..5d4384e 100644
--- a/src/truetype/ttgxvar.c
+++ b/src/truetype/ttgxvar.c
@@ -112,6 +112,8 @@
   /* <Input>                                                               */
   /*    stream    :: The data stream.                                      */
   /*                                                                       */
+  /*    size      :: The size of the table holding the data.               */
+  /*                                                                       */
   /* <Output>                                                              */
   /*    point_cnt :: The number of points read.  A zero value means that   */
   /*                 all points in the glyph will be affected, without     */
@@ -123,6 +125,7 @@
   /*                                                                       */
   static FT_UShort*
   ft_var_readpackedpoints( FT_Stream  stream,
+                           FT_ULong   size,
                            FT_UInt   *point_cnt )
   {
     FT_UShort *points = NULL;
@@ -149,7 +152,7 @@
       n  |= FT_GET_BYTE();
     }
 
-    if ( n > stream->size - stream->pos )
+    if ( n > size )
     {
       FT_TRACE1(( "ft_var_readpackedpoints: number of points too large\n" ));
       return NULL;
@@ -218,6 +221,8 @@
   /* <Input>                                                               */
   /*    stream    :: The data stream.                                      */
   /*                                                                       */
+  /*    size      :: The size of the table holding the data.               */
+  /*                                                                       */
   /*    delta_cnt :: The number of deltas to be read.                      */
   /*                                                                       */
   /* <Return>                                                              */
@@ -228,6 +233,7 @@
   /*                                                                       */
   static FT_Short*
   ft_var_readpackeddeltas( FT_Stream  stream,
+                           FT_ULong   size,
                            FT_UInt    delta_cnt )
   {
     FT_Short  *deltas = NULL;
@@ -239,7 +245,7 @@
     FT_UNUSED( error );
 
 
-    if ( delta_cnt > stream->size - stream->pos )
+    if ( delta_cnt > size )
     {
       FT_TRACE1(( "ft_var_readpackeddeltas: number of points too large\n" ));
       return NULL;
@@ -497,6 +503,7 @@
 
     FT_TRACE2(( "loaded\n" ));
 
+    blend->gvar_size   = table_len;
     blend->tuplecount  = gvar_head.globalCoordCount;
     blend->gv_glyphcnt = gvar_head.glyphCount;
     offsetToData       = gvar_start + gvar_head.offsetToData;
@@ -1466,8 +1473,11 @@
 
       FT_Stream_SeekSet( stream, offsetToData );
 
-      localpoints = ft_var_readpackedpoints( stream, &point_count );
+      localpoints = ft_var_readpackedpoints( stream,
+                                             table_len,
+                                             &point_count );
       deltas      = ft_var_readpackeddeltas( stream,
+                                             table_len,
                                              point_count == 0 ? face->cvt_size
                                                               : point_count );
       if ( localpoints == NULL || deltas == NULL )
@@ -1867,7 +1877,7 @@
     offsetToData = FT_GET_USHORT();
 
     /* rough sanity test */
-    if ( offsetToData + tupleCount * 4 > stream->size - stream->pos )
+    if ( offsetToData + tupleCount * 4 > blend->gvar_size )
     {
       FT_TRACE2(( "TT_Vary_Apply_Glyph_Deltas:"
                   " invalid glyph variation array header\n" ));
@@ -1884,7 +1894,9 @@
 
       FT_Stream_SeekSet( stream, offsetToData );
 
-      sharedpoints = ft_var_readpackedpoints( stream, &spoint_count );
+      sharedpoints = ft_var_readpackedpoints( stream,
+                                              blend->gvar_size,
+                                              &spoint_count );
       offsetToData = FT_Stream_FTell( stream );
 
       FT_Stream_SeekSet( stream, here );
@@ -1951,7 +1963,9 @@
       {
         FT_Stream_SeekSet( stream, offsetToData );
 
-        localpoints = ft_var_readpackedpoints( stream, &point_count );
+        localpoints = ft_var_readpackedpoints( stream,
+                                               blend->gvar_size,
+                                               &point_count );
         points      = localpoints;
       }
       else
@@ -1961,9 +1975,11 @@
       }
 
       deltas_x = ft_var_readpackeddeltas( stream,
+                                          blend->gvar_size,
                                           point_count == 0 ? n_points
                                                            : point_count );
       deltas_y = ft_var_readpackeddeltas( stream,
+                                          blend->gvar_size,
                                           point_count == 0 ? n_points
                                                            : point_count );
 
diff --git a/src/truetype/ttgxvar.h b/src/truetype/ttgxvar.h
index 060d4d6..dd1411f 100644
--- a/src/truetype/ttgxvar.h
+++ b/src/truetype/ttgxvar.h
@@ -95,6 +95,8 @@ FT_BEGIN_HEADER
     FT_UInt         gv_glyphcnt;
     FT_ULong*       glyphoffsets;
 
+    FT_ULong        gvar_size;
+
   } GX_BlendRec;
 
 
-- 
2.6.2

From bdb56bba866ddd3532bce008156bd3763614aa0e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 13 Oct 2015 11:51:13 +0200
Subject: [PATCH 043/110] [ftfuzzer] Handle TTCs and MM/GX variations.

This patch also contains various other improvements.

* src/tools/ftfuzzer/ftfuzzer.cc: Add preprocessor guard to reject
pre-C++11 compilers.
(FT_Global): New class.  Use it to provide a global constructor and
destructor for the `FT_Library' object.
(setIntermediateAxis): New function to select an (arbitrary)
instance.
(LLVMFuzzerTestOneInput): Loop over all faces and named instances.
Also call `FT_Set_Char_Size'.
---
 ChangeLog                      |  15 +++++
 src/tools/ftfuzzer/ftfuzzer.cc | 149 ++++++++++++++++++++++++++++++++++-------
 2 files changed, 139 insertions(+), 25 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 2163162..b8a99e2 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,20 @@
 2015-10-13  Werner Lemberg  <wl@gnu.org>
 
+	[ftfuzzer] Handle TTCs and MM/GX variations.
+
+	This patch also contains various other improvements.
+
+	* src/tools/ftfuzzer/ftfuzzer.cc: Add preprocessor guard to reject
+	pre-C++11 compilers.
+	(FT_Global): New class.  Use it to provide a global constructor and
+	destructor for the `FT_Library' object.
+	(setIntermediateAxis): New function to select an (arbitrary)
+	instance.
+	(LLVMFuzzerTestOneInput): Loop over all faces and named instances.
+	Also call `FT_Set_Char_Size'.
+
+2015-10-13  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] Refine some GX sanity tests.
 
 	Use the `gvar' table size instead of the remaining bytes in the
diff --git a/src/tools/ftfuzzer/ftfuzzer.cc b/src/tools/ftfuzzer/ftfuzzer.cc
index 7b71973..c4f5977 100644
--- a/src/tools/ftfuzzer/ftfuzzer.cc
+++ b/src/tools/ftfuzzer/ftfuzzer.cc
@@ -1,6 +1,18 @@
+// we use `unique_ptr' and `decltype', defined since C++11
+#if __cplusplus < 201103L
+#  error "a C++11 compiler is needed"
+#endif
+
 #include <assert.h>
 #include <stdint.h>
 
+#include <memory>
+#include <vector>
+
+
+using namespace std;
+
+
 #include <ft2build.h>
 
 #include FT_FREETYPE_H
@@ -16,60 +28,147 @@
 #include FT_MODULE_H
 #include FT_CFF_DRIVER_H
 #include FT_TRUETYPE_DRIVER_H
+#include FT_MULTIPLE_MASTERS_H
 
 
   static FT_Library  library;
-  static int         InitResult = FT_Init_FreeType( &library );
+  static int         InitResult;
+
+  struct FT_Global {
+    FT_Global() {
+      InitResult = FT_Init_FreeType( &library );
+    }
+    ~FT_Global() {
+      FT_Done_FreeType( library );
+    }
+  };
+
+  FT_Global  global_ft;
+
+
+  static void
+  setIntermediateAxis( FT_Face  face )
+  {
+    // only handle Multiple Masters and GX variation fonts
+    if ( !( face->face_flags & FT_FACE_FLAG_MULTIPLE_MASTERS ) )
+      return;
+
+    // get variation data for current instance
+    FT_MM_Var*  variations_ptr = nullptr;
+    if ( FT_Get_MM_Var( face, &variations_ptr ) )
+      return;
+
+    unique_ptr<FT_MM_Var,
+               decltype ( free )*>  variations( variations_ptr, free );
+    vector<FT_Fixed>                coords( variations->num_axis );
+
+    // select an arbitrary instance
+    for ( unsigned int  i = 0; i < variations->num_axis; i++ )
+      coords[i] = ( variations->axis[i].minimum +
+                    variations->axis[i].def     ) / 2;
+
+    if ( FT_Set_Var_Design_Coordinates( face,
+                                        coords.size(),
+                                        coords.data() ) )
+      return;
+  }
 
 
   extern "C" int
   LLVMFuzzerTestOneInput( const uint8_t*  data,
-                          size_t          size )
+                          size_t          size_ )
   {
     assert( !InitResult );
 
-    if ( size < 1 )
+    if ( size_ < 1 )
       return 0;
 
+    long  size = (long)size_;
+
     FT_Face         face;
     FT_Int32        load_flags  = FT_LOAD_DEFAULT;
+#if 0
     FT_Render_Mode  render_mode = FT_RENDER_MODE_NORMAL;
+#endif
+
+    // We use a conservative approach here, at the cost of calling
+    // `FT_New_Face' quite often.  The idea is that the fuzzer should be
+    // able to try all faces and named instances of a font, expecting that
+    // some faces don't work for various reasons, e.g., a broken subfont, or
+    // an unsupported NFNT bitmap font in a Mac dfont resource that holds
+    // more than a single font.
 
-    if ( !FT_New_Memory_Face( library, data, size, 0, &face ) )
+    // get number of faces
+    if ( FT_New_Memory_Face( library, data, size, -1, &face ) )
+      return 0;
+    long  num_faces = face->num_faces;
+    FT_Done_Face( face );
+
+    // loop over all faces
+    for ( long  face_index = 0;
+          face_index < num_faces;
+          face_index++ )
     {
-      unsigned int  first_index = 0;
+      // get number of instances
+      if ( FT_New_Memory_Face( library,
+                               data,
+                               size,
+                               -( face_index + 1 ),
+                               &face ) )
+        continue;
+      long  num_instances = face->style_flags >> 16;
+      FT_Done_Face( face );
 
-      for ( unsigned i = first_index;
-            i < (unsigned int)face->num_glyphs;
-            i++ )
+      // load face with and without instances
+      for ( long  instance_index = 0;
+            instance_index < num_instances + 1;
+            instance_index++ )
       {
-        if ( FT_Load_Glyph( face, i, load_flags ) )
+        if ( FT_New_Memory_Face( library,
+                                 data,
+                                 size,
+                                 ( instance_index << 16 ) + face_index,
+                                 &face ) )
           continue;
 
-        // Rendering is the most expensive and the least interesting part.
-        //
-        // if ( FT_Render_Glyph( face->glyph, render_mode) )
-        //   continue;
-        // FT_GlyphSlot_Embolden( face->glyph );
+        // set up 20pt at 72dpi as an arbitrary size
+        FT_Set_Char_Size( face, 20, 20, 72, 72 );
 
-#if 0
-        FT_Glyph  glyph;
+        // test MM interface only for a face without a selected instance
+        if ( instance_index == 0 )
+          setIntermediateAxis( face );
+
+        // loop over all glyphs
+        for ( unsigned int  glyph_index = 0;
+              glyph_index < (unsigned int)face->num_glyphs;
+              glyph_index++ )
+        {
+          if ( FT_Load_Glyph( face, glyph_index, load_flags ) )
+            continue;
 
-        if ( !FT_Get_Glyph( face->glyph, &glyph ) )
-          FT_Done_Glyph( glyph );
+          // Rendering is the most expensive and the least interesting part.
+          //
+          // if ( FT_Render_Glyph( face->glyph, render_mode) )
+          //   continue;
+          // FT_GlyphSlot_Embolden( face->glyph );
 
-        FT_Outline*  outline = &face->glyph->outline;
-        FT_Matrix    rot30   = { 0xDDB4, -0x8000, 0x8000, 0xDDB4 };
+#if 0
+          FT_Glyph  glyph;
+          if ( !FT_Get_Glyph( face->glyph, &glyph ) )
+            FT_Done_Glyph( glyph );
 
-        FT_Outline_Transform( outline, &rot30 );
+          FT_Outline*  outline = &face->glyph->outline;
+          FT_Matrix    rot30   = { 0xDDB4, -0x8000, 0x8000, 0xDDB4 };
 
-        FT_BBox  bbox;
+          FT_Outline_Transform( outline, &rot30 );
 
-        FT_Outline_Get_BBox( outline, &bbox );
+          FT_BBox  bbox;
+          FT_Outline_Get_BBox( outline, &bbox );
 #endif
-      }
+        }
 
-      FT_Done_Face( face );
+        FT_Done_Face( face );
+      }
     }
 
     return 0;
-- 
2.6.2

From 58b61b6e05597112f8673e5ab9bd175f59e2db5e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 13 Oct 2015 18:26:18 +0200
Subject: [PATCH 044/110] [pcf] Quickly exit if font index < 0.

Similar to other font formats, this commit makes the parser no
longer check the whole PCF file but only the header and the TOC if
we just want to get the number of available faces (and a proper
recognition of the font format).

* src/pcf/pcfdrivr.c (PCF_Face_Init): Updated.
Exit quickly if face_index < 0.

* src/pcfread.c (pcf_load_font): Add `face_index' argument.
Exit quickly if face_index < 0.

* src/pcf/pcf.h: Updated.
---
 ChangeLog          | 17 +++++++++++++++++
 src/pcf/pcf.h      |  5 +++--
 src/pcf/pcfdrivr.c |  8 +++++---
 src/pcf/pcfread.c  | 15 ++++++++++-----
 4 files changed, 35 insertions(+), 10 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index b8a99e2..aa5c7b5 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,22 @@
 2015-10-13  Werner Lemberg  <wl@gnu.org>
 
+	[pcf] Quickly exit if font index < 0.
+
+	Similar to other font formats, this commit makes the parser no
+	longer check the whole PCF file but only the header and the TOC if
+	we just want to get the number of available faces (and a proper
+	recognition of the font format).
+
+	* src/pcf/pcfdrivr.c (PCF_Face_Init): Updated.
+	Exit quickly if face_index < 0.
+
+	* src/pcfread.c (pcf_load_font): Add `face_index' argument.
+	Exit quickly if face_index < 0.
+
+	* src/pcf/pcf.h: Updated.
+
+2015-10-13  Werner Lemberg  <wl@gnu.org>
+
 	[ftfuzzer] Handle TTCs and MM/GX variations.
 
 	This patch also contains various other improvements.
diff --git a/src/pcf/pcf.h b/src/pcf/pcf.h
index c0da503..253a33f 100644
--- a/src/pcf/pcf.h
+++ b/src/pcf/pcf.h
@@ -226,8 +226,9 @@ FT_BEGIN_HEADER
 #define GLYPHPADOPTIONS  4 /* I'm not sure about this */
 
   FT_LOCAL( FT_Error )
-  pcf_load_font( FT_Stream,
-                 PCF_Face );
+  pcf_load_font( FT_Stream  stream,
+                 PCF_Face   face,
+                 FT_Long    face_index );
 
 FT_END_HEADER
 
diff --git a/src/pcf/pcfdrivr.c b/src/pcf/pcfdrivr.c
index 8d2ed7c..0f4c518 100644
--- a/src/pcf/pcfdrivr.c
+++ b/src/pcf/pcfdrivr.c
@@ -271,7 +271,7 @@ THE SOFTWARE.
 
     FT_TRACE2(( "PCF driver\n" ));
 
-    error = pcf_load_font( stream, face );
+    error = pcf_load_font( stream, face, face_index );
     if ( error )
     {
       PCF_Face_Done( pcfface );
@@ -332,7 +332,7 @@ THE SOFTWARE.
 
       stream = pcfface->stream;
 
-      error = pcf_load_font( stream, face );
+      error = pcf_load_font( stream, face, face_index );
       if ( error )
         goto Fail;
 
@@ -351,7 +351,9 @@ THE SOFTWARE.
      *      an invalid argument error when the font could be
      *      opened by the specified driver.
      */
-    if ( face_index > 0 && ( face_index & 0xFFFF ) > 0 )
+    if ( face_index < 0 )
+      goto Exit;
+    else if ( face_index > 0 && ( face_index & 0xFFFF ) > 0 )
     {
       FT_ERROR(( "PCF_Face_Init: invalid face index\n" ));
       PCF_Face_Done( pcfface );
diff --git a/src/pcf/pcfread.c b/src/pcf/pcfread.c
index 6a248cf..fca677f 100644
--- a/src/pcf/pcfread.c
+++ b/src/pcf/pcfread.c
@@ -1184,8 +1184,10 @@ THE SOFTWARE.
 
   FT_LOCAL_DEF( FT_Error )
   pcf_load_font( FT_Stream  stream,
-                 PCF_Face   face )
+                 PCF_Face   face,
+                 FT_Long    face_index )
   {
+    FT_Face    root   = FT_FACE( face );
     FT_Error   error;
     FT_Memory  memory = FT_FACE( face )->memory;
     FT_Bool    hasBDFAccelerators;
@@ -1195,6 +1197,13 @@ THE SOFTWARE.
     if ( error )
       goto Exit;
 
+    root->num_faces  = 1;
+    root->face_index = 0;
+
+    /* If we are performing a simple font format check, exit immediately. */
+    if ( face_index < 0 )
+      return FT_Err_Ok;
+
     error = pcf_get_properties( stream, face );
     if ( error )
       goto Exit;
@@ -1237,13 +1246,9 @@ THE SOFTWARE.
 
     /* now construct the face object */
     {
-      FT_Face       root = FT_FACE( face );
       PCF_Property  prop;
 
 
-      root->num_faces  = 1;
-      root->face_index = 0;
-
       root->face_flags |= FT_FACE_FLAG_FIXED_SIZES |
                           FT_FACE_FLAG_HORIZONTAL  |
                           FT_FACE_FLAG_FAST_GLYPHS;
-- 
2.6.2

From 8539915d1873169cc419cc5931dac8dbe6e6d04c Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 13 Oct 2015 20:43:19 +0200
Subject: [PATCH 045/110] [type1] Correctly handle missing MM axis names
 (#46202).

* src/type1/t1load.c (T1_Get_MM_Var): Implement it.
---
 ChangeLog          | 6 ++++++
 src/type1/t1load.c | 3 +++
 2 files changed, 9 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index aa5c7b5..f9615d5 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,11 @@
 2015-10-13  Werner Lemberg  <wl@gnu.org>
 
+	[type1] Correctly handle missing MM axis names (#46202).
+
+	* src/type1/t1load.c (T1_Get_MM_Var): Implement it.
+
+2015-10-13  Werner Lemberg  <wl@gnu.org>
+
 	[pcf] Quickly exit if font index < 0.
 
 	Similar to other font formats, this commit makes the parser no
diff --git a/src/type1/t1load.c b/src/type1/t1load.c
index 01fb60f..4ce1e35 100644
--- a/src/type1/t1load.c
+++ b/src/type1/t1load.c
@@ -336,6 +336,9 @@
       mmvar->axis[i].strid   = ~0U;                      /* Does not apply */
       mmvar->axis[i].tag     = ~0U;                      /* Does not apply */
 
+      if ( !mmvar->axis[i].name )
+        continue;
+
       if ( ft_strcmp( mmvar->axis[i].name, "Weight" ) == 0 )
         mmvar->axis[i].tag = FT_MAKE_TAG( 'w', 'g', 'h', 't' );
       else if ( ft_strcmp( mmvar->axis[i].name, "Width" ) == 0 )
-- 
2.6.2

From 2a20c92c4bd022923885252ec9264642533ba809 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 14 Oct 2015 15:23:15 +0200
Subject: [PATCH 046/110] [base] Use `FT_' namespace for MD5 functions
 (#42366).

* src/base/ftobjs.c (MD5_*): Define as `FT_MD5_*'.
Undefine HAVE_OPENSSL.
---
 ChangeLog         |  7 +++++++
 src/base/ftobjs.c | 13 ++++++++++++-
 2 files changed, 19 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index f9615d5..d7143ac 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-14  Werner Lemberg  <wl@gnu.org>
+
+	[base] Use `FT_' namespace for MD5 functions (#42366).
+
+	* src/base/ftobjs.c (MD5_*): Define as `FT_MD5_*'.
+	Undefine HAVE_OPENSSL.
+
 2015-10-13  Werner Lemberg  <wl@gnu.org>
 
 	[type1] Correctly handle missing MM axis names (#46202).
diff --git a/src/base/ftobjs.c b/src/base/ftobjs.c
index f0c2e77..dd5cb03 100644
--- a/src/base/ftobjs.c
+++ b/src/base/ftobjs.c
@@ -55,7 +55,18 @@
 #pragma warning( disable : 4244 )
 #endif /* _MSC_VER */
 
-  /* it's easiest to include `md5.c' directly */
+  /* It's easiest to include `md5.c' directly.  However, since OpenSSL */
+  /* also provides the same functions, there might be conflicts if     */
+  /* both FreeType and OpenSSL are built as static libraries.  For     */
+  /* this reason, we put the MD5 stuff into the `FT_' namespace.       */
+#define MD5_u32plus  FT_MD5_u32plus
+#define MD5_CTX      FT_MD5_CTX
+#define MD5_Init     FT_MD5_Init
+#define MD5_Update   FT_MD5_Update
+#define MD5_Final    FT_MD5_Final
+
+#undef  HAVE_OPENSSL
+
 #include "md5.c"
 
 #if defined( _MSC_VER )
-- 
2.6.2

From 6de2a355ffdef0944434a32202251ff064c624f9 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 15 Oct 2015 08:40:12 +0200
Subject: [PATCH 047/110] Minor.

---
 src/truetype/ttpload.c | 6 ++++--
 1 file changed, 4 insertions(+), 2 deletions(-)

diff --git a/src/truetype/ttpload.c b/src/truetype/ttpload.c
index 4647c93..814c90c 100644
--- a/src/truetype/ttpload.c
+++ b/src/truetype/ttpload.c
@@ -222,7 +222,8 @@
     if ( pos1 > face->glyf_len )
     {
       FT_TRACE1(( "tt_face_get_location:"
-                  " too large offset=0x%08lx found for gid=0x%04lx,"
+                  " too large offset=0x%08lx found for gid=0x%04lx,\n"
+                  "                     "
                   " exceeding the end of glyf table (0x%08lx)\n",
                   pos1, gindex, face->glyf_len ));
       *asize = 0;
@@ -232,7 +233,8 @@
     if ( pos2 > face->glyf_len )
     {
       FT_TRACE1(( "tt_face_get_location:"
-                  " too large offset=0x%08lx found for gid=0x%04lx,"
+                  " too large offset=0x%08lx found for gid=0x%04lx,\n"
+                  "                     "
                   " truncate at the end of glyf table (0x%08lx)\n",
                   pos2, gindex + 1, face->glyf_len ));
       pos2 = face->glyf_len;
-- 
2.6.2

From e03214e166c61b91ecb76e3b5fa5ee1c2a66ac56 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 15 Oct 2015 16:58:13 +0200
Subject: [PATCH 048/110] [base] Compute MD5 checksums only if explicitly
 requested.

This improves profiling accuracy.

* src/base/ftobjs.c (FT_Render_Glyph_Internal): Implement it.
---
 ChangeLog         |  8 +++++++
 src/base/ftobjs.c | 67 ++++++++++++++++++++++++++++++++-----------------------
 2 files changed, 47 insertions(+), 28 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index d7143ac..ef51026 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,11 @@
+2015-10-15  Werner Lemberg  <wl@gnu.org>
+
+	[base] Compute MD5 checksums only if explicitly requested.
+
+	This improves profiling accuracy.
+
+	* src/base/ftobjs.c (FT_Render_Glyph_Internal): Implement it.
+
 2015-10-14  Werner Lemberg  <wl@gnu.org>
 
 	[base] Use `FT_' namespace for MD5 functions (#42366).
diff --git a/src/base/ftobjs.c b/src/base/ftobjs.c
index dd5cb03..dc3a513 100644
--- a/src/base/ftobjs.c
+++ b/src/base/ftobjs.c
@@ -4167,39 +4167,50 @@
 #undef  FT_COMPONENT
 #define FT_COMPONENT  trace_bitmap
 
-    /* we convert to a single bitmap format for computing the checksum */
-    if ( !error )
+    /*
+     * Computing the MD5 checksum is expensive, unnecessarily distorting a
+     * possible profiling of FreeType if compiled with tracing support.  For
+     * this reason, we execute the following code only if explicitly
+     * requested.
+     */
+
+    /* we use FT_TRACE3 in this block */
+    if ( ft_trace_levels[trace_bitmap] >= 3 )
     {
-      FT_Bitmap  bitmap;
-      FT_Error   err;
+      /* we convert to a single bitmap format for computing the checksum */
+      if ( !error )
+      {
+        FT_Bitmap  bitmap;
+        FT_Error   err;
 
 
-      FT_Bitmap_Init( &bitmap );
+        FT_Bitmap_Init( &bitmap );
 
-      /* this also converts the bitmap flow to `down' (i.e., pitch > 0) */
-      err = FT_Bitmap_Convert( library, &slot->bitmap, &bitmap, 1 );
-      if ( !err )
-      {
-        MD5_CTX        ctx;
-        unsigned char  md5[16];
-        int            i;
-        unsigned int   rows  = bitmap.rows;
-        unsigned int   pitch = (unsigned int)bitmap.pitch;
-
-
-        MD5_Init( &ctx );
-        MD5_Update( &ctx, bitmap.buffer, rows * pitch );
-        MD5_Final( md5, &ctx );
-
-        FT_TRACE3(( "MD5 checksum for %dx%d bitmap:\n"
-                    "  ",
-                    rows, pitch ));
-        for ( i = 0; i < 16; i++ )
-          FT_TRACE3(( "%02X", md5[i] ));
-        FT_TRACE3(( "\n" ));
-      }
+        /* this also converts the bitmap flow to `down' (i.e., pitch > 0) */
+        err = FT_Bitmap_Convert( library, &slot->bitmap, &bitmap, 1 );
+        if ( !err )
+        {
+          MD5_CTX        ctx;
+          unsigned char  md5[16];
+          int            i;
+          unsigned int   rows  = bitmap.rows;
+          unsigned int   pitch = (unsigned int)bitmap.pitch;
+
+
+          MD5_Init( &ctx );
+          MD5_Update( &ctx, bitmap.buffer, rows * pitch );
+          MD5_Final( md5, &ctx );
+
+          FT_TRACE3(( "MD5 checksum for %dx%d bitmap:\n"
+                      "  ",
+                      rows, pitch ));
+          for ( i = 0; i < 16; i++ )
+            FT_TRACE3(( "%02X", md5[i] ));
+          FT_TRACE3(( "\n" ));
+        }
 
-      FT_Bitmap_Done( library, &bitmap );
+        FT_Bitmap_Done( library, &bitmap );
+      }
     }
 
 #undef  FT_COMPONENT
-- 
2.6.2

From 8b76eaf092f2b100f9a111c429d2c71c0a76fe91 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 15 Oct 2015 18:28:43 +0200
Subject: [PATCH 049/110] * src/tools/ftfuzzer/ftfuzzer.cc: Handle fixed sizes
 (#46211).

---
 ChangeLog                      |  5 +++
 src/tools/ftfuzzer/ftfuzzer.cc | 73 ++++++++++++++++++++++++++----------------
 2 files changed, 50 insertions(+), 28 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index ef51026..0edd845 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,8 @@
+2015-10-15  Bungeman  <bungeman@gmail.com>
+	    Werner Lemberg  <wl@gnu.org>
+
+	* src/tools/ftfuzzer/ftfuzzer.cc: Handle fixed sizes (#46211).
+
 2015-10-15  Werner Lemberg  <wl@gnu.org>
 
 	[base] Compute MD5 checksums only if explicitly requested.
diff --git a/src/tools/ftfuzzer/ftfuzzer.cc b/src/tools/ftfuzzer/ftfuzzer.cc
index c4f5977..e5ab293 100644
--- a/src/tools/ftfuzzer/ftfuzzer.cc
+++ b/src/tools/ftfuzzer/ftfuzzer.cc
@@ -131,42 +131,59 @@ using namespace std;
                                  &face ) )
           continue;
 
-        // set up 20pt at 72dpi as an arbitrary size
-        FT_Set_Char_Size( face, 20, 20, 72, 72 );
-
-        // test MM interface only for a face without a selected instance
-        if ( instance_index == 0 )
-          setIntermediateAxis( face );
-
-        // loop over all glyphs
-        for ( unsigned int  glyph_index = 0;
-              glyph_index < (unsigned int)face->num_glyphs;
-              glyph_index++ )
+        // loop over all bitmap stroke sizes
+        // and an arbitrary size for outlines
+        for ( long  fixed_sizes_index = 0;
+              fixed_sizes_index < face->num_fixed_sizes + 1;
+              fixed_sizes_index++ )
         {
-          if ( FT_Load_Glyph( face, glyph_index, load_flags ) )
-            continue;
-
-          // Rendering is the most expensive and the least interesting part.
-          //
-          // if ( FT_Render_Glyph( face->glyph, render_mode) )
-          //   continue;
-          // FT_GlyphSlot_Embolden( face->glyph );
+          FT_Int32  flags = load_flags;
+
+          if ( !fixed_sizes_index )
+          {
+            // set up 20pt at 72dpi as an arbitrary size
+            FT_Set_Char_Size( face, 20, 20, 72, 72 );
+            flags |= FT_LOAD_NO_BITMAP;
+          }
+          else
+          {
+            FT_Select_Size( face, fixed_sizes_index - 1 );
+            flags |= FT_LOAD_COLOR;
+          }
+
+          // test MM interface only for a face without a selected instance
+          if ( instance_index == 0 )
+            setIntermediateAxis( face );
+
+          // loop over all glyphs
+          for ( unsigned int  glyph_index = 0;
+                glyph_index < (unsigned int)face->num_glyphs;
+                glyph_index++ )
+          {
+            if ( FT_Load_Glyph( face, glyph_index, flags ) )
+              continue;
+
+            // Rendering is the most expensive and the least interesting part.
+            //
+            // if ( FT_Render_Glyph( face->glyph, render_mode) )
+            //   continue;
+            // FT_GlyphSlot_Embolden( face->glyph );
 
 #if 0
-          FT_Glyph  glyph;
-          if ( !FT_Get_Glyph( face->glyph, &glyph ) )
-            FT_Done_Glyph( glyph );
+            FT_Glyph  glyph;
+            if ( !FT_Get_Glyph( face->glyph, &glyph ) )
+              FT_Done_Glyph( glyph );
 
-          FT_Outline*  outline = &face->glyph->outline;
-          FT_Matrix    rot30   = { 0xDDB4, -0x8000, 0x8000, 0xDDB4 };
+            FT_Outline*  outline = &face->glyph->outline;
+            FT_Matrix    rot30   = { 0xDDB4, -0x8000, 0x8000, 0xDDB4 };
 
-          FT_Outline_Transform( outline, &rot30 );
+            FT_Outline_Transform( outline, &rot30 );
 
-          FT_BBox  bbox;
-          FT_Outline_Get_BBox( outline, &bbox );
+            FT_BBox  bbox;
+            FT_Outline_Get_BBox( outline, &bbox );
 #endif
+          }
         }
-
         FT_Done_Face( face );
       }
     }
-- 
2.6.2

From 837ad9d4115018f6b67fe832fdd7b68efee20c49 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 15 Oct 2015 21:15:45 +0200
Subject: [PATCH 050/110] * src/truetype/ttinterp.c (TT_RunIns): Fix bytecode
 stack tracing.

The used indices were off by 1.
---
 ChangeLog               | 6 ++++++
 src/truetype/ttinterp.c | 2 +-
 2 files changed, 7 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 0edd845..e5b0c45 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,9 @@
+2015-10-15  Werner Lemberg  <wl@gnu.org>
+
+	* src/truetype/ttinterp.c (TT_RunIns): Fix bytecode stack tracing.
+
+	The used indices were off by 1.
+
 2015-10-15  Bungeman  <bungeman@gmail.com>
 	    Werner Lemberg  <wl@gnu.org>
 
diff --git a/src/truetype/ttinterp.c b/src/truetype/ttinterp.c
index ae2a82a..85e409e 100644
--- a/src/truetype/ttinterp.c
+++ b/src/truetype/ttinterp.c
@@ -7565,7 +7565,7 @@
                               ? 2
                               : 12 - ( *opcode_name[exc->opcode] - '0' ),
                               "#" ));
-        for ( n = 0; n < cnt; n++ )
+        for ( n = 1; n <= cnt; n++ )
           FT_TRACE7(( " %d", exc->stack[exc->top - n] ));
         FT_TRACE6(( "\n" ));
       }
-- 
2.6.2

From 911171ac49df97096fd2fe7fc393a898d71192df Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 15 Oct 2015 21:22:16 +0200
Subject: [PATCH 051/110] Minor.

---
 devel/ftoption.h | 22 +++++++++++-----------
 1 file changed, 11 insertions(+), 11 deletions(-)

diff --git a/devel/ftoption.h b/devel/ftoption.h
index eda772e..d4d1245 100644
--- a/devel/ftoption.h
+++ b/devel/ftoption.h
@@ -205,6 +205,17 @@ FT_BEGIN_HEADER
 
   /*************************************************************************/
   /*                                                                       */
+  /* Define to disable the use of file stream functions and types, FILE,   */
+  /* fopen() etc.  Enables the use of smaller system libraries on embedded */
+  /* systems that have multiple system libraries, some with or without     */
+  /* file stream support, in the cases where file stream support is not    */
+  /* necessary such as memory loading of font files.                       */
+  /*                                                                       */
+/* #define FT_CONFIG_OPTION_DISABLE_STREAM_SUPPORT */
+
+
+  /*************************************************************************/
+  /*                                                                       */
   /* PNG bitmap support.                                                   */
   /*                                                                       */
   /*   FreeType now handles loading color bitmap glyphs in the PNG format. */
@@ -232,17 +243,6 @@ FT_BEGIN_HEADER
 
   /*************************************************************************/
   /*                                                                       */
-  /* Define to disable the use of file stream functions and types, FILE,   */
-  /* fopen() etc.  Enables the use of smaller system libraries on embedded */
-  /* systems that have multiple system libraries, some with or without     */
-  /* file stream support, in the cases where file stream support is not    */
-  /* necessary such as memory loading of font files.                       */
-  /*                                                                       */
-/* #define FT_CONFIG_OPTION_DISABLE_STREAM_SUPPORT */
-
-
-  /*************************************************************************/
-  /*                                                                       */
   /* DLL export compilation                                                */
   /*                                                                       */
   /*   When compiling FreeType as a DLL, some systems/compilers need a     */
-- 
2.6.2

From 24a1fcdfce4e3c1d83596c691b2d2545e380a46e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 15 Oct 2015 21:50:15 +0200
Subject: [PATCH 052/110] [truetype] Add TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES
 (#46208).

* devel/ftoption.h, include/freetype/config/ftoption.h
(TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES): New configuration macro.

* src/truetype/ttinterp.c (MAX_RUNNABLE_OPCODES): Removed.
(TT_RunIns): Updated.
---
 ChangeLog                          | 10 ++++++++++
 devel/ftoption.h                   | 11 +++++++++++
 include/freetype/config/ftoption.h | 11 +++++++++++
 src/truetype/ttinterp.c            | 11 +----------
 4 files changed, 33 insertions(+), 10 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index e5b0c45..a052aa0 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,15 @@
 2015-10-15  Werner Lemberg  <wl@gnu.org>
 
+	[truetype] Add TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES (#46208).
+
+	* devel/ftoption.h, include/freetype/config/ftoption.h
+	(TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES): New configuration macro.
+
+	* src/truetype/ttinterp.c (MAX_RUNNABLE_OPCODES): Removed.
+	(TT_RunIns): Updated.
+
+2015-10-15  Werner Lemberg  <wl@gnu.org>
+
 	* src/truetype/ttinterp.c (TT_RunIns): Fix bytecode stack tracing.
 
 	The used indices were off by 1.
diff --git a/devel/ftoption.h b/devel/ftoption.h
index d4d1245..0eb8324 100644
--- a/devel/ftoption.h
+++ b/devel/ftoption.h
@@ -693,6 +693,17 @@ FT_BEGIN_HEADER
 
 
   /*************************************************************************/
+  /*                                                                       */
+  /* Option TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES controls the maximum     */
+  /* number of bytecode instructions executed for a single run of the      */
+  /* bytecode interpreter, needed to prevent infinite loops.  You don't    */
+  /* want to change this except for very special situations (e.g., making  */
+  /* a library fuzzer spend less time to handle broken fonts).             */
+  /*                                                                       */
+#define TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES  1000000L
+
+
+  /*************************************************************************/
   /*************************************************************************/
   /****                                                                 ****/
   /****      T Y P E 1   D R I V E R    C O N F I G U R A T I O N       ****/
diff --git a/include/freetype/config/ftoption.h b/include/freetype/config/ftoption.h
index 4970945..270c566 100644
--- a/include/freetype/config/ftoption.h
+++ b/include/freetype/config/ftoption.h
@@ -693,6 +693,17 @@ FT_BEGIN_HEADER
 
 
   /*************************************************************************/
+  /*                                                                       */
+  /* Option TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES controls the maximum     */
+  /* number of bytecode instructions executed for a single run of the      */
+  /* bytecode interpreter, needed to prevent infinite loops.  You don't    */
+  /* want to change this except for very special situations (e.g., making  */
+  /* a library fuzzer spend less time to handle broken fonts).             */
+  /*                                                                       */
+#define TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES  1000000L
+
+
+  /*************************************************************************/
   /*************************************************************************/
   /****                                                                 ****/
   /****      T Y P E 1   D R I V E R    C O N F I G U R A T I O N       ****/
diff --git a/src/truetype/ttinterp.c b/src/truetype/ttinterp.c
index 85e409e..1c1d7de 100644
--- a/src/truetype/ttinterp.c
+++ b/src/truetype/ttinterp.c
@@ -45,15 +45,6 @@
 #define FT_COMPONENT  trace_ttinterp
 
 
-  /*************************************************************************/
-  /*                                                                       */
-  /* In order to detect infinite loops in the code, we set up a counter    */
-  /* within the run loop.  A single stroke of interpretation is now        */
-  /* limited to a maximum number of opcodes defined below.                 */
-  /*                                                                       */
-#define MAX_RUNNABLE_OPCODES  1000000L
-
-
 #define SUBPIXEL_HINTING                                                     \
           ( ((TT_Driver)FT_FACE_DRIVER( exc->face ))->interpreter_version == \
             TT_INTERPRETER_VERSION_38 )
@@ -8230,7 +8221,7 @@
 
       /* increment instruction counter and check if we didn't */
       /* run this program for too long (e.g. infinite loops). */
-      if ( ++ins_counter > MAX_RUNNABLE_OPCODES )
+      if ( ++ins_counter > TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES )
         return FT_THROW( Execution_Too_Long );
 
     LSuiteLabel_:
-- 
2.6.2

From 65d89804915a77ec153a713595397d9a37673c15 Mon Sep 17 00:00:00 2001
From: Bungeman <bungeman@gmail.com>
Date: Thu, 15 Oct 2015 23:50:16 +0200
Subject: [PATCH 053/110] [bdf] Fix memory leak (#46213).

* src/bdf/bdflib.c (bdf_load_font): Always go to label `Fail' in
case of error.
---
 ChangeLog        | 7 +++++++
 src/bdf/bdflib.c | 4 ++--
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index a052aa0..b63e657 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-15  Bungeman  <bungeman@gmail.com>
+
+	[bdf] Fix memory leak (#46213).
+
+	* src/bdf/bdflib.c (bdf_load_font): Always go to label `Fail' in
+	case of error.
+
 2015-10-15  Werner Lemberg  <wl@gnu.org>
 
 	[truetype] Add TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES (#46208).
diff --git a/src/bdf/bdflib.c b/src/bdf/bdflib.c
index 414deb5..5b1beef 100644
--- a/src/bdf/bdflib.c
+++ b/src/bdf/bdflib.c
@@ -2531,14 +2531,14 @@
         /* Error happened while parsing header. */
         FT_ERROR(( "bdf_load_font: " ERRMSG2, lineno ));
         error = FT_THROW( Corrupted_Font_Header );
-        goto Exit;
+        goto Fail;
       }
       else
       {
         /* Error happened when parsing glyphs. */
         FT_ERROR(( "bdf_load_font: " ERRMSG3, lineno ));
         error = FT_THROW( Corrupted_Font_Glyphs );
-        goto Exit;
+        goto Fail;
       }
     }
 
-- 
2.6.2

From 266976b1633bcea0d017d0f37ac817b0b8af8694 Mon Sep 17 00:00:00 2001
From: Kostya Serebryany <konstantin.s.serebryany@gmail.com>
Date: Thu, 15 Oct 2015 22:15:53 -0700
Subject: [PATCH 054/110] add src/tools/ftfuzzer/README

---
 ChangeLog                 |  6 ++++++
 src/tools/ftfuzzer/README | 23 +++++++++++++++++++++++
 2 files changed, 29 insertions(+)
 create mode 100644 src/tools/ftfuzzer/README

diff --git a/ChangeLog b/ChangeLog
index b63e657..a71cb86 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,9 @@
+2015-10-15  Kostya Serebryany <kcc@google.com>
+
+	[ftfuzzer] Add README.
+
+	* src/tools/ftfuzzer/README: New file.
+
 2015-10-15  Bungeman  <bungeman@gmail.com>
 
 	[bdf] Fix memory leak (#46213).
diff --git a/src/tools/ftfuzzer/README b/src/tools/ftfuzzer/README
new file mode 100644
index 0000000..7248bb7
--- /dev/null
+++ b/src/tools/ftfuzzer/README
@@ -0,0 +1,23 @@
+ftfuzzer
+--------
+
+ftfuzzer.cc contains a target function for FreeType fuzzing.
+It can be used with libFuzzer (http://llvm.org/docs/LibFuzzer.html)
+or potentially any other similar fuzzer.
+
+Usage:
+  1. Build libfreetype.a and ftfuzzer.cc using the most recent clang compiler
+     with these flags:
+     -fsanitize-coverage=edge,8bit-counters # for fuzzer coverage feedback
+     -fsanitize=address,signed-integer-overflow,shift  # for bug checking
+  2. Link with libFuzzer (it contains main()).
+  3. Run the fuzzer on some test corpus.
+
+The exact flags and commands may vary.
+There is a continuous fuzzing bot that runs ftfuzzer:
+https://github.com/google/libfuzzer-bot/tree/master/freetype.
+Check the bot confituration for the most current settings.
+
+runinput.cc contains a convenience main() function to run the target function
+on a set of input files. Link it with ftfuzzer.cc and libfreetype.a
+and run like "./a.out my_tests_inputs/*"
-- 
2.6.2

From a5ecfb4ce6f4f42f5346c664b57ab80c2bdf3664 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 06:15:55 +0200
Subject: [PATCH 055/110] * src/cid/cidload.c (cid_parse_dict): Handle invalid
 input (#46220).

---
 ChangeLog         | 6 +++++-
 src/cid/cidload.c | 7 +++++++
 2 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index a71cb86..442b4f3 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,4 +1,8 @@
-2015-10-15  Kostya Serebryany <kcc@google.com>
+2015-10-15  Werner Lemberg  <wl@gnu.org>
+
+	* src/cid/cidload.c (cid_parse_dict): Handle invalid input (#46220).
+
+2015-10-15  Kostya Serebryany  <kcc@google.com>
 
 	[ftfuzzer] Add README.
 
diff --git a/src/cid/cidload.c b/src/cid/cidload.c
index e23b82f..c94b881 100644
--- a/src/cid/cidload.c
+++ b/src/cid/cidload.c
@@ -395,7 +395,14 @@
 
         cur = parser->root.cursor;
       }
+
+      if ( !face->cid.num_dicts )
+      {
+        FT_ERROR(( "cid_parse_dict: No font dictionary found\n" ));
+        return FT_THROW( Invalid_File_Format );
+      }
     }
+
     return parser->root.error;
   }
 
-- 
2.6.2

From 8edfcbed53f669279b5d7dccea72d0903b75ee9c Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 08:11:16 +0200
Subject: [PATCH 056/110] [psaux] Fix heap buffer overflow (#46221).

* src/psaux/t1decode.c (t1_decoder_parse_charstring) <operator 12>:
Fix limit check.
---
 ChangeLog            | 9 ++++++++-
 src/psaux/t1decode.c | 2 +-
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 442b4f3..8e08126 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,4 +1,11 @@
-2015-10-15  Werner Lemberg  <wl@gnu.org>
+2015-10-17  Werner Lemberg  <wl@gnu.org>
+
+	[psaux] Fix heap buffer overflow (#46221).
+
+	* src/psaux/t1decode.c (t1_decoder_parse_charstring) <operator 12>:
+	Fix limit check.
+
+2015-10-17  Werner Lemberg  <wl@gnu.org>
 
 	* src/cid/cidload.c (cid_parse_dict): Handle invalid input (#46220).
 
diff --git a/src/psaux/t1decode.c b/src/psaux/t1decode.c
index 2e19928..c2d080e 100644
--- a/src/psaux/t1decode.c
+++ b/src/psaux/t1decode.c
@@ -512,7 +512,7 @@
         break;
 
       case 12:
-        if ( ip > limit )
+        if ( ip >= limit )
         {
           FT_ERROR(( "t1_decoder_parse_charstrings:"
                      " invalid escape (12+EOF)\n" ));
-- 
2.6.2

From 0ba98da4721fbccbb5f616cd0b93bf890b334ac3 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 09:11:02 +0200
Subject: [PATCH 057/110] * src/cid/cidgload.c (cid_glyph_load): Check file
 offsets (#46222).

---
 ChangeLog          |  4 ++++
 src/cid/cidgload.c | 19 ++++++++++++-------
 2 files changed, 16 insertions(+), 7 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 8e08126..425bdd3 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,9 @@
 2015-10-17  Werner Lemberg  <wl@gnu.org>
 
+	* src/cid/cidgload.c (cid_glyph_load): Check file offsets (#46222).
+
+2015-10-17  Werner Lemberg  <wl@gnu.org>
+
 	[psaux] Fix heap buffer overflow (#46221).
 
 	* src/psaux/t1decode.c (t1_decoder_parse_charstring) <operator 12>:
diff --git a/src/cid/cidgload.c b/src/cid/cidgload.c
index d00674f..59c924c 100644
--- a/src/cid/cidgload.c
+++ b/src/cid/cidgload.c
@@ -100,7 +100,7 @@
     /* and charstring offset from the CIDMap.                */
     {
       FT_UInt   entry_len = (FT_UInt)( cid->fd_bytes + cid->gd_bytes );
-      FT_ULong  off1;
+      FT_ULong  off1, off2;
 
 
       if ( FT_STREAM_SEEK( cid->data_offset + cid->cidmap_offset +
@@ -108,18 +108,23 @@
            FT_FRAME_ENTER( 2 * entry_len )                         )
         goto Exit;
 
-      p            = (FT_Byte*)stream->cursor;
-      fd_select    = cid_get_offset( &p, (FT_Byte)cid->fd_bytes );
-      off1         = cid_get_offset( &p, (FT_Byte)cid->gd_bytes );
-      p           += cid->fd_bytes;
-      glyph_length = cid_get_offset( &p, (FT_Byte)cid->gd_bytes ) - off1;
+      p         = (FT_Byte*)stream->cursor;
+      fd_select = cid_get_offset( &p, (FT_Byte)cid->fd_bytes );
+      off1      = cid_get_offset( &p, (FT_Byte)cid->gd_bytes );
+      p        += cid->fd_bytes;
+      off2      = cid_get_offset( &p, (FT_Byte)cid->gd_bytes );
       FT_FRAME_EXIT();
 
-      if ( fd_select >= (FT_ULong)cid->num_dicts )
+      if ( fd_select >= (FT_ULong)cid->num_dicts ||
+           off2 >= stream->size                  ||
+           off1 > off2                           )
       {
+        FT_TRACE0(( "cid_load_glyph: invalid glyph stream offsets\n" ));
         error = FT_THROW( Invalid_Offset );
         goto Exit;
       }
+
+      glyph_length = off2 - off1;
       if ( glyph_length == 0 )
         goto Exit;
       if ( FT_ALLOC( charstring, glyph_length ) )
-- 
2.6.2

From 38a3dd55660cdaea2c187e8f24c793cdefba1d3f Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 09:15:37 +0200
Subject: [PATCH 058/110] Typo.

---
 src/cid/cidgload.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/cid/cidgload.c b/src/cid/cidgload.c
index 59c924c..2c0f0ec 100644
--- a/src/cid/cidgload.c
+++ b/src/cid/cidgload.c
@@ -116,7 +116,7 @@
       FT_FRAME_EXIT();
 
       if ( fd_select >= (FT_ULong)cid->num_dicts ||
-           off2 >= stream->size                  ||
+           off2 > stream->size                   ||
            off1 > off2                           )
       {
         FT_TRACE0(( "cid_load_glyph: invalid glyph stream offsets\n" ));
-- 
2.6.2

From 0af21dcf13ce44b1624feb3186f0609599355288 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 09:29:52 +0200
Subject: [PATCH 059/110] * src/cid/cidload.c (cid_parse_dict): Check
 `[FG]DBytes' size.

---
 ChangeLog         |  4 ++++
 src/cid/cidload.c | 10 ++++++++++
 2 files changed, 14 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 425bdd3..0971afc 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,9 @@
 2015-10-17  Werner Lemberg  <wl@gnu.org>
 
+	* src/cid/cidload.c (cid_parse_dict): Check `[FG]DBytes' size.
+
+2015-10-17  Werner Lemberg  <wl@gnu.org>
+
 	* src/cid/cidgload.c (cid_glyph_load): Check file offsets (#46222).
 
 2015-10-17  Werner Lemberg  <wl@gnu.org>
diff --git a/src/cid/cidload.c b/src/cid/cidload.c
index c94b881..c579c14 100644
--- a/src/cid/cidload.c
+++ b/src/cid/cidload.c
@@ -401,6 +401,16 @@
         FT_ERROR(( "cid_parse_dict: No font dictionary found\n" ));
         return FT_THROW( Invalid_File_Format );
       }
+
+      /* allow at most 32bit offsets */
+      if ( face->cid.fd_bytes > 4 || face->cid.gd_bytes > 4 )
+      {
+        FT_ERROR(( "cid_parse_dict:"
+                   " Values of `FDBytes' or `GDBytes' larger than 4\n"
+                   "               "
+                   " are not supported\n" ));
+        return FT_THROW( Invalid_File_Format );
+      }
     }
 
     return parser->root.error;
-- 
2.6.2

From e1ca18d4492d819e2deeb4302a9d3ed037f64ebb Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 11:51:27 +0200
Subject: [PATCH 060/110] [bdf] Use stream size to adjust number of glyphs.

* src/bdf/bdflib.c (ACMSG17): New message macro.
(_bdf_parse_t): Add member `size'.
(bdf_load_font): Set `size'.
(_bdf_parse_glyphs): Adjust `cnt' if necessary.
---
 ChangeLog        |  9 +++++++++
 src/bdf/bdflib.c | 10 ++++++++++
 2 files changed, 19 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 0971afc..2374771 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,14 @@
 2015-10-17  Werner Lemberg  <wl@gnu.org>
 
+	[bdf] Use stream size to adjust number of glyphs.
+
+	* src/bdf/bdflib.c (ACMSG17): New message macro.
+	(_bdf_parse_t): Add member `size'.
+	(bdf_load_font): Set `size'.
+	(_bdf_parse_glyphs): Adjust `cnt' if necessary.
+
+2015-10-17  Werner Lemberg  <wl@gnu.org>
+
 	* src/cid/cidload.c (cid_parse_dict): Check `[FG]DBytes' size.
 
 2015-10-17  Werner Lemberg  <wl@gnu.org>
diff --git a/src/bdf/bdflib.c b/src/bdf/bdflib.c
index 5b1beef..4f3b4fd 100644
--- a/src/bdf/bdflib.c
+++ b/src/bdf/bdflib.c
@@ -201,6 +201,7 @@
 #define ACMSG14  "Glyph %ld extra columns removed.\n"
 #define ACMSG15  "Incorrect glyph count: %ld indicated but %ld found.\n"
 #define ACMSG16  "Glyph %ld missing columns padded with zero bits.\n"
+#define ACMSG17  "Adjusting number of glyphs to %ld.\n"
 
   /* Error messages. */
 #define ERRMSG1  "[line %ld] Missing `%s' line.\n"
@@ -432,6 +433,7 @@
     _bdf_list_t     list;
 
     FT_Memory       memory;
+    unsigned long   size;        /* the stream size */
 
   } _bdf_parse_t;
 
@@ -1579,6 +1581,13 @@
         goto Exit;
       p->cnt = font->glyphs_size = _bdf_atoul( p->list.field[1], 0, 10 );
 
+      /* We need at least 20 bytes per glyph. */
+      if ( p->cnt > p->size / 20 )
+      {
+        p->cnt = p->size / 20;
+        FT_TRACE2(( "_bdf_parse_glyphs: " ACMSG17, p->cnt ));
+      }
+
       /* Make sure the number of glyphs is non-zero. */
       if ( p->cnt == 0 )
         font->glyphs_size = 64;
@@ -2447,6 +2456,7 @@
     memory    = NULL;
     p->opts   = (bdf_options_t*)( ( opts != 0 ) ? opts : &_bdf_opts );
     p->minlb  = 32767;
+    p->size   = stream->size;
     p->memory = extmemory;  /* only during font creation */
 
     _bdf_list_init( &p->list, extmemory );
-- 
2.6.2

From 797ca5acb53c562613f1dc5d8bd7818c50f1daff Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 11:57:16 +0200
Subject: [PATCH 061/110] Typo.

---
 src/bdf/bdflib.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/bdf/bdflib.c b/src/bdf/bdflib.c
index 4f3b4fd..9568f1b 100644
--- a/src/bdf/bdflib.c
+++ b/src/bdf/bdflib.c
@@ -1584,7 +1584,7 @@
       /* We need at least 20 bytes per glyph. */
       if ( p->cnt > p->size / 20 )
       {
-        p->cnt = p->size / 20;
+        p->cnt = font->glyphs_size = p->size / 20;
         FT_TRACE2(( "_bdf_parse_glyphs: " ACMSG17, p->cnt ));
       }
 
-- 
2.6.2

From b185747dd6128526e4794a0768ac42b1570cc302 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 14:21:41 +0200
Subject: [PATCH 062/110] [bdf] Prevent memory leak (#46217).

* src/bdf/bdflib.c (_bdf_parse_glyphs) <STARTCHAR>: Check
_BDF_GLYPH_BITS.
---
 ChangeLog        | 7 +++++++
 src/bdf/bdflib.c | 8 ++++++++
 2 files changed, 15 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 2374771..7525c10 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-17  Werner Lemberg  <wl@gnu.org>
 
+	[bdf] Prevent memory leak (#46217).
+
+	* src/bdf/bdflib.c (_bdf_parse_glyphs) <STARTCHAR>: Check
+	_BDF_GLYPH_BITS.
+
+2015-10-17  Werner Lemberg  <wl@gnu.org>
+
 	[bdf] Use stream size to adjust number of glyphs.
 
 	* src/bdf/bdflib.c (ACMSG17): New message macro.
diff --git a/src/bdf/bdflib.c b/src/bdf/bdflib.c
index 9568f1b..c1619e6 100644
--- a/src/bdf/bdflib.c
+++ b/src/bdf/bdflib.c
@@ -1650,6 +1650,14 @@
     /* Check for the STARTCHAR field. */
     if ( _bdf_strncmp( line, "STARTCHAR", 9 ) == 0 )
     {
+      if ( p->flags & _BDF_GLYPH_BITS )
+      {
+        /* Missing ENDCHAR field. */
+        FT_ERROR(( "_bdf_parse_glyphs: " ERRMSG1, lineno, "ENDCHAR" ));
+        error = FT_THROW( Missing_Startchar_Field );
+        goto Exit;
+      }
+
       /* Set the character name in the parse info first until the */
       /* encoding can be checked for an unencoded character.      */
       FT_FREE( p->glyph_name );
-- 
2.6.2

From 7643b5839ba57cb578ec01b71ccbc4f0570c1498 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 17 Oct 2015 15:51:29 +0200
Subject: [PATCH 063/110] * src/cid/cidgload.c (cid_load_glyph): Fix memory
 leak.

Reported by Kostya Serebryany <kcc@google.com>.
---
 ChangeLog          | 6 ++++++
 src/cid/cidgload.c | 4 ++--
 2 files changed, 8 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 7525c10..09ba4b2 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,11 @@
 2015-10-17  Werner Lemberg  <wl@gnu.org>
 
+	* src/cid/cidgload.c (cid_load_glyph): Fix memory leak.
+
+	Reported by Kostya Serebryany <kcc@google.com>.
+
+2015-10-17  Werner Lemberg  <wl@gnu.org>
+
 	[bdf] Prevent memory leak (#46217).
 
 	* src/bdf/bdflib.c (_bdf_parse_glyphs) <STARTCHAR>: Check
diff --git a/src/cid/cidgload.c b/src/cid/cidgload.c
index 2c0f0ec..1fbf23d 100644
--- a/src/cid/cidgload.c
+++ b/src/cid/cidgload.c
@@ -167,8 +167,6 @@
                 glyph_length - cs_offset );
     }
 
-    FT_FREE( charstring );
-
 #ifdef FT_CONFIG_OPTION_INCREMENTAL
 
     /* Incremental fonts can optionally override the metrics. */
@@ -193,6 +191,8 @@
 #endif /* FT_CONFIG_OPTION_INCREMENTAL */
 
   Exit:
+    FT_FREE( charstring );
+
     return error;
   }
 
-- 
2.6.2

From dcfc4d9c2184bd36dacf73c1a9f331e98aa8ed1d Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sun, 18 Oct 2015 16:47:06 +0200
Subject: [PATCH 064/110] [truetype] Better protection against malformed `fpgm'
 (#46223).

* src/truetype/ttobjs.c (tt_size_init_bytecode): Don't execute a
malformed `fpgm' table more than once.
---
 ChangeLog             | 7 +++++++
 src/truetype/ttobjs.c | 8 ++++++++
 2 files changed, 15 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 09ba4b2..369bef4 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-18  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Better protection against malformed `fpgm' (#46223).
+
+	* src/truetype/ttobjs.c (tt_size_init_bytecode): Don't execute a
+	malformed `fpgm' table more than once.
+
 2015-10-17  Werner Lemberg  <wl@gnu.org>
 
 	* src/cid/cidgload.c (cid_load_glyph): Fix memory leak.
diff --git a/src/truetype/ttobjs.c b/src/truetype/ttobjs.c
index 6060d6f..b0d9f28 100644
--- a/src/truetype/ttobjs.c
+++ b/src/truetype/ttobjs.c
@@ -1078,7 +1078,15 @@
     }
 
     /* Fine, now run the font program! */
+
+    /* In case of an error while executing `fpgm', we intentionally don't */
+    /* clean up immediately – bugs in the `fpgm' are so fundamental that  */
+    /* all following hinting calls should fail.  Additionally, `fpgm' is  */
+    /* to be executed just once; calling it again is completely useless   */
+    /* and might even lead to extremely slow behaviour if it is malformed */
+    /* (containing an infinite loop, for example).                        */
     error = tt_size_run_fpgm( size, pedantic );
+    return error;
 
   Exit:
     if ( error )
-- 
2.6.2

From 14213b54099dac557c9181922c45c258a32f0185 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sun, 18 Oct 2015 18:15:04 +0200
Subject: [PATCH 065/110] [truetype] Improve
 TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES (#46223).

* devel/ftoption.h, include/freetype/config/ftoption.h: Surround it
with #ifndef ... #endif, as suggested in the tracker issue.
---
 ChangeLog                          | 7 +++++++
 devel/ftoption.h                   | 7 +++++++
 include/freetype/config/ftoption.h | 7 +++++++
 3 files changed, 21 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 369bef4..0e1c868 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-18  Werner Lemberg  <wl@gnu.org>
 
+	[truetype] Improve TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES (#46223).
+
+	* devel/ftoption.h, include/freetype/config/ftoption.h: Surround it
+	with #ifndef ... #endif, as suggested in the tracker issue.
+
+2015-10-18  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] Better protection against malformed `fpgm' (#46223).
 
 	* src/truetype/ttobjs.c (tt_size_init_bytecode): Don't execute a
diff --git a/devel/ftoption.h b/devel/ftoption.h
index 0eb8324..f68b3ad 100644
--- a/devel/ftoption.h
+++ b/devel/ftoption.h
@@ -700,7 +700,14 @@ FT_BEGIN_HEADER
   /* want to change this except for very special situations (e.g., making  */
   /* a library fuzzer spend less time to handle broken fonts).             */
   /*                                                                       */
+  /* It is not expected that this value is ever modified by a configuring  */
+  /* script; instead, it gets surrounded with #ifndef ... #endif so that   */
+  /* the value can be set as a preprocessor option on the compiler's       */
+  /* command line.                                                         */
+  /*                                                                       */
+#ifndef TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES
 #define TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES  1000000L
+#endif
 
 
   /*************************************************************************/
diff --git a/include/freetype/config/ftoption.h b/include/freetype/config/ftoption.h
index 270c566..b481f8f 100644
--- a/include/freetype/config/ftoption.h
+++ b/include/freetype/config/ftoption.h
@@ -700,7 +700,14 @@ FT_BEGIN_HEADER
   /* want to change this except for very special situations (e.g., making  */
   /* a library fuzzer spend less time to handle broken fonts).             */
   /*                                                                       */
+  /* It is not expected that this value is ever modified by a configuring  */
+  /* script; instead, it gets surrounded with #ifndef ... #endif so that   */
+  /* the value can be set as a preprocessor option on the compiler's       */
+  /* command line.                                                         */
+  /*                                                                       */
+#ifndef TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES
 #define TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES  1000000L
+#endif
 
 
   /*************************************************************************/
-- 
2.6.2

From 5179c89f61aa6b6de00aa01c2e8b7fb6cf3021d0 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Mon, 19 Oct 2015 08:49:25 +0200
Subject: [PATCH 066/110] Comments.

---
 src/bdf/bdfdrivr.c      | 32 ++++++++++++++++----------------
 src/cff/cffdrivr.c      | 32 +++++++++++++++-----------------
 src/cid/cidriver.c      | 38 +++++++++++++++++---------------------
 src/pcf/pcfdrivr.c      | 32 ++++++++++++++++----------------
 src/pfr/pfrdrivr.c      | 33 +++++++++++++++++----------------
 src/truetype/ttdriver.c | 32 ++++++++++++++++----------------
 src/type1/t1driver.c    | 37 +++++++++++++++++++------------------
 src/type42/t42drivr.c   | 32 ++++++++++++++++----------------
 src/winfonts/winfnt.c   | 32 ++++++++++++++++----------------
 9 files changed, 148 insertions(+), 152 deletions(-)

diff --git a/src/bdf/bdfdrivr.c b/src/bdf/bdfdrivr.c
index 404af51..915299b 100644
--- a/src/bdf/bdfdrivr.c
+++ b/src/bdf/bdfdrivr.c
@@ -866,32 +866,32 @@ THE SOFTWARE.
       0x10000L,
       0x20000L,
 
-      0,
+      0,    /* module-specific interface */
 
-      0,                        /* FT_Module_Constructor */
-      0,                        /* FT_Module_Destructor  */
-      bdf_driver_requester
+      0,                        /* FT_Module_Constructor  module_init   */
+      0,                        /* FT_Module_Destructor   module_done   */
+      bdf_driver_requester      /* FT_Module_Requester    get_interface */
     },
 
     sizeof ( BDF_FaceRec ),
     sizeof ( FT_SizeRec ),
     sizeof ( FT_GlyphSlotRec ),
 
-    BDF_Face_Init,
-    BDF_Face_Done,
-    0,                          /* FT_Size_InitFunc */
-    0,                          /* FT_Size_DoneFunc */
-    0,                          /* FT_Slot_InitFunc */
-    0,                          /* FT_Slot_DoneFunc */
+    BDF_Face_Init,              /* FT_Face_InitFunc  init_face */
+    BDF_Face_Done,              /* FT_Face_DoneFunc  done_face */
+    0,                          /* FT_Size_InitFunc  init_size */
+    0,                          /* FT_Size_DoneFunc  done_size */
+    0,                          /* FT_Slot_InitFunc  init_slot */
+    0,                          /* FT_Slot_DoneFunc  done_slot */
 
-    BDF_Glyph_Load,
+    BDF_Glyph_Load,             /* FT_Slot_LoadFunc  load_glyph */
 
-    0,                          /* FT_Face_GetKerningFunc  */
-    0,                          /* FT_Face_AttachFunc      */
-    0,                          /* FT_Face_GetAdvancesFunc */
+    0,                          /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
+    0,                          /* FT_Face_GetAdvancesFunc  get_advances */
 
-    BDF_Size_Request,
-    BDF_Size_Select
+    BDF_Size_Request,           /* FT_Size_RequestFunc  request_size */
+    BDF_Size_Select             /* FT_Size_SelectFunc   select_size  */
   };
 
 
diff --git a/src/cff/cffdrivr.c b/src/cff/cffdrivr.c
index 6221c0c..4028ab2 100644
--- a/src/cff/cffdrivr.c
+++ b/src/cff/cffdrivr.c
@@ -876,31 +876,29 @@
 
       0,   /* module-specific interface */
 
-      cff_driver_init,
-      cff_driver_done,
-      cff_get_interface,
+      cff_driver_init,          /* FT_Module_Constructor  module_init   */
+      cff_driver_done,          /* FT_Module_Destructor   module_done   */
+      cff_get_interface,        /* FT_Module_Requester    get_interface */
 
-    /* now the specific driver fields */
     sizeof ( TT_FaceRec ),
     sizeof ( CFF_SizeRec ),
     sizeof ( CFF_GlyphSlotRec ),
 
-    cff_face_init,
-    cff_face_done,
-    cff_size_init,
-    cff_size_done,
-    cff_slot_init,
-    cff_slot_done,
+    cff_face_init,              /* FT_Face_InitFunc  init_face */
+    cff_face_done,              /* FT_Face_DoneFunc  done_face */
+    cff_size_init,              /* FT_Size_InitFunc  init_size */
+    cff_size_done,              /* FT_Size_DoneFunc  done_size */
+    cff_slot_init,              /* FT_Slot_InitFunc  init_slot */
+    cff_slot_done,              /* FT_Slot_DoneFunc  done_slot */
 
-    cff_glyph_load,
+    cff_glyph_load,             /* FT_Slot_LoadFunc  load_glyph */
 
-    cff_get_kerning,
-    0,                       /* FT_Face_AttachFunc */
-    cff_get_advances,
+    cff_get_kerning,            /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
+    cff_get_advances,           /* FT_Face_GetAdvancesFunc  get_advances */
 
-    cff_size_request,
-
-    CFF_SIZE_SELECT
+    cff_size_request,           /* FT_Size_RequestFunc  request_size */
+    CFF_SIZE_SELECT             /* FT_Size_SelectFunc   select_size  */
   )
 
 
diff --git a/src/cid/cidriver.c b/src/cid/cidriver.c
index 07c4cc4..aca1f25 100644
--- a/src/cid/cidriver.c
+++ b/src/cid/cidriver.c
@@ -190,46 +190,42 @@
   FT_CALLBACK_TABLE_DEF
   const FT_Driver_ClassRec  t1cid_driver_class =
   {
-    /* first of all, the FT_Module_Class fields */
     {
       FT_MODULE_FONT_DRIVER       |
       FT_MODULE_DRIVER_SCALABLE   |
       FT_MODULE_DRIVER_HAS_HINTER,
-
       sizeof ( FT_DriverRec ),
+
       "t1cid",   /* module name           */
       0x10000L,  /* version 1.0 of driver */
       0x20000L,  /* requires FreeType 2.0 */
 
-      0,
+      0,    /* module-specific interface */
 
-      cid_driver_init,
-      cid_driver_done,
-      cid_get_interface
+      cid_driver_init,          /* FT_Module_Constructor  module_init   */
+      cid_driver_done,          /* FT_Module_Destructor   module_done   */
+      cid_get_interface         /* FT_Module_Requester    get_interface */
     },
 
-    /* then the other font drivers fields */
     sizeof ( CID_FaceRec ),
     sizeof ( CID_SizeRec ),
     sizeof ( CID_GlyphSlotRec ),
 
-    cid_face_init,
-    cid_face_done,
-
-    cid_size_init,
-    cid_size_done,
-    cid_slot_init,
-    cid_slot_done,
-
-    cid_slot_load_glyph,
+    cid_face_init,              /* FT_Face_InitFunc  init_face */
+    cid_face_done,              /* FT_Face_DoneFunc  done_face */
+    cid_size_init,              /* FT_Size_InitFunc  init_size */
+    cid_size_done,              /* FT_Size_DoneFunc  done_size */
+    cid_slot_init,              /* FT_Slot_InitFunc  init_slot */
+    cid_slot_done,              /* FT_Slot_DoneFunc  done_slot */
 
-    0,                      /* FT_Face_GetKerningFunc  */
-    0,                      /* FT_Face_AttachFunc      */
+    cid_slot_load_glyph,        /* FT_Slot_LoadFunc  load_glyph */
 
-    0,                      /* FT_Face_GetAdvancesFunc */
+    0,                          /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
+    0,                          /* FT_Face_GetAdvancesFunc  get_advances */
 
-    cid_size_request,
-    0                       /* FT_Size_SelectFunc      */
+    cid_size_request,           /* FT_Size_RequestFunc  request_size */
+    0                           /* FT_Size_SelectFunc   select_size  */
   };
 
 
diff --git a/src/pcf/pcfdrivr.c b/src/pcf/pcfdrivr.c
index 0f4c518..1c2725f 100644
--- a/src/pcf/pcfdrivr.c
+++ b/src/pcf/pcfdrivr.c
@@ -700,32 +700,32 @@ THE SOFTWARE.
       0x10000L,
       0x20000L,
 
-      0,
+      0,    /* module-specific interface */
 
-      0,                    /* FT_Module_Constructor */
-      0,                    /* FT_Module_Destructor  */
-      pcf_driver_requester
+      0,                        /* FT_Module_Constructor  module_init   */
+      0,                        /* FT_Module_Destructor   module_done   */
+      pcf_driver_requester      /* FT_Module_Requester    get_interface */
     },
 
     sizeof ( PCF_FaceRec ),
     sizeof ( FT_SizeRec ),
     sizeof ( FT_GlyphSlotRec ),
 
-    PCF_Face_Init,
-    PCF_Face_Done,
-    0,                      /* FT_Size_InitFunc */
-    0,                      /* FT_Size_DoneFunc */
-    0,                      /* FT_Slot_InitFunc */
-    0,                      /* FT_Slot_DoneFunc */
+    PCF_Face_Init,              /* FT_Face_InitFunc  init_face */
+    PCF_Face_Done,              /* FT_Face_DoneFunc  done_face */
+    0,                          /* FT_Size_InitFunc  init_size */
+    0,                          /* FT_Size_DoneFunc  done_size */
+    0,                          /* FT_Slot_InitFunc  init_slot */
+    0,                          /* FT_Slot_DoneFunc  done_slot */
 
-    PCF_Glyph_Load,
+    PCF_Glyph_Load,             /* FT_Slot_LoadFunc  load_glyph */
 
-    0,                      /* FT_Face_GetKerningFunc  */
-    0,                      /* FT_Face_AttachFunc      */
-    0,                      /* FT_Face_GetAdvancesFunc */
+    0,                          /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
+    0,                          /* FT_Face_GetAdvancesFunc  get_advances */
 
-    PCF_Size_Request,
-    PCF_Size_Select
+    PCF_Size_Request,           /* FT_Size_RequestFunc  request_size */
+    PCF_Size_Select             /* FT_Size_SelectFunc   select_size  */
   };
 
 
diff --git a/src/pfr/pfrdrivr.c b/src/pfr/pfrdrivr.c
index 8753748..adbcac5 100644
--- a/src/pfr/pfrdrivr.c
+++ b/src/pfr/pfrdrivr.c
@@ -181,31 +181,32 @@
       0x10000L,
       0x20000L,
 
-      NULL,
+      0,    /* module-specific interface */
 
-      0,                /* FT_Module_Constructor */
-      0,                /* FT_Module_Destructor  */
-      pfr_get_service
+      0,                        /* FT_Module_Constructor  module_init   */
+      0,                        /* FT_Module_Destructor   module_done   */
+      pfr_get_service           /* FT_Module_Requester    get_interface */
     },
 
     sizeof ( PFR_FaceRec ),
     sizeof ( PFR_SizeRec ),
     sizeof ( PFR_SlotRec ),
 
-    pfr_face_init,
-    pfr_face_done,
-    0,                  /* FT_Size_InitFunc */
-    0,                  /* FT_Size_DoneFunc */
-    pfr_slot_init,
-    pfr_slot_done,
+    pfr_face_init,              /* FT_Face_InitFunc  init_face */
+    pfr_face_done,              /* FT_Face_DoneFunc  done_face */
+    0,                          /* FT_Size_InitFunc  init_size */
+    0,                          /* FT_Size_DoneFunc  done_size */
+    pfr_slot_init,              /* FT_Slot_InitFunc  init_slot */
+    pfr_slot_done,              /* FT_Slot_DoneFunc  done_slot */
 
-    pfr_slot_load,
+    pfr_slot_load,              /* FT_Slot_LoadFunc  load_glyph */
 
-    pfr_get_kerning,
-    0,                  /* FT_Face_AttachFunc      */
-    0,                  /* FT_Face_GetAdvancesFunc */
-    0,                  /* FT_Size_RequestFunc     */
-    0,                  /* FT_Size_SelectFunc      */
+    pfr_get_kerning,            /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
+    0,                          /* FT_Face_GetAdvancesFunc  get_advances */
+
+    0,                          /* FT_Size_RequestFunc  request_size */
+    0,                          /* FT_Size_SelectFunc   select_size  */
   };
 
 
diff --git a/src/truetype/ttdriver.c b/src/truetype/ttdriver.c
index 08b30c9..8b88b7e 100644
--- a/src/truetype/ttdriver.c
+++ b/src/truetype/ttdriver.c
@@ -534,31 +534,31 @@
       0x10000L,        /* driver version == 1.0                 */
       0x20000L,        /* driver requires FreeType 2.0 or above */
 
-      (void*)0,        /* driver specific interface */
+      0,    /* module-specific interface */
 
-      tt_driver_init,
-      tt_driver_done,
-      tt_get_interface,
+      tt_driver_init,           /* FT_Module_Constructor  module_init   */
+      tt_driver_done,           /* FT_Module_Destructor   module_done   */
+      tt_get_interface,         /* FT_Module_Requester    get_interface */
 
     sizeof ( TT_FaceRec ),
     sizeof ( TT_SizeRec ),
     sizeof ( FT_GlyphSlotRec ),
 
-    tt_face_init,
-    tt_face_done,
-    tt_size_init,
-    tt_size_done,
-    tt_slot_init,
-    0,                       /* FT_Slot_DoneFunc */
+    tt_face_init,               /* FT_Face_InitFunc  init_face */
+    tt_face_done,               /* FT_Face_DoneFunc  done_face */
+    tt_size_init,               /* FT_Size_InitFunc  init_size */
+    tt_size_done,               /* FT_Size_DoneFunc  done_size */
+    tt_slot_init,               /* FT_Slot_InitFunc  init_slot */
+    0,                          /* FT_Slot_DoneFunc  done_slot */
 
-    tt_glyph_load,
+    tt_glyph_load,              /* FT_Slot_LoadFunc  load_glyph */
 
-    tt_get_kerning,
-    0,                       /* FT_Face_AttachFunc */
-    tt_get_advances,
+    tt_get_kerning,             /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
+    tt_get_advances,            /* FT_Face_GetAdvancesFunc  get_advances */
 
-    tt_size_request,
-    TT_SIZE_SELECT
+    tt_size_request,            /* FT_Size_RequestFunc  request_size */
+    TT_SIZE_SELECT              /* FT_Size_SelectFunc   select_size  */
   )
 
 
diff --git a/src/type1/t1driver.c b/src/type1/t1driver.c
index 571f2d2..c0ca1e8 100644
--- a/src/type1/t1driver.c
+++ b/src/type1/t1driver.c
@@ -689,36 +689,37 @@
       0x10000L,
       0x20000L,
 
-      0,   /* format interface */
+      0,    /* module-specific interface */
 
-      T1_Driver_Init,
-      T1_Driver_Done,
-      Get_Interface,
+      T1_Driver_Init,           /* FT_Module_Constructor  module_init   */
+      T1_Driver_Done,           /* FT_Module_Destructor   module_done   */
+      Get_Interface,            /* FT_Module_Requester    get_interface */
     },
 
     sizeof ( T1_FaceRec ),
     sizeof ( T1_SizeRec ),
     sizeof ( T1_GlyphSlotRec ),
 
-    T1_Face_Init,
-    T1_Face_Done,
-    T1_Size_Init,
-    T1_Size_Done,
-    T1_GlyphSlot_Init,
-    T1_GlyphSlot_Done,
+    T1_Face_Init,               /* FT_Face_InitFunc  init_face */
+    T1_Face_Done,               /* FT_Face_DoneFunc  done_face */
+    T1_Size_Init,               /* FT_Size_InitFunc  init_size */
+    T1_Size_Done,               /* FT_Size_DoneFunc  done_size */
+    T1_GlyphSlot_Init,          /* FT_Slot_InitFunc  init_slot */
+    T1_GlyphSlot_Done,          /* FT_Slot_DoneFunc  done_slot */
 
-    T1_Load_Glyph,
+    T1_Load_Glyph,              /* FT_Slot_LoadFunc  load_glyph */
 
 #ifdef T1_CONFIG_OPTION_NO_AFM
-    0,                     /* FT_Face_GetKerningFunc */
-    0,                     /* FT_Face_AttachFunc     */
+    0,                          /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
 #else
-    Get_Kerning,
-    T1_Read_Metrics,
+    Get_Kerning,                /* FT_Face_GetKerningFunc   get_kerning  */
+    T1_Read_Metrics,            /* FT_Face_AttachFunc       attach_file  */
 #endif
-    T1_Get_Advances,
-    T1_Size_Request,
-    0                      /* FT_Size_SelectFunc     */
+    T1_Get_Advances,            /* FT_Face_GetAdvancesFunc  get_advances */
+
+    T1_Size_Request,            /* FT_Size_RequestFunc  request_size */
+    0                           /* FT_Size_SelectFunc   select_size  */
   };
 
 
diff --git a/src/type42/t42drivr.c b/src/type42/t42drivr.c
index 2907096..da7d8e5 100644
--- a/src/type42/t42drivr.c
+++ b/src/type42/t42drivr.c
@@ -212,32 +212,32 @@
       0x10000L,
       0x20000L,
 
-      0,    /* format interface */
+      0,    /* module-specific interface */
 
-      T42_Driver_Init,
-      T42_Driver_Done,
-      T42_Get_Interface,
+      T42_Driver_Init,          /* FT_Module_Constructor  module_init   */
+      T42_Driver_Done,          /* FT_Module_Destructor   module_done   */
+      T42_Get_Interface,        /* FT_Module_Requester    get_interface */
     },
 
     sizeof ( T42_FaceRec ),
     sizeof ( T42_SizeRec ),
     sizeof ( T42_GlyphSlotRec ),
 
-    T42_Face_Init,
-    T42_Face_Done,
-    T42_Size_Init,
-    T42_Size_Done,
-    T42_GlyphSlot_Init,
-    T42_GlyphSlot_Done,
+    T42_Face_Init,              /* FT_Face_InitFunc  init_face */
+    T42_Face_Done,              /* FT_Face_DoneFunc  done_face */
+    T42_Size_Init,              /* FT_Size_InitFunc  init_size */
+    T42_Size_Done,              /* FT_Size_DoneFunc  done_size */
+    T42_GlyphSlot_Init,         /* FT_Slot_InitFunc  init_slot */
+    T42_GlyphSlot_Done,         /* FT_Slot_DoneFunc  done_slot */
 
-    T42_GlyphSlot_Load,
+    T42_GlyphSlot_Load,         /* FT_Slot_LoadFunc  load_glyph */
 
-    0,                 /* FT_Face_GetKerningFunc  */
-    0,                 /* FT_Face_AttachFunc      */
+    0,                          /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
+    0,                          /* FT_Face_GetAdvancesFunc  get_advances */
 
-    0,                 /* FT_Face_GetAdvancesFunc */
-    T42_Size_Request,
-    T42_Size_Select
+    T42_Size_Request,           /* FT_Size_RequestFunc  request_size */
+    T42_Size_Select             /* FT_Size_SelectFunc   select_size  */
   };
 
 
diff --git a/src/winfonts/winfnt.c b/src/winfonts/winfnt.c
index 4bfa55a..1005a12 100644
--- a/src/winfonts/winfnt.c
+++ b/src/winfonts/winfnt.c
@@ -1161,32 +1161,32 @@
       0x10000L,
       0x20000L,
 
-      0,
+      0,    /* module-specific interface */
 
-      0,                  /* FT_Module_Constructor */
-      0,                  /* FT_Module_Destructor  */
-      winfnt_get_service
+      0,                        /* FT_Module_Constructor  module_init   */
+      0,                        /* FT_Module_Destructor   module_done   */
+      winfnt_get_service        /* FT_Module_Requester    get_interface */
     },
 
     sizeof ( FNT_FaceRec ),
     sizeof ( FT_SizeRec ),
     sizeof ( FT_GlyphSlotRec ),
 
-    FNT_Face_Init,
-    FNT_Face_Done,
-    0,                    /* FT_Size_InitFunc */
-    0,                    /* FT_Size_DoneFunc */
-    0,                    /* FT_Slot_InitFunc */
-    0,                    /* FT_Slot_DoneFunc */
+    FNT_Face_Init,              /* FT_Face_InitFunc  init_face */
+    FNT_Face_Done,              /* FT_Face_DoneFunc  done_face */
+    0,                          /* FT_Size_InitFunc  init_size */
+    0,                          /* FT_Size_DoneFunc  done_size */
+    0,                          /* FT_Slot_InitFunc  init_slot */
+    0,                          /* FT_Slot_DoneFunc  done_slot */
 
-    FNT_Load_Glyph,
+    FNT_Load_Glyph,             /* FT_Slot_LoadFunc  load_glyph */
 
-    0,                    /* FT_Face_GetKerningFunc  */
-    0,                    /* FT_Face_AttachFunc      */
-    0,                    /* FT_Face_GetAdvancesFunc */
+    0,                          /* FT_Face_GetKerningFunc   get_kerning  */
+    0,                          /* FT_Face_AttachFunc       attach_file  */
+    0,                          /* FT_Face_GetAdvancesFunc  get_advances */
 
-    FNT_Size_Request,
-    FNT_Size_Select
+    FNT_Size_Request,           /* FT_Size_RequestFunc  request_size */
+    FNT_Size_Select             /* FT_Size_SelectFunc   select_size  */
   };
 
 
-- 
2.6.2

From 24cee3a8a3db419bc657860fc89cdfb1a0392f72 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Mon, 19 Oct 2015 23:00:28 +0200
Subject: [PATCH 067/110] [psaux] Fix tracing of negative numbers.

Due to incorrect casting negative numbers were shown as very large
(positive) integers on 64bit systems.

* src/psaux/t1decode.c (t1_decoder_parse_charstrings) <op_none>:
Use division instead of shift.
---
 ChangeLog            | 10 ++++++++++
 src/psaux/t1decode.c |  2 +-
 2 files changed, 11 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 0e1c868..0073d65 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,15 @@
 2015-10-18  Werner Lemberg  <wl@gnu.org>
 
+	[psaux] Fix tracing of negative numbers.
+
+	Due to incorrect casting negative numbers were shown as very large
+	(positive) integers on 64bit systems.
+
+	* src/psaux/t1decode.c (t1_decoder_parse_charstrings) <op_none>:
+	Use division instead of shift.
+
+2015-10-18  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] Improve TT_CONFIG_OPTION_MAX_RUNNABLE_OPCODES (#46223).
 
 	* devel/ftoption.h, include/freetype/config/ftoption.h: Surround it
diff --git a/src/psaux/t1decode.c b/src/psaux/t1decode.c
index c2d080e..5811fcb 100644
--- a/src/psaux/t1decode.c
+++ b/src/psaux/t1decode.c
@@ -669,7 +669,7 @@
         if ( large_int )
           FT_TRACE4(( " %ld", value ));
         else
-          FT_TRACE4(( " %ld", Fix2Int( value ) ));
+          FT_TRACE4(( " %ld", value / 65536 ));
 #endif
 
         *top++       = value;
-- 
2.6.2

From 2961b66c705a618d2ae2c1eb4a15689831a719ce Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Mon, 19 Oct 2015 23:17:25 +0200
Subject: [PATCH 068/110] Typo.

---
 include/freetype/fterrdef.h | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/include/freetype/fterrdef.h b/include/freetype/fterrdef.h
index d865da7..3bf4e63 100644
--- a/include/freetype/fterrdef.h
+++ b/include/freetype/fterrdef.h
@@ -243,7 +243,7 @@
   FT_ERRORDEF_( No_Unicode_Glyph_Name,                       0xA3,
                 "no Unicode glyph name found" )
   FT_ERRORDEF_( Glyph_Too_Big,                               0xA4,
-                "glyph to big for hinting" )
+                "glyph too big for hinting" )
 
   /* BDF errors */
 
-- 
2.6.2

From ba8a528b1963a6803a4176db7a1dd545ff289bdb Mon Sep 17 00:00:00 2001
From: Bungeman <bungeman@gmail.com>
Date: Mon, 19 Oct 2015 23:27:06 +0200
Subject: [PATCH 069/110] [cid] Better handle invalid glyph stream offsets
 (#46221).

* src/cid/cidgload.c (cid_load_glyph): Check minimum size of glyph
length.
---
 ChangeLog          | 7 +++++++
 src/cid/cidgload.c | 6 ++++++
 2 files changed, 13 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 0073d65..19c2a8d 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-18  Bungeman  <bungeman@gmail.com>
+
+	[cid] Better handle invalid glyph stream offsets (#46221).
+
+	* src/cid/cidgload.c (cid_load_glyph): Check minimum size of glyph
+	length.
+
 2015-10-18  Werner Lemberg  <wl@gnu.org>
 
 	[psaux] Fix tracing of negative numbers.
diff --git a/src/cid/cidgload.c b/src/cid/cidgload.c
index 1fbf23d..d402f8e 100644
--- a/src/cid/cidgload.c
+++ b/src/cid/cidgload.c
@@ -157,6 +157,12 @@
 
       /* Adjustment for seed bytes. */
       cs_offset = decoder->lenIV >= 0 ? (FT_UInt)decoder->lenIV : 0;
+      if ( cs_offset > glyph_length )
+      {
+        FT_TRACE0(( "cid_load_glyph: invalid glyph stream offsets\n" ));
+        error = FT_THROW( Invalid_Offset );
+        goto Exit;
+      }
 
       /* Decrypt only if lenIV >= 0. */
       if ( decoder->lenIV >= 0 )
-- 
2.6.2

From 3c582060b28f7d51b6d138130b052e8368c0cd36 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 20 Oct 2015 06:57:28 +0200
Subject: [PATCH 070/110] * src/type1/t1afm.c (T1_Read_Metrics): Fix memory
 leak (#46229).

---
 ChangeLog         |  6 +++++-
 src/type1/t1afm.c | 14 +++++++++++---
 2 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 19c2a8d..3ea8ecd 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,4 +1,8 @@
-2015-10-18  Bungeman  <bungeman@gmail.com>
+2015-10-20  Werner Lemberg  <wl@gnu.org>
+
+	* src/type1/t1afm.c (T1_Read_Metrics): Fix memory leak (#46229).
+
+2015-10-19  Bungeman  <bungeman@gmail.com>
 
 	[cid] Better handle invalid glyph stream offsets (#46221).
 
diff --git a/src/type1/t1afm.c b/src/type1/t1afm.c
index 7f32059..7a7bf82 100644
--- a/src/type1/t1afm.c
+++ b/src/type1/t1afm.c
@@ -239,9 +239,17 @@
     AFM_ParserRec  parser;
     AFM_FontInfo   fi      = NULL;
     FT_Error       error   = FT_ERR( Unknown_File_Format );
-    T1_Font        t1_font = &( (T1_Face)t1_face )->type1;
+    T1_Face        face    = (T1_Face)t1_face;
+    T1_Font        t1_font = &face->type1;
 
 
+    if ( face->afm_data )
+    {
+      FT_TRACE1(( "T1_Read_Metrics:"
+                  " Freeing previously attached metrics data.\n" ));
+      T1_Done_Metrics( memory, (AFM_FontInfo)face->afm_data );
+    }
+
     if ( FT_NEW( fi )                   ||
          FT_FRAME_ENTER( stream->size ) )
       goto Exit;
@@ -250,7 +258,7 @@
     fi->Ascender  = t1_font->font_bbox.yMax;
     fi->Descender = t1_font->font_bbox.yMin;
 
-    psaux = (PSAux_Service)( (T1_Face)t1_face )->psaux;
+    psaux = (PSAux_Service)face->psaux;
     if ( psaux->afm_parser_funcs )
     {
       error = psaux->afm_parser_funcs->init( &parser,
@@ -298,7 +306,7 @@
       if ( fi->NumKernPair )
       {
         t1_face->face_flags |= FT_FACE_FLAG_KERNING;
-        ( (T1_Face)t1_face )->afm_data = fi;
+        face->afm_data       = fi;
         fi = NULL;
       }
     }
-- 
2.6.2

From 5cf83a5335cbbc71037930de857b947c5de38948 Mon Sep 17 00:00:00 2001
From: StudioEtrange <nomorgan@gmail.com>
Date: Tue, 20 Oct 2015 07:19:44 +0200
Subject: [PATCH 071/110] * CMakeLists.txt: Enable shared library builds on
 MinGW (#46233).

---
 CMakeLists.txt | 8 ++++----
 ChangeLog      | 4 ++++
 2 files changed, 8 insertions(+), 4 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0f0940f..4d0766d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -100,14 +100,14 @@ else ()
   endif ()
 endif ()
 
-if (WIN32 AND BUILD_SHARED_LIBS)
-  message(FATAL_ERROR "Shared libraries not supported on Windows.")
-endif ()
-
 
 project(freetype)
 
 
+if (WIN32 AND NOT MINGW AND BUILD_SHARED_LIBS)
+  message(FATAL_ERROR "Building shared libraries on Windows needs MinGW")
+endif ()
+
 # Disallow in-source builds
 if ("${PROJECT_BINARY_DIR}" STREQUAL "${PROJECT_SOURCE_DIR}")
   message(FATAL_ERROR
diff --git a/ChangeLog b/ChangeLog
index 3ea8ecd..97e8b08 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,7 @@
+2015-10-20  StudioEtrange  <nomorgan@gmail.com>
+
+	* CMakeLists.txt: Enable shared library builds on MinGW (#46233).
+
 2015-10-20  Werner Lemberg  <wl@gnu.org>
 
 	* src/type1/t1afm.c (T1_Read_Metrics): Fix memory leak (#46229).
-- 
2.6.2

From d47d372c96d445a30b7d7a26be00d60ffa878e6d Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 20 Oct 2015 12:24:36 +0200
Subject: [PATCH 072/110] [cid] Avoid segfault with malformed input (#46250).

* src/cid/cidload.c (cid_read_subrs): Return a proper error code for
unsorted offsets.
---
 ChangeLog         | 7 +++++++
 src/cid/cidload.c | 4 ++++
 2 files changed, 11 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 97e8b08..85dcfb0 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-20  Werner Lemberg  <wl@gnu.org>
+
+	[cid] Avoid segfault with malformed input (#46250).
+
+	* src/cid/cidload.c (cid_read_subrs): Return a proper error code for
+	unsorted offsets.
+
 2015-10-20  StudioEtrange  <nomorgan@gmail.com>
 
 	* CMakeLists.txt: Enable shared library builds on MinGW (#46233).
diff --git a/src/cid/cidload.c b/src/cid/cidload.c
index c579c14..0bf73d4 100644
--- a/src/cid/cidload.c
+++ b/src/cid/cidload.c
@@ -484,7 +484,11 @@
       /* offsets must be ordered */
       for ( count = 1; count <= num_subrs; count++ )
         if ( offsets[count - 1] > offsets[count] )
+        {
+          FT_TRACE1(( "cid_read_subrs: offsets are not ordered\n" ));
+          error = FT_THROW( Syntax_Error );
           goto Fail;
+        }
 
       /* now, compute the size of subrs charstrings, */
       /* allocate, and read them                     */
-- 
2.6.2

From 3eccc3a3f849f44e50a14c7562e4b9aea1740925 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 20 Oct 2015 22:31:57 +0200
Subject: [PATCH 073/110] [cid] Add a bunch of safety checks.

* src/cid/cidload.c (parse_fd_array): Check `num_dicts' against
stream size.
(cid_read_subrs): Check largest offset against stream size.
(cid_parse_dict): Move safety check to ...
(cid_face_open): ... this function.
Also test length of binary data and values of `SDBytes',
`SubrMapOffset', `SubrCount', `CIDMapOffset', and `CIDCount'.
---
 ChangeLog         |  12 +++++
 src/cid/cidload.c | 143 +++++++++++++++++++++++++++++++++++++++++++++---------
 2 files changed, 132 insertions(+), 23 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 85dcfb0..b95f65e 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,17 @@
 2015-10-20  Werner Lemberg  <wl@gnu.org>
 
+	[cid] Add a bunch of safety checks.
+
+	* src/cid/cidload.c (parse_fd_array): Check `num_dicts' against
+	stream size.
+	(cid_read_subrs): Check largest offset against stream size.
+	(cid_parse_dict): Move safety check to ...
+	(cid_face_open): ... this function.
+	Also test length of binary data and values of `SDBytes',
+	`SubrMapOffset', `SubrCount', `CIDMapOffset', and `CIDCount'.
+
+2015-10-20  Werner Lemberg  <wl@gnu.org>
+
 	[cid] Avoid segfault with malformed input (#46250).
 
 	* src/cid/cidload.c (cid_read_subrs): Return a proper error code for
diff --git a/src/cid/cidload.c b/src/cid/cidload.c
index 0bf73d4..aa125a4 100644
--- a/src/cid/cidload.c
+++ b/src/cid/cidload.c
@@ -215,6 +215,7 @@
   {
     CID_FaceInfo  cid    = &face->cid;
     FT_Memory     memory = face->root.memory;
+    FT_Stream     stream = parser->stream;
     FT_Error      error  = FT_Err_Ok;
     FT_Long       num_dicts;
 
@@ -227,6 +228,31 @@
       goto Exit;
     }
 
+    /*
+     * A single entry in the FDArray must (at least) contain the following
+     * structure elements.
+     *
+     *   %ADOBeginFontDict              18
+     *   X dict begin                   13
+     *     /FontMatrix [X X X X]        22
+     *     /Private X dict begin        22
+     *     end                           4
+     *   end                             4
+     *   %ADOEndFontDict                16
+     *
+     * This needs 18+13+22+22+4+4+16=99 bytes or more.  Normally, you also
+     * need a `dup X' at the very beginning and a `put' at the end, so a
+     * rough guess using 100 bytes as the minimum is justified.
+     */
+    if ( (FT_ULong)num_dicts > stream->size / 100 )
+    {
+      FT_TRACE0(( "parse_fd_array: adjusting FDArray size"
+                  " (from %d to %d)\n",
+                  num_dicts,
+                  stream->size / 100 ));
+      num_dicts = (FT_Long)( stream->size / 100 );
+    }
+
     if ( !cid->font_dicts )
     {
       FT_Int  n;
@@ -401,16 +427,6 @@
         FT_ERROR(( "cid_parse_dict: No font dictionary found\n" ));
         return FT_THROW( Invalid_File_Format );
       }
-
-      /* allow at most 32bit offsets */
-      if ( face->cid.fd_bytes > 4 || face->cid.gd_bytes > 4 )
-      {
-        FT_ERROR(( "cid_parse_dict:"
-                   " Values of `FDBytes' or `GDBytes' larger than 4\n"
-                   "               "
-                   " are not supported\n" ));
-        return FT_THROW( Invalid_File_Format );
-      }
     }
 
     return parser->root.error;
@@ -445,13 +461,6 @@
       FT_Byte*      p;
 
 
-      /* Check for possible overflow. */
-      if ( num_subrs == FT_UINT_MAX )
-      {
-        error = FT_THROW( Syntax_Error );
-        goto Fail;
-      }
-
       /* reallocate offsets array if needed */
       if ( num_subrs + 1 > max_offsets )
       {
@@ -485,17 +494,24 @@
       for ( count = 1; count <= num_subrs; count++ )
         if ( offsets[count - 1] > offsets[count] )
         {
-          FT_TRACE1(( "cid_read_subrs: offsets are not ordered\n" ));
-          error = FT_THROW( Syntax_Error );
+          FT_ERROR(( "cid_read_subrs: offsets are not ordered\n" ));
+          error = FT_THROW( Invalid_File_Format );
           goto Fail;
         }
 
+      if ( offsets[num_subrs] > stream->size - cid->data_offset )
+      {
+        FT_ERROR(( "cid_read_subrs: too large `subrs' offsets\n" ));
+        error = FT_THROW( Invalid_File_Format );
+        goto Fail;
+      }
+
       /* now, compute the size of subrs charstrings, */
       /* allocate, and read them                     */
       data_len = offsets[num_subrs] - offsets[0];
 
       if ( FT_NEW_ARRAY( subr->code, num_subrs + 1 ) ||
-               FT_ALLOC( subr->code[0], data_len )   )
+           FT_ALLOC( subr->code[0], data_len )       )
         goto Fail;
 
       if ( FT_STREAM_SEEK( cid->data_offset + offsets[0] ) ||
@@ -675,6 +691,12 @@
     CID_Parser*  parser;
     FT_Memory    memory = face->root.memory;
     FT_Error     error;
+    FT_Int       n;
+
+    CID_FaceInfo  cid = &face->cid;
+
+    FT_ULong  binary_length;
+    FT_ULong  entry_len;
 
 
     cid_init_loader( &loader, face );
@@ -699,6 +721,17 @@
 
     if ( parser->binary_length )
     {
+      if ( parser->binary_length >
+             face->root.stream->size - parser->data_offset )
+      {
+        FT_TRACE0(( "cid_face_open: adjusting length of binary data\n"
+                    "               (from %d to %d bytes)\n",
+                    parser->binary_length,
+                    face->root.stream->size - parser->data_offset ));
+        parser->binary_length = face->root.stream->size -
+                                parser->data_offset;
+      }
+
       /* we must convert the data section from hexadecimal to binary */
       if ( FT_ALLOC( face->binary_data, parser->binary_length )         ||
            cid_hex_to_binary( face->binary_data, parser->binary_length,
@@ -707,14 +740,78 @@
 
       FT_Stream_OpenMemory( face->cid_stream,
                             face->binary_data, parser->binary_length );
-      face->cid.data_offset = 0;
+      cid->data_offset = 0;
     }
     else
     {
-      *face->cid_stream     = *face->root.stream;
-      face->cid.data_offset = loader.parser.data_offset;
+      *face->cid_stream = *face->root.stream;
+      cid->data_offset  = loader.parser.data_offset;
+    }
+
+    /* sanity tests */
+
+    /* allow at most 32bit offsets */
+    if ( cid->fd_bytes > 4 || cid->gd_bytes > 4 )
+    {
+      FT_ERROR(( "cid_parse_dict:"
+                 " Values of `FDBytes' or `GDBytes' larger than 4\n"
+                 "               "
+                 " are not supported\n" ));
+      error = FT_THROW( Invalid_File_Format );
+      goto Exit;
+    }
+
+    binary_length = face->cid_stream->size - cid->data_offset;
+    entry_len     = (FT_ULong)( cid->fd_bytes + cid->gd_bytes );
+
+    for ( n = 0; n < cid->num_dicts; n++ )
+    {
+      CID_FaceDict  dict = cid->font_dicts + n;
+
+
+      if ( dict->sd_bytes > 4 )
+      {
+        FT_ERROR(( "cid_parse_dict:"
+                   " Values of `SDBytes' larger than 4"
+                   " are not supported\n" ));
+        error = FT_THROW( Invalid_File_Format );
+        goto Exit;
+      }
+
+      if ( dict->subrmap_offset > binary_length )
+      {
+        FT_ERROR(( "cid_parse_dict: Invalid `SubrMapOffset' value\n" ));
+        error = FT_THROW( Invalid_File_Format );
+        goto Exit;
+      }
+
+      if ( dict->sd_bytes                                              &&
+           dict->num_subrs >
+             ( binary_length - dict->subrmap_offset ) / dict->sd_bytes )
+      {
+        FT_ERROR(( "cid_parse_dict: Invalid `SubrCount' value\n" ));
+        error = FT_THROW( Invalid_File_Format );
+        goto Exit;
+      }
+    }
+
+    if ( cid->cidmap_offset > binary_length )
+    {
+      FT_ERROR(( "cid_parse_dict: Invalid `CIDMapOffset' value\n" ));
+      error = FT_THROW( Invalid_File_Format );
+      goto Exit;
+    }
+
+    if ( entry_len                                            &&
+         cid->cid_count >
+           ( binary_length - cid->cidmap_offset ) / entry_len )
+    {
+      FT_ERROR(( "cid_parse_dict: Invalid `CIDCount' value\n" ));
+      error = FT_THROW( Invalid_File_Format );
+      goto Exit;
     }
 
+    /* we can now safely proceed */
     error = cid_read_subrs( face );
 
   Exit:
-- 
2.6.2

From 649ca5562d321f1008087eb0f2be584a495fabd9 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 21 Oct 2015 07:01:45 +0200
Subject: [PATCH 074/110] [type42] Better check invalid `sfnts' array data
 (#46255).

* src/type42/t42parse.c (t42_parse_sfnts): Table lengths must be
checked individually against available data size.
---
 ChangeLog             |  7 +++++++
 src/type42/t42parse.c | 19 +++++++++++++++++--
 2 files changed, 24 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index b95f65e..0d52a85 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-21  Werner Lemberg  <wl@gnu.org>
+
+	[type42] Better check invalid `sfnts' array data (#46255).
+
+	* src/type42/t42parse.c (t42_parse_sfnts): Table lengths must be
+	checked individually against available data size.
+
 2015-10-20  Werner Lemberg  <wl@gnu.org>
 
 	[cid] Add a bunch of safety checks.
diff --git a/src/type42/t42parse.c b/src/type42/t42parse.c
index a32d496..3bcf97e 100644
--- a/src/type42/t42parse.c
+++ b/src/type42/t42parse.c
@@ -575,6 +575,9 @@
 
     while ( parser->root.cursor < limit )
     {
+      FT_ULong  size;
+
+
       cur = parser->root.cursor;
 
       if ( *cur == ']' )
@@ -666,6 +669,11 @@
         goto Fail;
       }
 
+      /* The whole TTF is now loaded into `string_buf'.  We are */
+      /* checking its contents while copying it to `ttf_data'.  */
+
+      size = limit - parser->root.cursor;
+
       for ( n = 0; n < string_size; n++ )
       {
         switch ( status )
@@ -683,7 +691,7 @@
             status         = BEFORE_TABLE_DIR;
             face->ttf_size = 12 + 16 * num_tables;
 
-            if ( (FT_Long)( limit - parser->root.cursor ) < face->ttf_size )
+            if ( (FT_Long)size < face->ttf_size )
             {
               FT_ERROR(( "t42_parse_sfnts: invalid data in sfnts array\n" ));
               error = FT_THROW( Invalid_File_Format );
@@ -714,6 +722,14 @@
 
 
               len = FT_PEEK_ULONG( p );
+              if ( len > size                               ||
+                   face->ttf_size > (FT_Long)( size - len ) )
+              {
+                FT_ERROR(( "t42_parse_sfnts:"
+                           " invalid data in sfnts array\n" ));
+                error = FT_THROW( Invalid_File_Format );
+                goto Fail;
+              }
 
               /* Pad to a 4-byte boundary length */
               face->ttf_size += (FT_Long)( ( len + 3 ) & ~3U );
@@ -721,7 +737,6 @@
 
             status = OTHER_TABLES;
 
-            /* there are no more than 256 tables, so no size check here */
             if ( FT_REALLOC( face->ttf_data, 12 + 16 * num_tables,
                              face->ttf_size + 1 ) )
               goto Fail;
-- 
2.6.2

From e6593389cf557740d6b15d6065bb96a4a81cabeb Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 21 Oct 2015 08:04:29 +0200
Subject: [PATCH 075/110] [sfnt] Avoid unnecessarily large allocation for WOFFs
 (#46257).

* src/sfnt/sfobjs.c (woff_open_font): Use WOFF's `totalSfntSize'
only after thorough checks.
Add tracing messages.
---
 ChangeLog                      |  8 +++++
 src/autofit/afranges.c         | 28 +++++++++++++++
 src/sfnt/sfobjs.c              | 24 +++++++++++--
 src/tools/ftfuzzer/ftfuzzer.cc | 79 +++++++++++++++++++++++++++++++++++++++---
 4 files changed, 132 insertions(+), 7 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 0d52a85..cac6c75 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,13 @@
 2015-10-21  Werner Lemberg  <wl@gnu.org>
 
+	[sfnt] Avoid unnecessarily large allocation for WOFFs (#46257).
+
+	* src/sfnt/sfobjs.c (woff_open_font): Use WOFF's `totalSfntSize'
+	only after thorough checks.
+	Add tracing messages.
+
+2015-10-21  Werner Lemberg  <wl@gnu.org>
+
 	[type42] Better check invalid `sfnts' array data (#46255).
 
 	* src/type42/t42parse.c (t42_parse_sfnts): Table lengths must be
diff --git a/src/autofit/afranges.c b/src/autofit/afranges.c
index 13c2213..64edc79 100644
--- a/src/autofit/afranges.c
+++ b/src/autofit/afranges.c
@@ -179,6 +179,34 @@
   };
 
 
+  const AF_Script_UniRangeRec  af_khmr_uniranges[] =
+  {
+    AF_UNIRANGE_REC(  0x1780UL,  0x17FFUL ),  /* Khmer */
+    AF_UNIRANGE_REC(       0UL,       0UL )
+  };
+
+  const AF_Script_UniRangeRec  af_khmr_nonbase_uniranges[] =
+  {
+    AF_UNIRANGE_REC(  0x17B7UL,  0x17BDUL ),
+    AF_UNIRANGE_REC(  0x17C6UL,  0x17C6UL ),
+    AF_UNIRANGE_REC(  0x17C9UL,  0x17D3UL ),
+    AF_UNIRANGE_REC(  0x17DDUL,  0x17DDUL ),
+    AF_UNIRANGE_REC(       0UL,       0UL )
+  };
+
+
+  const AF_Script_UniRangeRec  af_khms_uniranges[] =
+  {
+    AF_UNIRANGE_REC(  0x19E0UL,  0x19FFUL ),  /* Khmer Symbols */
+    AF_UNIRANGE_REC(       0UL,       0UL )
+  };
+
+  const AF_Script_UniRangeRec  af_khms_nonbase_uniranges[] =
+  {
+    AF_UNIRANGE_REC( 0UL, 0UL )
+  };
+
+
   const AF_Script_UniRangeRec  af_lao_uniranges[] =
   {
     AF_UNIRANGE_REC(  0x0E80UL,  0x0EFFUL ),  /* Lao */
diff --git a/src/sfnt/sfobjs.c b/src/sfnt/sfobjs.c
index 42c7222..eabe865 100644
--- a/src/sfnt/sfobjs.c
+++ b/src/sfnt/sfobjs.c
@@ -451,10 +451,14 @@
                                      woff.metaOrigLength != 0 ) ) ||
          ( woff.metaLength != 0 && woff.metaOrigLength == 0 )     ||
          ( woff.privOffset == 0 && woff.privLength != 0 )         )
+    {
+      FT_ERROR(( "woff_font_open: invalid WOFF header\n" ));
       return FT_THROW( Invalid_Table );
+    }
 
-    if ( FT_ALLOC( sfnt, woff.totalSfntSize ) ||
-         FT_NEW( sfnt_stream )                )
+    /* Don't trust `totalSfntSize' before thorough checks. */
+    if ( FT_ALLOC( sfnt, 12 + woff.num_tables * 16UL ) ||
+         FT_NEW( sfnt_stream )                         )
       goto Exit;
 
     sfnt_header = sfnt;
@@ -521,6 +525,8 @@
       if ( table->Tag <= old_tag )
       {
         FT_FRAME_EXIT();
+
+        FT_ERROR(( "woff_font_open: table tags are not sorted\n" ));
         error = FT_THROW( Invalid_Table );
         goto Exit;
       }
@@ -555,6 +561,7 @@
            sfnt_offset > woff.totalSfntSize - table->OrigLength ||
            table->CompLength > table->OrigLength                )
       {
+        FT_ERROR(( "woff_font_open: invalid table offsets\n" ));
         error = FT_THROW( Invalid_Table );
         goto Exit;
       }
@@ -580,6 +587,8 @@
       if ( woff.metaOffset != woff_offset                  ||
            woff.metaOffset + woff.metaLength > woff.length )
       {
+        FT_ERROR(( "woff_font_open:"
+                   " invalid `metadata' offset or length\n" ));
         error = FT_THROW( Invalid_Table );
         goto Exit;
       }
@@ -596,6 +605,7 @@
       if ( woff.privOffset != woff_offset                  ||
            woff.privOffset + woff.privLength > woff.length )
       {
+        FT_ERROR(( "woff_font_open: invalid `private' offset or length\n" ));
         error = FT_THROW( Invalid_Table );
         goto Exit;
       }
@@ -607,10 +617,19 @@
     if ( sfnt_offset != woff.totalSfntSize ||
          woff_offset != woff.length        )
     {
+      FT_ERROR(( "woff_font_open: invalid `sfnt' table structure\n" ));
       error = FT_THROW( Invalid_Table );
       goto Exit;
     }
 
+    /* Now use `totalSfntSize'. */
+    if ( FT_REALLOC( sfnt,
+                     12 + woff.num_tables * 16UL,
+                     woff.totalSfntSize ) )
+      goto Exit;
+
+    sfnt_header = sfnt + 12;
+
     /* Write the tables. */
 
     for ( nn = 0; nn < woff.num_tables; nn++ )
@@ -651,6 +670,7 @@
           goto Exit;
         if ( output_len != table->OrigLength )
         {
+          FT_ERROR(( "woff_font_open: compressed table length mismatch\n" ));
           error = FT_THROW( Invalid_Table );
           goto Exit;
         }
diff --git a/src/tools/ftfuzzer/ftfuzzer.cc b/src/tools/ftfuzzer/ftfuzzer.cc
index e5ab293..45d0137 100644
--- a/src/tools/ftfuzzer/ftfuzzer.cc
+++ b/src/tools/ftfuzzer/ftfuzzer.cc
@@ -3,6 +3,9 @@
 #  error "a C++11 compiler is needed"
 #endif
 
+#include <archive.h>
+#include <archive_entry.h>
+
 #include <assert.h>
 #include <stdint.h>
 
@@ -45,6 +48,59 @@ using namespace std;
 
   FT_Global  global_ft;
 
+  static int
+  archive_read_entry_data( struct archive *ar, vector<FT_Byte> *vw )
+  {
+    int r;
+    const FT_Byte *buff;
+    size_t size;
+    int64_t offset;
+
+    for (;;) {
+      r = archive_read_data_block( ar, reinterpret_cast<const void**>(&buff), &size, &offset );
+      if (r == ARCHIVE_EOF)
+        return (ARCHIVE_OK);
+      if (r != ARCHIVE_OK)
+        return (r);
+      vw->insert(vw->end(), buff, buff + size);
+    }
+ }
+
+  static vector<vector<FT_Byte>>
+  parse_data( const uint8_t*  data,
+              size_t          size )
+  {
+    struct archive_entry *entry;
+    int r;
+    vector<vector<FT_Byte>> files;
+
+    unique_ptr<struct archive, decltype ( archive_read_free )*> a( archive_read_new(), archive_read_free );
+    archive_read_support_format_tar(a.get());
+
+    // The need for the const_cast was removed with libarchive be4d4ddcfca77f6e43753156eaa919f4d25ed903
+    if (!(r = archive_read_open_memory( a.get(), const_cast<void*>(static_cast<const void*>(data)), size )))
+    {
+      unique_ptr<struct archive, decltype ( archive_read_close )*> a_open( a.get(), archive_read_close );
+      for (;;) {
+        r = archive_read_next_header( a_open.get(), &entry );
+        if (r == ARCHIVE_EOF)
+          break;
+        if (r != ARCHIVE_OK)
+          break;
+        vector<FT_Byte> entry_data;
+        r = archive_read_entry_data( a.get(), &entry_data );
+        if (r != ARCHIVE_OK)
+          break;
+        files.push_back( move( entry_data ) );
+      }
+    }
+
+    if (files.size() == 0)
+      files.emplace_back(data, data + size);
+
+    return files;
+  }
+
 
   static void
   setIntermediateAxis( FT_Face  face )
@@ -85,6 +141,8 @@ using namespace std;
 
     long  size = (long)size_;
 
+    const vector<vector<FT_Byte>>& files = parse_data( data, size );
+
     FT_Face         face;
     FT_Int32        load_flags  = FT_LOAD_DEFAULT;
 #if 0
@@ -99,7 +157,7 @@ using namespace std;
     // more than a single font.
 
     // get number of faces
-    if ( FT_New_Memory_Face( library, data, size, -1, &face ) )
+    if ( FT_New_Memory_Face( library, files[0].data(), files[0].size(), -1, &face ) )
       return 0;
     long  num_faces = face->num_faces;
     FT_Done_Face( face );
@@ -111,8 +169,8 @@ using namespace std;
     {
       // get number of instances
       if ( FT_New_Memory_Face( library,
-                               data,
-                               size,
+                               files[0].data(),
+                               files[0].size(),
                                -( face_index + 1 ),
                                &face ) )
         continue;
@@ -125,12 +183,23 @@ using namespace std;
             instance_index++ )
       {
         if ( FT_New_Memory_Face( library,
-                                 data,
-                                 size,
+                                 files[0].data(),
+                                 files[0].size(),
                                  ( instance_index << 16 ) + face_index,
                                  &face ) )
           continue;
 
+        for ( long files_index = 1;
+              files_index < files.size();
+              files_index++)
+        {
+          FT_Open_Args open_args = {};
+          open_args.flags = FT_OPEN_MEMORY;
+          open_args.memory_base = files[files_index].data();
+          open_args.memory_size = files[files_index].size();
+          FT_Attach_Stream( face, &open_args );
+        }
+
         // loop over all bitmap stroke sizes
         // and an arbitrary size for outlines
         for ( long  fixed_sizes_index = 0;
-- 
2.6.2

From 748e3681734eb40952f2eabb61ae90f5f7e7b2a2 Mon Sep 17 00:00:00 2001
From: Dave Arnold <darnold@adobe.com>
Date: Wed, 21 Oct 2015 13:58:43 +0200
Subject: [PATCH 076/110] [cff] Remove an assert (#46107).

* src/cff/cf2hints.c (cf2_hintmap_insertHint): Ignore paired edges
in wrong order.
---
 ChangeLog          | 7 +++++++
 src/cff/cf2hints.c | 5 +++--
 2 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index cac6c75..6af1970 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-21  Dave Arnold  <darnold@adobe.com>
+
+	[cff] Remove an assert (#46107).
+
+	* src/cff/cf2hints.c (cf2_hintmap_insertHint): Ignore paired edges
+	in wrong order.
+
 2015-10-21  Werner Lemberg  <wl@gnu.org>
 
 	[sfnt] Avoid unnecessarily large allocation for WOFFs (#46257).
diff --git a/src/cff/cf2hints.c b/src/cff/cf2hints.c
index 0e27000..bbbe8e3 100644
--- a/src/cff/cf2hints.c
+++ b/src/cff/cf2hints.c
@@ -587,8 +587,9 @@
     }
 
     /* paired edges must be in proper order */
-    FT_ASSERT( !isPair                                         ||
-               topHintEdge->csCoord >= bottomHintEdge->csCoord );
+    if ( isPair                                         &&
+         topHintEdge->csCoord < bottomHintEdge->csCoord )
+      return;
 
     /* linear search to find index value of insertion point */
     indexInsert = 0;
-- 
2.6.2

From 3066f5f53da6327ef9194eecbcc03370649704d2 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 21 Oct 2015 14:05:41 +0200
Subject: [PATCH 077/110] Revert erroneously applied commits.

---
 src/autofit/afranges.c         | 28 ---------------
 src/tools/ftfuzzer/ftfuzzer.cc | 79 +++---------------------------------------
 2 files changed, 5 insertions(+), 102 deletions(-)

diff --git a/src/autofit/afranges.c b/src/autofit/afranges.c
index 64edc79..13c2213 100644
--- a/src/autofit/afranges.c
+++ b/src/autofit/afranges.c
@@ -179,34 +179,6 @@
   };
 
 
-  const AF_Script_UniRangeRec  af_khmr_uniranges[] =
-  {
-    AF_UNIRANGE_REC(  0x1780UL,  0x17FFUL ),  /* Khmer */
-    AF_UNIRANGE_REC(       0UL,       0UL )
-  };
-
-  const AF_Script_UniRangeRec  af_khmr_nonbase_uniranges[] =
-  {
-    AF_UNIRANGE_REC(  0x17B7UL,  0x17BDUL ),
-    AF_UNIRANGE_REC(  0x17C6UL,  0x17C6UL ),
-    AF_UNIRANGE_REC(  0x17C9UL,  0x17D3UL ),
-    AF_UNIRANGE_REC(  0x17DDUL,  0x17DDUL ),
-    AF_UNIRANGE_REC(       0UL,       0UL )
-  };
-
-
-  const AF_Script_UniRangeRec  af_khms_uniranges[] =
-  {
-    AF_UNIRANGE_REC(  0x19E0UL,  0x19FFUL ),  /* Khmer Symbols */
-    AF_UNIRANGE_REC(       0UL,       0UL )
-  };
-
-  const AF_Script_UniRangeRec  af_khms_nonbase_uniranges[] =
-  {
-    AF_UNIRANGE_REC( 0UL, 0UL )
-  };
-
-
   const AF_Script_UniRangeRec  af_lao_uniranges[] =
   {
     AF_UNIRANGE_REC(  0x0E80UL,  0x0EFFUL ),  /* Lao */
diff --git a/src/tools/ftfuzzer/ftfuzzer.cc b/src/tools/ftfuzzer/ftfuzzer.cc
index 45d0137..e5ab293 100644
--- a/src/tools/ftfuzzer/ftfuzzer.cc
+++ b/src/tools/ftfuzzer/ftfuzzer.cc
@@ -3,9 +3,6 @@
 #  error "a C++11 compiler is needed"
 #endif
 
-#include <archive.h>
-#include <archive_entry.h>
-
 #include <assert.h>
 #include <stdint.h>
 
@@ -48,59 +45,6 @@ using namespace std;
 
   FT_Global  global_ft;
 
-  static int
-  archive_read_entry_data( struct archive *ar, vector<FT_Byte> *vw )
-  {
-    int r;
-    const FT_Byte *buff;
-    size_t size;
-    int64_t offset;
-
-    for (;;) {
-      r = archive_read_data_block( ar, reinterpret_cast<const void**>(&buff), &size, &offset );
-      if (r == ARCHIVE_EOF)
-        return (ARCHIVE_OK);
-      if (r != ARCHIVE_OK)
-        return (r);
-      vw->insert(vw->end(), buff, buff + size);
-    }
- }
-
-  static vector<vector<FT_Byte>>
-  parse_data( const uint8_t*  data,
-              size_t          size )
-  {
-    struct archive_entry *entry;
-    int r;
-    vector<vector<FT_Byte>> files;
-
-    unique_ptr<struct archive, decltype ( archive_read_free )*> a( archive_read_new(), archive_read_free );
-    archive_read_support_format_tar(a.get());
-
-    // The need for the const_cast was removed with libarchive be4d4ddcfca77f6e43753156eaa919f4d25ed903
-    if (!(r = archive_read_open_memory( a.get(), const_cast<void*>(static_cast<const void*>(data)), size )))
-    {
-      unique_ptr<struct archive, decltype ( archive_read_close )*> a_open( a.get(), archive_read_close );
-      for (;;) {
-        r = archive_read_next_header( a_open.get(), &entry );
-        if (r == ARCHIVE_EOF)
-          break;
-        if (r != ARCHIVE_OK)
-          break;
-        vector<FT_Byte> entry_data;
-        r = archive_read_entry_data( a.get(), &entry_data );
-        if (r != ARCHIVE_OK)
-          break;
-        files.push_back( move( entry_data ) );
-      }
-    }
-
-    if (files.size() == 0)
-      files.emplace_back(data, data + size);
-
-    return files;
-  }
-
 
   static void
   setIntermediateAxis( FT_Face  face )
@@ -141,8 +85,6 @@ using namespace std;
 
     long  size = (long)size_;
 
-    const vector<vector<FT_Byte>>& files = parse_data( data, size );
-
     FT_Face         face;
     FT_Int32        load_flags  = FT_LOAD_DEFAULT;
 #if 0
@@ -157,7 +99,7 @@ using namespace std;
     // more than a single font.
 
     // get number of faces
-    if ( FT_New_Memory_Face( library, files[0].data(), files[0].size(), -1, &face ) )
+    if ( FT_New_Memory_Face( library, data, size, -1, &face ) )
       return 0;
     long  num_faces = face->num_faces;
     FT_Done_Face( face );
@@ -169,8 +111,8 @@ using namespace std;
     {
       // get number of instances
       if ( FT_New_Memory_Face( library,
-                               files[0].data(),
-                               files[0].size(),
+                               data,
+                               size,
                                -( face_index + 1 ),
                                &face ) )
         continue;
@@ -183,23 +125,12 @@ using namespace std;
             instance_index++ )
       {
         if ( FT_New_Memory_Face( library,
-                                 files[0].data(),
-                                 files[0].size(),
+                                 data,
+                                 size,
                                  ( instance_index << 16 ) + face_index,
                                  &face ) )
           continue;
 
-        for ( long files_index = 1;
-              files_index < files.size();
-              files_index++)
-        {
-          FT_Open_Args open_args = {};
-          open_args.flags = FT_OPEN_MEMORY;
-          open_args.memory_base = files[files_index].data();
-          open_args.memory_size = files[files_index].size();
-          FT_Attach_Stream( face, &open_args );
-        }
-
         // loop over all bitmap stroke sizes
         // and an arbitrary size for outlines
         for ( long  fixed_sizes_index = 0;
-- 
2.6.2

From 3cfd51233c8b88f53097ebcef6bbb05e360d12b7 Mon Sep 17 00:00:00 2001
From: Dave Arnold <darnold@adobe.com>
Date: Wed, 21 Oct 2015 14:07:25 +0200
Subject: [PATCH 078/110] [cff] Fix limit in assert for max hints.

* src/cff/cf2interp.c (cf2_hintmask_setAll): Allow mask equal to the
limit (96 bits).
---
 ChangeLog          | 7 +++++++
 src/cff/cf2intrp.c | 2 +-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 6af1970..5d25e0f 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-21  Dave Arnold  <darnold@adobe.com>
 
+	[cff] Fix limit in assert for max hints.
+
+	* src/cff/cf2interp.c (cf2_hintmask_setAll): Allow mask equal to the
+	limit (96 bits).
+
+2015-10-21  Dave Arnold  <darnold@adobe.com>
+
 	[cff] Remove an assert (#46107).
 
 	* src/cff/cf2hints.c (cf2_hintmap_insertHint): Ignore paired edges
diff --git a/src/cff/cf2intrp.c b/src/cff/cf2intrp.c
index ff3fa9a..b49b96f 100644
--- a/src/cff/cf2intrp.c
+++ b/src/cff/cf2intrp.c
@@ -184,7 +184,7 @@
       return;
 
     FT_ASSERT( hintmask->byteCount > 0 );
-    FT_ASSERT( hintmask->byteCount <
+    FT_ASSERT( hintmask->byteCount <=
                  sizeof ( hintmask->mask ) / sizeof ( hintmask->mask[0] ) );
 
     /* set mask to all ones */
-- 
2.6.2

From 87fefc594eeea8064766b397c93d685e261e2989 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 21 Oct 2015 20:29:12 +0200
Subject: [PATCH 079/110] [type42] Fix heap buffer overflow (#46269).

* src/type42/t42parse.c (t42_parse_sfnts): Fix off-by-one error in
bounds checking.
---
 ChangeLog             | 7 +++++++
 src/type42/t42parse.c | 2 +-
 2 files changed, 8 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 5d25e0f..e4ebfdb 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-21  Werner Lemberg  <wl@gnu.org>
+
+	[type42] Fix heap buffer overflow (#46269).
+
+	* src/type42/t42parse.c (t42_parse_sfnts): Fix off-by-one error in
+	bounds checking.
+
 2015-10-21  Dave Arnold  <darnold@adobe.com>
 
 	[cff] Fix limit in assert for max hints.
diff --git a/src/type42/t42parse.c b/src/type42/t42parse.c
index 3bcf97e..5e352a2 100644
--- a/src/type42/t42parse.c
+++ b/src/type42/t42parse.c
@@ -640,7 +640,7 @@
 
         string_buf = parser->root.cursor + 1;   /* one space after `RD' */
 
-        if ( (FT_ULong)( limit - parser->root.cursor ) < string_size )
+        if ( (FT_ULong)( limit - parser->root.cursor ) <= string_size )
         {
           FT_ERROR(( "t42_parse_sfnts: too much binary data\n" ));
           error = FT_THROW( Invalid_File_Format );
-- 
2.6.2

From e484d36b2b124ee64c07d2fb735b85f09174e357 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 21 Oct 2015 20:48:27 +0200
Subject: [PATCH 080/110] [base] Pacify compiler (#46266).

* src/base/ftoutln.c (FT_Outline_EmboldenXY): Initialize `in' and
`anchor'.
---
 ChangeLog          | 7 +++++++
 src/base/ftoutln.c | 3 +++
 2 files changed, 10 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index e4ebfdb..79700aa 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,12 @@
 2015-10-21  Werner Lemberg  <wl@gnu.org>
 
+	[base] Pacify compiler (#46266).
+
+	* src/base/ftoutln.c (FT_Outline_EmboldenXY): Initialize `in' and
+	`anchor'.
+
+2015-10-21  Werner Lemberg  <wl@gnu.org>
+
 	[type42] Fix heap buffer overflow (#46269).
 
 	* src/type42/t42parse.c (t42_parse_sfnts): Fix off-by-one error in
diff --git a/src/base/ftoutln.c b/src/base/ftoutln.c
index 34cf74e..201ceab 100644
--- a/src/base/ftoutln.c
+++ b/src/base/ftoutln.c
@@ -942,6 +942,9 @@
       l_in = 0;
       last = outline->contours[c];
 
+      /* pacify compiler */
+      in.x = in.y = anchor.x = anchor.y = 0;
+
       /* Counter j cycles though the points; counter i advances only  */
       /* when points are moved; anchor k marks the first moved point. */
       for ( i = last, j = first, k = -1;
-- 
2.6.2

From 5dedbc048f0efaab3d3b32fc9c60eb4567114723 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 22 Oct 2015 07:22:55 +0200
Subject: [PATCH 081/110] Improve documentation of `FT_Get_MM_Var' and
 `FT_MM_Var'.

---
 include/freetype/ftmm.h | 7 ++++++-
 1 file changed, 6 insertions(+), 1 deletion(-)

diff --git a/include/freetype/ftmm.h b/include/freetype/ftmm.h
index 6ef4798..96dd66e 100644
--- a/include/freetype/ftmm.h
+++ b/include/freetype/ftmm.h
@@ -203,9 +203,13 @@ FT_BEGIN_HEADER
   /*                                                                       */
   /*    axis            :: An axis descriptor table.                       */
   /*                       GX fonts contain slightly more data than MM.    */
+  /*                       Memory management of this pointer is done       */
+  /*                       internally by FreeType.                         */
   /*                                                                       */
   /*    namedstyle      :: A named style table.                            */
   /*                       Only meaningful with GX.                        */
+  /*                       Memory management of this pointer is done       */
+  /*                       internally by FreeType.                         */
   /*                                                                       */
   typedef struct  FT_MM_Var_
   {
@@ -255,7 +259,8 @@ FT_BEGIN_HEADER
   /*                                                                       */
   /* <Output>                                                              */
   /*    amaster :: The Multiple Masters/GX var descriptor.                 */
-  /*               Allocates a data structure, which the user must free.   */
+  /*               Allocates a data structure, which the user must         */
+  /*               deallocate with `free' after use.                       */
   /*                                                                       */
   /* <Return>                                                              */
   /*    FreeType error code.  0~means success.                             */
-- 
2.6.2

From 59ae73fe1658f5cf001f76b983abbdb1f1ff6dc2 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 22 Oct 2015 09:26:00 +0200
Subject: [PATCH 082/110] [cid] Better check of `SubrCount' dictionary entry
 (#46272).

* src/cid/cidload.c (cid_face_open): Add more sanity tests for
`fd_bytes', `gd_bytes', `sd_bytes', and `num_subrs'.
---
 ChangeLog         |  7 +++++++
 src/cid/cidload.c | 23 ++++++++++++++++++++---
 2 files changed, 27 insertions(+), 3 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 79700aa..f01f149 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-10-22  Werner Lemberg  <wl@gnu.org>
+
+	[cid] Better check of `SubrCount' dictionary entry (#46272).
+
+	* src/cid/cidload.c (cid_face_open): Add more sanity tests for
+	`fd_bytes', `gd_bytes', `sd_bytes', and `num_subrs'.
+
 2015-10-21  Werner Lemberg  <wl@gnu.org>
 
 	[base] Pacify compiler (#46266).
diff --git a/src/cid/cidload.c b/src/cid/cidload.c
index aa125a4..7c39c02 100644
--- a/src/cid/cidload.c
+++ b/src/cid/cidload.c
@@ -750,6 +750,14 @@
 
     /* sanity tests */
 
+    if ( cid->fd_bytes < 0 || cid->gd_bytes < 0 )
+    {
+      FT_ERROR(( "cid_parse_dict:"
+                 " Invalid `FDBytes' or `GDBytes' value\n" ));
+      error = FT_THROW( Invalid_File_Format );
+      goto Exit;
+    }
+
     /* allow at most 32bit offsets */
     if ( cid->fd_bytes > 4 || cid->gd_bytes > 4 )
     {
@@ -769,6 +777,13 @@
       CID_FaceDict  dict = cid->font_dicts + n;
 
 
+      if ( dict->sd_bytes < 0 )
+      {
+        FT_ERROR(( "cid_parse_dict: Invalid `SDBytes' value\n" ));
+        error = FT_THROW( Invalid_File_Format );
+        goto Exit;
+      }
+
       if ( dict->sd_bytes > 4 )
       {
         FT_ERROR(( "cid_parse_dict:"
@@ -785,9 +800,11 @@
         goto Exit;
       }
 
-      if ( dict->sd_bytes                                              &&
-           dict->num_subrs >
-             ( binary_length - dict->subrmap_offset ) / dict->sd_bytes )
+      /* `num_subrs' is scanned as a signed integer */
+      if ( (FT_Int)dict->num_subrs < 0                                     ||
+           ( dict->sd_bytes                                              &&
+             dict->num_subrs > ( binary_length - dict->subrmap_offset ) /
+                                 (FT_UInt)dict->sd_bytes                 ) )
       {
         FT_ERROR(( "cid_parse_dict: Invalid `SubrCount' value\n" ));
         error = FT_THROW( Invalid_File_Format );
-- 
2.6.2

From f1c93439b992fa66f17e92ee13314440f13008a2 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 22 Oct 2015 10:11:23 +0200
Subject: [PATCH 083/110] [cff] Avoid overflow/module arithmetic.

This modifies the addition of subroutine number to subroutine bias
from unsigned to signed, but does not change any results.

* src/cff/cf2ft.c (cf2_initGlobalRegionBuffer,
cf2_initLocalRegionBuffer): Change variable names from (unsigned)
`idx' to (signed) `subrNum', since it is not an index until after
the bias is added.
* src/cff/cf2ft.h: Updated.

* src/cff/cf2intrp.c (cf2_interpT2CharString) <cf2_cmdCALLSUBR>:
Updated similarly.
---
 ChangeLog          | 17 +++++++++++++++++
 src/cff/cf2ft.c    | 14 ++++++++++----
 src/cff/cf2ft.h    |  4 ++--
 src/cff/cf2intrp.c | 12 ++++++------
 4 files changed, 35 insertions(+), 12 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index f01f149..c4a61a1 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,20 @@
+2015-10-22  Dave Arnold  <darnold@adobe.com>
+	    Werner Lemberg  <wl@gnu.org>
+
+	[cff] Avoid overflow/module arithmetic.
+
+	This modifies the addition of subroutine number to subroutine bias
+	from unsigned to signed, but does not change any results.
+
+	* src/cff/cf2ft.c (cf2_initGlobalRegionBuffer,
+	cf2_initLocalRegionBuffer): Change variable names from (unsigned)
+	`idx' to (signed) `subrNum', since it is not an index until after
+	the bias is added.
+	* src/cff/cf2ft.h: Updated.
+
+	* src/cff/cf2intrp.c (cf2_interpT2CharString) <cf2_cmdCALLSUBR>:
+	Updated similarly.
+
 2015-10-22  Werner Lemberg  <wl@gnu.org>
 
 	[cid] Better check of `SubrCount' dictionary entry (#46272).
diff --git a/src/cff/cf2ft.c b/src/cff/cf2ft.c
index d2544a2..55f3206 100644
--- a/src/cff/cf2ft.c
+++ b/src/cff/cf2ft.c
@@ -544,14 +544,17 @@
   /* return 0 on success                                   */
   FT_LOCAL_DEF( CF2_Int )
   cf2_initGlobalRegionBuffer( CFF_Decoder*  decoder,
-                              CF2_UInt      idx,
+                              CF2_Int       subrNum,
                               CF2_Buffer    buf )
   {
+    CF2_UInt  idx;
+
+
     FT_ASSERT( decoder );
 
     FT_ZERO( buf );
 
-    idx += (CF2_UInt)decoder->globals_bias;
+    idx = (CF2_UInt)( subrNum + decoder->globals_bias );
     if ( idx >= decoder->num_globals )
       return TRUE;     /* error */
 
@@ -628,14 +631,17 @@
 
   FT_LOCAL_DEF( CF2_Int )
   cf2_initLocalRegionBuffer( CFF_Decoder*  decoder,
-                             CF2_UInt      idx,
+                             CF2_Int       subrNum,
                              CF2_Buffer    buf )
   {
+    CF2_UInt  idx;
+
+
     FT_ASSERT( decoder );
 
     FT_ZERO( buf );
 
-    idx += (CF2_UInt)decoder->locals_bias;
+    idx = (CF2_UInt)( subrNum + decoder->locals_bias );
     if ( idx >= decoder->num_locals )
       return TRUE;     /* error */
 
diff --git a/src/cff/cf2ft.h b/src/cff/cf2ft.h
index 3073df3..9810511 100644
--- a/src/cff/cf2ft.h
+++ b/src/cff/cf2ft.h
@@ -99,7 +99,7 @@ FT_BEGIN_HEADER
 
   FT_LOCAL( CF2_Int )
   cf2_initGlobalRegionBuffer( CFF_Decoder*  decoder,
-                              CF2_UInt      idx,
+                              CF2_Int       subrNum,
                               CF2_Buffer    buf );
   FT_LOCAL( FT_Error )
   cf2_getSeacComponent( CFF_Decoder*  decoder,
@@ -110,7 +110,7 @@ FT_BEGIN_HEADER
                          CF2_Buffer    buf );
   FT_LOCAL( CF2_Int )
   cf2_initLocalRegionBuffer( CFF_Decoder*  decoder,
-                             CF2_UInt      idx,
+                             CF2_Int       subrNum,
                              CF2_Buffer    buf );
 
   FT_LOCAL( CF2_Fixed )
diff --git a/src/cff/cf2intrp.c b/src/cff/cf2intrp.c
index b49b96f..1910f1b 100644
--- a/src/cff/cf2intrp.c
+++ b/src/cff/cf2intrp.c
@@ -746,7 +746,7 @@
       case cf2_cmdCALLGSUBR:
       case cf2_cmdCALLSUBR:
         {
-          CF2_UInt  subrIndex;
+          CF2_Int  subrNum;
 
 
           FT_TRACE4(( op1 == cf2_cmdCALLGSUBR ? " callgsubr"
@@ -766,17 +766,17 @@
                            (size_t)charstringIndex + 1 );
 
           /* set up the new CFF region and pointer */
-          subrIndex = (CF2_UInt)cf2_stack_popInt( opStack );
+          subrNum = cf2_stack_popInt( opStack );
 
           switch ( op1 )
           {
           case cf2_cmdCALLGSUBR:
             FT_TRACE4(( " (idx %d, entering level %d)\n",
-                        subrIndex + (CF2_UInt)decoder->globals_bias,
+                        subrNum + decoder->globals_bias,
                         charstringIndex + 1 ));
 
             if ( cf2_initGlobalRegionBuffer( decoder,
-                                             subrIndex,
+                                             subrNum,
                                              charstring ) )
             {
               lastError = FT_THROW( Invalid_Glyph_Format );
@@ -787,11 +787,11 @@
           default:
             /* cf2_cmdCALLSUBR */
             FT_TRACE4(( " (idx %d, entering level %d)\n",
-                        subrIndex + (CF2_UInt)decoder->locals_bias,
+                        subrNum + decoder->locals_bias,
                         charstringIndex + 1 ));
 
             if ( cf2_initLocalRegionBuffer( decoder,
-                                            subrIndex,
+                                            subrNum,
                                             charstring ) )
             {
               lastError = FT_THROW( Invalid_Glyph_Format );
-- 
2.6.2

From e93d326c8ba52ae12589844bad5badeace4c7943 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 22 Oct 2015 10:17:20 +0200
Subject: [PATCH 084/110] [sfnt, type42] Fix clang compiler warnings.

* src/sfnt/sfobjs.c (sfnt_init_face): Initialize `offset'.

* src/type42/t42parse.c (t42_parse_sfnts): Use proper cast.
---
 ChangeLog             | 8 ++++++++
 src/sfnt/sfobjs.c     | 1 +
 src/type42/t42parse.c | 2 +-
 3 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index c4a61a1..228211b 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,11 @@
+2015-10-22  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt, type42] Fix clang compiler warnings.
+
+	* src/sfnt/sfobjs.c (sfnt_init_face): Initialize `offset'.
+
+	* src/type42/t42parse.c (t42_parse_sfnts): Use proper cast.
+
 2015-10-22  Dave Arnold  <darnold@adobe.com>
 	    Werner Lemberg  <wl@gnu.org>
 
diff --git a/src/sfnt/sfobjs.c b/src/sfnt/sfobjs.c
index eabe865..de030ea 100644
--- a/src/sfnt/sfobjs.c
+++ b/src/sfnt/sfobjs.c
@@ -930,6 +930,7 @@
            FT_READ_USHORT( instance_size )                        )
       {
         version       = 0;
+        offset        = 0;
         num_axes      = 0;
         axis_size     = 0;
         num_instances = 0;
diff --git a/src/type42/t42parse.c b/src/type42/t42parse.c
index 5e352a2..04eba8e 100644
--- a/src/type42/t42parse.c
+++ b/src/type42/t42parse.c
@@ -672,7 +672,7 @@
       /* The whole TTF is now loaded into `string_buf'.  We are */
       /* checking its contents while copying it to `ttf_data'.  */
 
-      size = limit - parser->root.cursor;
+      size = (FT_ULong)( limit - parser->root.cursor );
 
       for ( n = 0; n < string_size; n++ )
       {
-- 
2.6.2

From 6f09011fe61638392cdc982af97447e579a7a69d Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 24 Oct 2015 10:10:22 +0200
Subject: [PATCH 085/110] [sfnt] Sanitize bitmap strike glyph height.

Problem reported by Nikolay Sivov <bunglehead@gmail.com>.

* src/sfnt/ttsbit.c (tt_face_load_strike_metrics): Avoid zero value
for `metrics->height' by applying some heuristics.
---
 ChangeLog         |  9 +++++++++
 src/sfnt/ttsbit.c | 60 ++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 68 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 228211b..81c2332 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,12 @@
+2015-10-24  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Sanitize bitmap strike glyph height.
+
+	Problem reported by Nikolay Sivov <bunglehead@gmail.com>.
+
+	* src/sfnt/ttsbit.c (tt_face_load_strike_metrics): Avoid zero value
+	for `metrics->height' by applying some heuristics.
+
 2015-10-22  Werner Lemberg  <wl@gnu.org>
 
 	[sfnt, type42] Fix clang compiler warnings.
diff --git a/src/sfnt/ttsbit.c b/src/sfnt/ttsbit.c
index 8235255..4272d93 100644
--- a/src/sfnt/ttsbit.c
+++ b/src/sfnt/ttsbit.c
@@ -247,6 +247,8 @@
     case TT_SBIT_TABLE_TYPE_CBLC:
       {
         FT_Byte*  strike;
+        FT_Char   max_before_bl;
+        FT_Char   min_after_bl;
 
 
         strike = face->sbit_table + 8 + strike_index * 48;
@@ -256,7 +258,63 @@
 
         metrics->ascender  = (FT_Char)strike[16] * 64;  /* hori.ascender  */
         metrics->descender = (FT_Char)strike[17] * 64;  /* hori.descender */
-        metrics->height    = metrics->ascender - metrics->descender;
+
+        /* Due to fuzzy wording in the EBLC documentation, we find both */
+        /* positive and negative values for `descender'.  Additionally, */
+        /* many fonts have both `ascender' and `descender' set to zero  */
+        /* (which is definitely wrong).  MS Windows simply ignores all  */
+        /* those values...  For these reasons we apply some heuristics  */
+        /* to get a reasonable, non-zero value for the height.          */
+
+        max_before_bl = (FT_Char)strike[24];
+        min_after_bl  = (FT_Char)strike[25];
+
+        if ( metrics->descender > 0 )
+        {
+          /* compare sign of descender with `min_after_bl' */
+          if ( min_after_bl < 0 )
+            metrics->descender = -metrics->descender;
+        }
+
+        else if ( metrics->descender == 0 )
+        {
+          if ( metrics->ascender == 0 )
+          {
+            FT_TRACE2(( "tt_face_load_strike_metrics:"
+                        " sanitizing invalid ascender and descender\n"
+                        "                            "
+                        " values for strike (%d, %d)\n",
+                        metrics->x_ppem, metrics->y_ppem ));
+
+            /* sanitize buggy ascender and descender values */
+            if ( max_before_bl || min_after_bl )
+            {
+              metrics->ascender  = max_before_bl;
+              metrics->descender = min_after_bl;
+            }
+            else
+            {
+              metrics->ascender  = metrics->y_ppem;
+              metrics->descender = 0;
+            }
+          }
+        }
+
+#if 0
+        else
+          ; /* if we have a negative descender, simply use it */
+#endif
+
+        metrics->height = metrics->ascender - metrics->descender;
+        if ( metrics->height == 0 )
+        {
+          FT_TRACE2(( "tt_face_load_strike_metrics:"
+                      " sanitizing invalid height value\n"
+                      "                            "
+                      " for strike (%d, %d)\n",
+                      metrics->x_ppem, metrics->y_ppem ));
+          metrics->height = metrics->y_ppem;
+        }
 
         /* Is this correct? */
         metrics->max_advance = ( (FT_Char)strike[22] + /* min_origin_SB  */
-- 
2.6.2

From 07f27e1e43a63f611e3f0248a488fb891440fff2 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 24 Oct 2015 15:22:13 +0200
Subject: [PATCH 086/110] Thinkos and omissions.

---
 src/sfnt/ttsbit.c | 9 +++++----
 1 file changed, 5 insertions(+), 4 deletions(-)

diff --git a/src/sfnt/ttsbit.c b/src/sfnt/ttsbit.c
index 4272d93..6de8757 100644
--- a/src/sfnt/ttsbit.c
+++ b/src/sfnt/ttsbit.c
@@ -289,12 +289,12 @@
             /* sanitize buggy ascender and descender values */
             if ( max_before_bl || min_after_bl )
             {
-              metrics->ascender  = max_before_bl;
-              metrics->descender = min_after_bl;
+              metrics->ascender  = max_before_bl * 64;
+              metrics->descender = min_after_bl * 64;
             }
             else
             {
-              metrics->ascender  = metrics->y_ppem;
+              metrics->ascender  = metrics->y_ppem * 64;
               metrics->descender = 0;
             }
           }
@@ -313,7 +313,8 @@
                       "                            "
                       " for strike (%d, %d)\n",
                       metrics->x_ppem, metrics->y_ppem ));
-          metrics->height = metrics->y_ppem;
+          metrics->height    = metrics->y_ppem * 64;
+          metrics->descender = metrics->ascender - metrics->height;
         }
 
         /* Is this correct? */
-- 
2.6.2

From 7f00fa64627bb57042ec62aa2ec938f679e097c1 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sun, 25 Oct 2015 10:59:59 +0100
Subject: [PATCH 087/110] [autofit] Improve tracing.

* src/autofit/afhints.c (af_print_idx, af_get_segment_index,
af_get_edge_index): New functions.

(af_glyph_hints_dump_points): Remove unnecessary `|', `[', and `]'.
Add segment and edge index for each point.
Slightly change printing order of some elements.
Don't print `-1' but `--' for missing elements.

(af_glyph_hints_dump_segments, af_glyph_hints_dump_edges): Remove
unnecessary `|', `[', and `]'.
Don't print `-1' but `--' for missing elements.
---
 ChangeLog             |  16 ++++++
 src/autofit/afhints.c | 131 +++++++++++++++++++++++++++++++++++++++++---------
 2 files changed, 125 insertions(+), 22 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 81c2332..f427eb0 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,19 @@
+2015-10-25  Werner Lemberg  <wl@gnu.org>
+
+	[autofit] Improve tracing.
+
+	* src/autofit/afhints.c (af_print_idx, af_get_segment_index,
+	af_get_edge_index): New functions.
+
+	(af_glyph_hints_dump_points): Remove unnecessary `|', `[', and `]'.
+	Add segment and edge index for each point.
+	Slightly change printing order of some elements.
+	Don't print `-1' but `--' for missing elements.
+
+	(af_glyph_hints_dump_segments, af_glyph_hints_dump_edges): Remove
+	unnecessary `|', `[', and `]'.
+	Don't print `-1' but `--' for missing elements.
+
 2015-10-24  Werner Lemberg  <wl@gnu.org>
 
 	[sfnt] Sanitize bitmap strike glyph height.
diff --git a/src/autofit/afhints.c b/src/autofit/afhints.c
index 37482eb..dbb34ac 100644
--- a/src/autofit/afhints.c
+++ b/src/autofit/afhints.c
@@ -219,6 +219,70 @@
 #define AF_INDEX_NUM( ptr, base )  (int)( (ptr) ? ( (ptr) - (base) ) : -1 )
 
 
+  static char*
+  af_print_idx( char* p,
+                int   idx )
+  {
+    if ( idx == -1 )
+    {
+      p[0] = '-';
+      p[1] = '-';
+      p[2] = '\0';
+    }
+    else
+      ft_sprintf( p, "%d", idx );
+
+    return p;
+  }
+
+
+  static int
+  af_get_segment_index( AF_GlyphHints  hints,
+                        int            point_idx,
+                        int            dimension )
+  {
+    AF_AxisHints  axis     = &hints->axis[dimension];
+    AF_Point      point    = hints->points + point_idx;
+    AF_Segment    segments = axis->segments;
+    AF_Segment    limit    = segments + axis->num_segments;
+    AF_Segment    segment;
+
+
+    for ( segment = segments; segment < limit; segment++ )
+    {
+      if ( segment->first <= segment->last )
+      {
+        if ( point >= segment->first && point <= segment->last )
+          break;
+      }
+      else
+      {
+        if ( point >= segment->first || point <= segment->last )
+          break;
+      }
+    }
+
+    if ( segment == limit )
+      return -1;
+
+    return (int)( segment - segments );
+  }
+
+
+  static int
+  af_get_edge_index( AF_GlyphHints  hints,
+                     int            segment_idx,
+                     int            dimension )
+  {
+    AF_AxisHints  axis    = &hints->axis[dimension];
+    AF_Edge       edges   = axis->edges;
+    AF_Segment    segment = axis->segments + segment_idx;
+
+
+    return segment_idx == -1 ? -1 : AF_INDEX_NUM( segment->edge, edges );
+  }
+
+
 #ifdef __cplusplus
   extern "C" {
 #endif
@@ -234,22 +298,38 @@
     AF_DUMP(( "Table of points:\n" ));
 
     if ( hints->num_points )
-      AF_DUMP(( "  [ index |  xorg |  yorg | xscale | yscale"
-                " |  xfit |  yfit |  flags ]\n" ));
+      AF_DUMP(( "  index  hedge  hseg  vedge  vseg  flags"
+                "  xorg  yorg  xscale  yscale   xfit    yfit\n" ));
     else
       AF_DUMP(( "  (none)\n" ));
 
     for ( point = points; point < limit; point++ )
-      AF_DUMP(( "  [ %5d | %5d | %5d | %6.2f | %6.2f"
-                " | %5.2f | %5.2f | %c ]\n",
-                AF_INDEX_NUM( point, points ),
+    {
+      int  point_idx     = AF_INDEX_NUM( point, points );
+      int  segment_idx_0 = af_get_segment_index( hints, point_idx, 0 );
+      int  segment_idx_1 = af_get_segment_index( hints, point_idx, 1 );
+
+      char  buf1[16], buf2[16], buf3[16], buf4[16];
+
+
+      AF_DUMP(( "  %5d  %5s %5s  %5s %5s    %c  "
+                " %5d %5d %7.2f %7.2f %7.2f %7.2f\n",
+                point_idx,
+                af_print_idx( buf1,
+                              af_get_edge_index( hints, segment_idx_1, 1 ) ),
+                af_print_idx( buf2, segment_idx_1 ),
+                af_print_idx( buf3,
+                              af_get_edge_index( hints, segment_idx_0, 0 ) ),
+                af_print_idx( buf4, segment_idx_0 ),
+                ( point->flags & AF_FLAG_WEAK_INTERPOLATION ) ? 'w' : '-',
+
                 point->fx,
                 point->fy,
                 point->ox / 64.0,
                 point->oy / 64.0,
                 point->x / 64.0,
-                point->y / 64.0,
-                ( point->flags & AF_FLAG_WEAK_INTERPOLATION ) ? 'w' : ' '));
+                point->y / 64.0 ));
+    }
     AF_DUMP(( "\n" ));
   }
 #ifdef __cplusplus
@@ -306,21 +386,23 @@
       AF_Segment    limit    = segments + axis->num_segments;
       AF_Segment    seg;
 
+      char  buf1[16], buf2[16], buf3[16];
+
 
       AF_DUMP(( "Table of %s segments:\n",
                 dimension == AF_DIMENSION_HORZ ? "vertical"
                                                : "horizontal" ));
       if ( axis->num_segments )
-        AF_DUMP(( "  [ index |  pos  |  dir  | from"
-                  " |  to  | link | serif | edge"
-                  " | height | extra |    flags    ]\n" ));
+        AF_DUMP(( "  index   pos    dir   from   to"
+                  "   link  serif  edge"
+                  "  height  extra     flags\n" ));
       else
         AF_DUMP(( "  (none)\n" ));
 
       for ( seg = segments; seg < limit; seg++ )
-        AF_DUMP(( "  [ %5d | %5.2g | %5s | %4d"
-                  " | %4d | %4d | %5d | %4d"
-                  " | %6d | %5d | %11s ]\n",
+        AF_DUMP(( "  %5d  %5.2g  %5s  %4d  %4d"
+                  "  %4s  %5s  %4s"
+                  "  %6d  %5d  %11s\n",
                   AF_INDEX_NUM( seg, segments ),
                   dimension == AF_DIMENSION_HORZ
                                ? (int)seg->first->ox / 64.0
@@ -328,9 +410,11 @@
                   af_dir_str( (AF_Direction)seg->dir ),
                   AF_INDEX_NUM( seg->first, points ),
                   AF_INDEX_NUM( seg->last, points ),
-                  AF_INDEX_NUM( seg->link, segments ),
-                  AF_INDEX_NUM( seg->serif, segments ),
-                  AF_INDEX_NUM( seg->edge, edges ),
+
+                  af_print_idx( buf1, AF_INDEX_NUM( seg->link, segments ) ),
+                  af_print_idx( buf2, AF_INDEX_NUM( seg->serif, segments ) ),
+                  af_print_idx( buf3, AF_INDEX_NUM( seg->edge, edges ) ),
+
                   seg->height,
                   seg->height - ( seg->max_coord - seg->min_coord ),
                   af_edge_flags_to_string( seg->flags ) ));
@@ -435,6 +519,8 @@
       AF_Edge       limit = edges + axis->num_edges;
       AF_Edge       edge;
 
+      char  buf1[16], buf2[16];
+
 
       /*
        *  note: AF_DIMENSION_HORZ corresponds to _vertical_ edges
@@ -444,19 +530,20 @@
                 dimension == AF_DIMENSION_HORZ ? "vertical"
                                                : "horizontal" ));
       if ( axis->num_edges )
-        AF_DUMP(( "  [ index |  pos  |  dir  | link"
-                  " | serif | blue | opos  |  pos  |    flags    ]\n" ));
+        AF_DUMP(( "  index   pos    dir   link  serif"
+                  "  blue  opos    pos      flags\n" ));
       else
         AF_DUMP(( "  (none)\n" ));
 
       for ( edge = edges; edge < limit; edge++ )
-        AF_DUMP(( "  [ %5d | %5.2g | %5s | %4d"
-                  " | %5d |   %c  | %5.2f | %5.2f | %11s ]\n",
+        AF_DUMP(( "  %5d  %5.2g  %5s  %4s  %5s"
+                  "    %c   %5.2f  %5.2f  %11s\n",
                   AF_INDEX_NUM( edge, edges ),
                   (int)edge->opos / 64.0,
                   af_dir_str( (AF_Direction)edge->dir ),
-                  AF_INDEX_NUM( edge->link, edges ),
-                  AF_INDEX_NUM( edge->serif, edges ),
+                  af_print_idx( buf1, AF_INDEX_NUM( edge->link, edges ) ),
+                  af_print_idx( buf2, AF_INDEX_NUM( edge->serif, edges ) ),
+
                   edge->blue_edge ? 'y' : 'n',
                   edge->opos / 64.0,
                   edge->pos / 64.0,
-- 
2.6.2

From 6a19a7d332c5446542196e5aeda0ede109ef097b Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Mon, 26 Oct 2015 15:40:22 +0100
Subject: [PATCH 088/110] [truetype] Fix sanitizing logic for `loca' (#46223).

* src/truetype/ttpload.c (tt_face_load_loca): A thinko caused an
incorrect adjustment of the number of glyphs, most often using far
too large values.
---
 ChangeLog              |  8 ++++++++
 src/truetype/ttpload.c | 12 ++++++++----
 2 files changed, 16 insertions(+), 4 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index f427eb0..a19acf0 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,11 @@
+2015-10-26  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Fix sanitizing logic for `loca' (#46223).
+
+	* src/truetype/ttpload.c (tt_face_load_loca): A thinko caused an
+	incorrect adjustment of the number of glyphs, most often using far
+	too large values.
+
 2015-10-25  Werner Lemberg  <wl@gnu.org>
 
 	[autofit] Improve tracing.
diff --git a/src/truetype/ttpload.c b/src/truetype/ttpload.c
index 814c90c..9bf67f9 100644
--- a/src/truetype/ttpload.c
+++ b/src/truetype/ttpload.c
@@ -124,8 +124,9 @@
         TT_Table  entry = face->dir_tables;
         TT_Table  limit = entry + face->num_tables;
 
-        FT_Long   pos  = (FT_Long)FT_STREAM_POS();
-        FT_Long   dist = 0x7FFFFFFFL;
+        FT_Long  pos   = (FT_Long)FT_STREAM_POS();
+        FT_Long  dist  = 0x7FFFFFFFL;
+        FT_Bool  found = 0;
 
 
         /* compute the distance to next table in font file */
@@ -135,10 +136,13 @@
 
 
           if ( diff > 0 && diff < dist )
-            dist = diff;
+          {
+            dist  = diff;
+            found = 1;
+          }
         }
 
-        if ( entry == limit )
+        if ( !found )
         {
           /* `loca' is the last table */
           dist = (FT_Long)stream->size - pos;
-- 
2.6.2

From 4a3fce93c2a2e154ad7e84f93034240a55df35fa Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 27 Oct 2015 19:27:39 +0100
Subject: [PATCH 089/110] [pfr] Formatting, improving comments.

---
 src/pfr/pfrcmap.c  |  2 +-
 src/pfr/pfrgload.c | 51 ++++++++++++++++++++++++++-----------------------
 src/pfr/pfrload.c  | 56 +++++++++++++++++++++++++++++-------------------------
 src/pfr/pfrobjs.c  | 25 +++++++++++++-----------
 src/pfr/pfrsbit.c  | 31 ++++++++++++++----------------
 5 files changed, 86 insertions(+), 79 deletions(-)

diff --git a/src/pfr/pfrcmap.c b/src/pfr/pfrcmap.c
index 88ff55a..686edf1 100644
--- a/src/pfr/pfrcmap.c
+++ b/src/pfr/pfrcmap.c
@@ -130,7 +130,7 @@
         }
 
         if ( gchar->char_code < char_code )
-          min = mid+1;
+          min = mid + 1;
         else
           max = mid;
       }
diff --git a/src/pfr/pfrgload.c b/src/pfr/pfrgload.c
index 88df06a..e07c21a 100644
--- a/src/pfr/pfrgload.c
+++ b/src/pfr/pfrgload.c
@@ -92,8 +92,8 @@
     if ( outline->n_contours > 0 )
       first = outline->contours[outline->n_contours - 1];
 
-    /* if the last point falls on the same location than the first one */
-    /* we need to delete it                                            */
+    /* if the last point falls on the same location as the first one */
+    /* we need to delete it                                          */
     if ( last > first )
     {
       FT_Vector*  p1 = outline->points + first;
@@ -215,8 +215,10 @@
     /* check that there is space for a new contour and a new point */
     error = FT_GLYPHLOADER_CHECK_POINTS( loader, 1, 1 );
     if ( !error )
+    {
       /* add new start point */
       error = pfr_glyph_line_to( glyph, to );
+    }
 
     return error;
   }
@@ -304,8 +306,8 @@
 
     glyph->y_control = glyph->x_control + x_count;
 
-    mask  = 0;
-    x     = 0;
+    mask = 0;
+    x    = 0;
 
     for ( i = 0; i < count; i++ )
     {
@@ -331,9 +333,9 @@
       mask >>= 1;
     }
 
-    /* XXX: for now we ignore the secondary stroke and edge definitions */
-    /*      since we don't want to support native PFR hinting           */
-    /*                                                                  */
+    /* XXX: we ignore the secondary stroke and edge definitions */
+    /*      since we don't support native PFR hinting           */
+    /*                                                          */
     if ( flags & PFR_GLYPH_EXTRA_ITEMS )
     {
       error = pfr_extra_items_skip( &p, limit );
@@ -366,27 +368,27 @@
 
         switch ( format >> 4 )
         {
-        case 0:                             /* end glyph */
+        case 0:                                               /* end glyph */
           FT_TRACE6(( "- end glyph" ));
           args_count = 0;
           break;
 
-        case 1:                             /* general line operation */
+        case 1:                                  /* general line operation */
           FT_TRACE6(( "- general line" ));
           goto Line1;
 
-        case 4:                             /* move to inside contour  */
+        case 4:                                 /* move to inside contour  */
           FT_TRACE6(( "- move to inside" ));
           goto Line1;
 
-        case 5:                             /* move to outside contour */
+        case 5:                                 /* move to outside contour */
           FT_TRACE6(( "- move to outside" ));
         Line1:
           args_format = format_low;
           args_count  = 1;
           break;
 
-        case 2:                             /* horizontal line to */
+        case 2:                                      /* horizontal line to */
           FT_TRACE6(( "- horizontal line to cx.%d", format_low ));
           if ( format_low >= x_count )
             goto Failure;
@@ -396,7 +398,7 @@
           args_count = 0;
           break;
 
-        case 3:                             /* vertical line to */
+        case 3:                                        /* vertical line to */
           FT_TRACE6(( "- vertical line to cy.%d", format_low ));
           if ( format_low >= y_count )
             goto Failure;
@@ -406,19 +408,19 @@
           args_count = 0;
           break;
 
-        case 6:                             /* horizontal to vertical curve */
+        case 6:                            /* horizontal to vertical curve */
           FT_TRACE6(( "- hv curve " ));
           args_format = 0xB8E;
           args_count  = 3;
           break;
 
-        case 7:                             /* vertical to horizontal curve */
+        case 7:                            /* vertical to horizontal curve */
           FT_TRACE6(( "- vh curve" ));
           args_format = 0xE2B;
           args_count  = 3;
           break;
 
-        default:                            /* general curve to */
+        default:                                       /* general curve to */
           FT_TRACE6(( "- general curve" ));
           args_count  = 4;
           args_format = format_low;
@@ -439,14 +441,14 @@
           {
           case 0:                           /* 8-bit index */
             PFR_CHECK( 1 );
-            idx  = PFR_NEXT_BYTE( p );
+            idx = PFR_NEXT_BYTE( p );
             if ( idx >= x_count )
               goto Failure;
             cur->x = glyph->x_control[idx];
             FT_TRACE7(( " cx#%d", idx ));
             break;
 
-          case 1:                           /* 16-bit value */
+          case 1:                           /* 16-bit absolute value */
             PFR_CHECK( 2 );
             cur->x = PFR_NEXT_SHORT( p );
             FT_TRACE7(( " x.%d", cur->x ));
@@ -516,22 +518,22 @@
         /*                                                         */
         switch ( format >> 4 )
         {
-        case 0:                             /* end glyph => EXIT */
+        case 0:                                       /* end glyph => EXIT */
           pfr_glyph_end( glyph );
           goto Exit;
 
-        case 1:                             /* line operations */
+        case 1:                                         /* line operations */
         case 2:
         case 3:
           error = pfr_glyph_line_to( glyph, pos );
           goto Test_Error;
 
-        case 4:                             /* move to inside contour  */
-        case 5:                             /* move to outside contour */
+        case 4:                                 /* move to inside contour  */
+        case 5:                                 /* move to outside contour */
           error = pfr_glyph_move_to( glyph, pos );
           goto Test_Error;
 
-        default:                            /* curve operations */
+        default:                                       /* curve operations */
           error = pfr_glyph_curve_to( glyph, pos, pos + 1, pos + 2 );
 
         Test_Error:  /* test error condition */
@@ -580,7 +582,8 @@
     if ( flags & PFR_GLYPH_EXTRA_ITEMS )
     {
       error = pfr_extra_items_skip( &p, limit );
-      if (error) goto Exit;
+      if ( error )
+        goto Exit;
     }
 
     /* we can't rely on the FT_GlyphLoader to load sub-glyphs, because   */
diff --git a/src/pfr/pfrload.c b/src/pfr/pfrload.c
index ec7311d..a1cae2c 100644
--- a/src/pfr/pfrload.c
+++ b/src/pfr/pfrload.c
@@ -75,7 +75,8 @@
           if ( extra->type == item_type )
           {
             error = extra->parser( p, p + item_size, item_data );
-            if ( error ) goto Exit;
+            if ( error )
+              goto Exit;
 
             break;
           }
@@ -183,7 +184,8 @@
     {
       result = 0;
     }
-    return  result;
+
+    return result;
   }
 
 
@@ -206,7 +208,8 @@
     FT_UInt   result = 0;
 
 
-    if ( FT_STREAM_SEEK( section_offset ) || FT_READ_USHORT( count ) )
+    if ( FT_STREAM_SEEK( section_offset ) ||
+         FT_READ_USHORT( count )          )
       goto Exit;
 
     result = count;
@@ -254,13 +257,14 @@
       FT_UInt   local;
 
 
-      if ( FT_STREAM_SEEK( offset ) || FT_FRAME_ENTER( size ) )
+      if ( FT_STREAM_SEEK( offset ) ||
+           FT_FRAME_ENTER( size )   )
         goto Exit;
 
       p     = stream->cursor;
       limit = p + size;
 
-      PFR_CHECK(13);
+      PFR_CHECK( 13 );
 
       log_font->matrix[0] = PFR_NEXT_LONG( p );
       log_font->matrix[1] = PFR_NEXT_LONG( p );
@@ -308,10 +312,11 @@
       if ( flags & PFR_LOG_EXTRA_ITEMS )
       {
         error = pfr_extra_items_skip( &p, limit );
-        if (error) goto Fail;
+        if ( error )
+          goto Fail;
       }
 
-      PFR_CHECK(5);
+      PFR_CHECK( 5 );
       log_font->phys_size   = PFR_NEXT_USHORT( p );
       log_font->phys_offset = PFR_NEXT_ULONG( p );
       if ( size_increment )
@@ -358,7 +363,7 @@
 
     PFR_CHECK( 5 );
 
-    p += 3;  /* skip bctSize */
+    p     += 3;  /* skip bctSize */
     flags0 = PFR_NEXT_BYTE( p );
     count  = PFR_NEXT_BYTE( p );
 
@@ -434,12 +439,12 @@
   }
 
 
-  /* Load font ID.  This is a so-called "unique" name that is rather
-   * long and descriptive (like "Tiresias ScreenFont v7.51").
+  /* Load font ID.  This is a so-called `unique' name that is rather
+   * long and descriptive (like `Tiresias ScreenFont v7.51').
    *
    * Note that a PFR font's family name is contained in an *undocumented*
-   * string of the "auxiliary data" portion of a physical font record.  This
-   * may also contain the "real" style name!
+   * string of the `auxiliary data' portion of a physical font record.  This
+   * may also contain the `real' style name!
    *
    * If no family name is present, the font ID is used instead for the
    * family.
@@ -612,7 +617,6 @@
   }
 
 
-
   static const PFR_ExtraItemRec  pfr_phy_font_extra_items[] =
   {
     { 1, (PFR_ExtraItem_ParseFunc)pfr_extra_item_load_bitmap_info },
@@ -623,7 +627,8 @@
   };
 
 
-  /* Loads a name from the auxiliary data.  Since this extracts undocumented
+  /*
+   * Load a name from the auxiliary data.  Since this extracts undocumented
    * strings from the font file, we need to be careful here.
    */
   static FT_Error
@@ -729,7 +734,8 @@
     phy_font->kern_items      = NULL;
     phy_font->kern_items_tail = &phy_font->kern_items;
 
-    if ( FT_STREAM_SEEK( offset ) || FT_FRAME_ENTER( size ) )
+    if ( FT_STREAM_SEEK( offset ) ||
+         FT_FRAME_ENTER( size )   )
       goto Exit;
 
     phy_font->cursor = stream->cursor;
@@ -757,16 +763,16 @@
     /* load the extra items when present */
     if ( flags & PFR_PHY_EXTRA_ITEMS )
     {
-      error =  pfr_extra_items_parse( &p, limit,
-                                      pfr_phy_font_extra_items, phy_font );
+      error = pfr_extra_items_parse( &p, limit,
+                                     pfr_phy_font_extra_items, phy_font );
 
       if ( error )
         goto Fail;
     }
 
-    /* In certain fonts, the auxiliary bytes contain interesting  */
-    /* information. These are not in the specification but can be */
-    /* guessed by looking at the content of a few PFR0 fonts.     */
+    /* In certain fonts, the auxiliary bytes contain interesting   */
+    /* information.  These are not in the specification but can be */
+    /* guessed by looking at the content of a few PFR0 fonts.      */
     PFR_CHECK( 3 );
     num_aux = PFR_NEXT_ULONG( p );
 
@@ -797,9 +803,8 @@
         switch ( type )
         {
         case 1:
-          /* this seems to correspond to the font's family name,
-           * padded to 16-bits with one zero when necessary
-           */
+          /* this seems to correspond to the font's family name, padded to */
+          /* an even number of bytes with a zero byte appended if needed   */
           error = pfr_aux_name_load( q, length - 4U, memory,
                                      &phy_font->family_name );
           if ( error )
@@ -817,9 +822,8 @@
           break;
 
         case 3:
-          /* this seems to correspond to the font's style name,
-           * padded to 16-bits with one zero when necessary
-           */
+          /* this seems to correspond to the font's style name, padded to */
+          /* an even number of bytes with a zero byte appended if needed  */
           error = pfr_aux_name_load( q, length - 4U, memory,
                                      &phy_font->style_name );
           if ( error )
diff --git a/src/pfr/pfrobjs.c b/src/pfr/pfrobjs.c
index b854b00..20d316d 100644
--- a/src/pfr/pfrobjs.c
+++ b/src/pfr/pfrobjs.c
@@ -118,9 +118,11 @@
 
     /* load the face */
     error = pfr_log_font_load(
-               &face->log_font, stream, (FT_UInt)( face_index & 0xFFFF ),
-               face->header.log_dir_offset,
-               FT_BOOL( face->header.phy_font_max_size_high != 0 ) );
+              &face->log_font,
+              stream,
+              (FT_UInt)( face_index & 0xFFFF ),
+              face->header.log_dir_offset,
+              FT_BOOL( face->header.phy_font_max_size_high != 0 ) );
     if ( error )
       goto Exit;
 
@@ -141,8 +143,8 @@
 
       pfrface->face_flags |= FT_FACE_FLAG_SCALABLE;
 
-      /* if all characters point to the same gps_offset 0, we */
-      /* assume that the font only contains bitmaps           */
+      /* if gps_offset == 0 for all characters, we  */
+      /* assume that the font only contains bitmaps */
       {
         FT_UInt  nn;
 
@@ -164,7 +166,7 @@
         }
       }
 
-      if ( (phy_font->flags & PFR_PHY_PROPORTIONAL) == 0 )
+      if ( ( phy_font->flags & PFR_PHY_PROPORTIONAL ) == 0 )
         pfrface->face_flags |= FT_FACE_FLAG_FIXED_WIDTH;
 
       if ( phy_font->flags & PFR_PHY_VERTICAL )
@@ -178,7 +180,7 @@
       if ( phy_font->num_kern_pairs > 0 )
         pfrface->face_flags |= FT_FACE_FLAG_KERNING;
 
-      /* If no family name was found in the "undocumented" auxiliary
+      /* If no family name was found in the `undocumented' auxiliary
        * data, use the font ID instead.  This sucks but is better than
        * nothing.
        */
@@ -187,7 +189,7 @@
         pfrface->family_name = phy_font->font_id;
 
       /* note that the style name can be NULL in certain PFR fonts,
-       * probably meaning "Regular"
+       * probably meaning `Regular'
        */
       pfrface->style_name = phy_font->style_name;
 
@@ -264,13 +266,13 @@
         error = FT_CMap_New( &pfr_cmap_class_rec, NULL, &charmap, NULL );
 
 #if 0
-        /* Select default charmap */
+        /* select default charmap */
         if ( pfrface->num_charmaps )
           pfrface->charmap = pfrface->charmaps[0];
 #endif
       }
 
-      /* check whether we've loaded any kerning pairs */
+      /* check whether we have loaded any kerning pairs */
       if ( phy_font->num_kern_pairs )
         pfrface->face_flags |= FT_FACE_FLAG_KERNING;
     }
@@ -402,7 +404,7 @@
       pfrslot->linearHoriAdvance = metrics->horiAdvance;
       pfrslot->linearVertAdvance = metrics->vertAdvance;
 
-      /* make-up vertical metrics(?) */
+      /* make up vertical metrics(?) */
       metrics->vertBearingX = 0;
       metrics->vertBearingY = 0;
 
@@ -596,4 +598,5 @@
     return error;
   }
 
+
 /* END */
diff --git a/src/pfr/pfrsbit.c b/src/pfr/pfrsbit.c
index bb5df5c..bed082e 100644
--- a/src/pfr/pfrsbit.c
+++ b/src/pfr/pfrsbit.c
@@ -37,11 +37,11 @@
 
   typedef struct  PFR_BitWriter_
   {
-    FT_Byte*  line;      /* current line start                    */
-    FT_Int    pitch;     /* line size in bytes                    */
-    FT_UInt   width;     /* width in pixels/bits                  */
-    FT_UInt   rows;      /* number of remaining rows to scan      */
-    FT_UInt   total;     /* total number of bits to draw          */
+    FT_Byte*  line;      /* current line start               */
+    FT_Int    pitch;     /* line size in bytes               */
+    FT_UInt   width;     /* width in pixels/bits             */
+    FT_UInt   rows;      /* number of remaining rows to scan */
+    FT_UInt   total;     /* total number of bits to draw     */
 
   } PFR_BitWriterRec, *PFR_BitWriter;
 
@@ -341,8 +341,8 @@
   }
 
 
-  /* load bitmap metrics.  "*padvance" must be set to the default value */
-  /* before calling this function...                                    */
+  /* load bitmap metrics.  `*padvance' must be set to the default value */
+  /* before calling this function                                       */
   /*                                                                    */
   static FT_Error
   pfr_load_bitmap_metrics( FT_Byte**  pdata,
@@ -544,7 +544,7 @@
 
     character = &phys->chars[glyph_index];
 
-    /* Look-up a bitmap strike corresponding to the current */
+    /* look up a bitmap strike corresponding to the current */
     /* character dimensions                                 */
     {
       FT_UInt  n;
@@ -555,9 +555,7 @@
       {
         if ( strike->x_ppm == (FT_UInt)size->root.metrics.x_ppem &&
              strike->y_ppm == (FT_UInt)size->root.metrics.y_ppem )
-        {
           goto Found_Strike;
-        }
 
         strike++;
       }
@@ -568,7 +566,7 @@
 
   Found_Strike:
 
-    /* Now lookup the glyph's position within the file */
+    /* now look up the glyph's position within the file */
     {
       FT_UInt  char_len;
 
@@ -578,7 +576,7 @@
       if ( strike->flags & 2 ) char_len += 1;
       if ( strike->flags & 4 ) char_len += 1;
 
-      /* Access data directly in the frame to speed lookups */
+      /* access data directly in the frame to speed lookups */
       if ( FT_STREAM_SEEK( phys->bct_offset + strike->bct_offset ) ||
            FT_FRAME_ENTER( char_len * strike->num_bitmaps )        )
         goto Exit;
@@ -595,7 +593,7 @@
 
       if ( gps_size == 0 )
       {
-        /* Could not find a bitmap program string for this glyph */
+        /* could not find a bitmap program string for this glyph */
         error = FT_THROW( Invalid_Argument );
         goto Exit;
       }
@@ -617,8 +615,8 @@
 
       glyph->root.linearHoriAdvance = advance;
 
-      /* compute default advance, i.e., scaled advance.  This can be */
-      /* overridden in the bitmap header of certain glyphs.          */
+      /* compute default advance, i.e., scaled advance; this can be */
+      /* overridden in the bitmap header of certain glyphs          */
       advance = FT_MulDiv( (FT_Fixed)size->root.metrics.x_ppem << 8,
                            character->advance,
                            (FT_Long)phys->metrics_resolution );
@@ -684,14 +682,12 @@
 
           error = ft_glyphslot_alloc_bitmap( &glyph->root, len );
           if ( !error )
-          {
             error = pfr_load_bitmap_bits(
                       p,
                       stream->limit,
                       format,
                       FT_BOOL(face->header.color_flags & 2),
                       &glyph->root.bitmap );
-          }
         }
       }
 
@@ -702,4 +698,5 @@
     return error;
   }
 
+
 /* END */
-- 
2.6.2

From fba29fabb3c3892ccd8afc3a9c3988aaeb036dc8 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 27 Oct 2015 21:04:48 +0100
Subject: [PATCH 090/110] [pfr] Add some safety guards (#46302).

* src/pfr/pfrload.h (PFR_CHECK): Rename to...
(PFR_CHECK_SIZE): ... this.
(PFR_SIZE): [!PFR_CONFIG_NO_CHECKS]: Define to PFR_CHECK_SIZE.

* src/pfr/pfrload.c (pfr_log_font_count): Check `count'.
(pfr_extra_item_load_kerning_pairs): Remove tracing message.
(pfr_phy_font_load): Use PFR_CHECK_SIZE where appropriate.
Allocate `chars' after doing a size checks.

* src/pfr/pfrsbit.c (pfr_load_bitmap_bits): Move test for invalid
bitmap format to...
(pfr_slot_load_bitmap): ... this function.
Check bitmap size.
---
 ChangeLog         |  18 +++++++++
 src/pfr/pfrload.c | 109 ++++++++++++++++++++++++++++++++++++++++++++++++++----
 src/pfr/pfrload.h |  15 +++++---
 src/pfr/pfrsbit.c |  50 ++++++++++++++++++++++++-
 4 files changed, 178 insertions(+), 14 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index a19acf0..8c618cc 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,21 @@
+2015-10-27  Werner Lemberg  <wl@gnu.org>
+
+	[pfr] Add some safety guards (#46302).
+
+	* src/pfr/pfrload.h (PFR_CHECK): Rename to...
+	(PFR_CHECK_SIZE): ... this.
+	(PFR_SIZE): [!PFR_CONFIG_NO_CHECKS]: Define to PFR_CHECK_SIZE.
+
+	* src/pfr/pfrload.c (pfr_log_font_count): Check `count'. 
+	(pfr_extra_item_load_kerning_pairs): Remove tracing message.
+	(pfr_phy_font_load): Use PFR_CHECK_SIZE where appropriate.
+	Allocate `chars' after doing a size checks.
+
+	* src/pfr/pfrsbit.c (pfr_load_bitmap_bits): Move test for invalid
+	bitmap format to...
+	(pfr_slot_load_bitmap): ... this function.
+	Check bitmap size.
+
 2015-10-26  Werner Lemberg  <wl@gnu.org>
 
 	[truetype] Fix sanitizing logic for `loca' (#46223).
diff --git a/src/pfr/pfrload.c b/src/pfr/pfrload.c
index a1cae2c..ed8327a 100644
--- a/src/pfr/pfrload.c
+++ b/src/pfr/pfrload.c
@@ -26,6 +26,93 @@
 #define FT_COMPONENT  trace_pfr
 
 
+  /*
+   *  The overall structure of a PFR file is as follows.
+   *
+   *    PFR header
+   *      58 bytes (contains nPhysFonts)
+   *
+   *    Logical font directory (size at most 2^16 bytes)
+   *      2 bytes (nLogFonts)
+   *      + nLogFonts * 5 bytes
+   *
+   *         ==>   nLogFonts <= 13106
+   *
+   *    Logical font section (size at most 2^24 bytes)
+   *      nLogFonts * logFontRecord
+   *
+   *      logFontRecord (size at most 2^16 bytes)
+   *        12 bytes (fontMatrix)
+   *        + 1 byte (flags)
+   *        + 0-5 bytes (depending on `flags')
+   *        + 0-(1+255*(2+255)) = 0-65536 (depending on `flags')
+   *        + 5 bytes (physical font info)
+   *        + 0-1 bytes (depending on PFR header)
+   *
+   *         ==>   minimum size 18 bytes
+   *
+   *    Physical font section (size at most 2^24 bytes)
+   *      nPhysFonts * (physFontRecord
+   *                    + nBitmapSizes * nBmapChars * bmapCharRecord)
+   *
+   *      physFontRecord (size at most 2^24 bytes)
+   *        14 bytes (font info)
+   *        + 1 byte (flags)
+   *        + 0-2 (depending on `flags')
+   *        + 0-? (structure too complicated to be shown here; depending on
+   *               `flags'; contains `nBitmapSizes' and `nBmapChars')
+   *        + 3 bytes (nAuxBytes)
+   *        + nAuxBytes
+   *        + 1 byte (nBlueValues)
+   *        + 2 * nBlueValues
+   *        + 6 bytes (hinting data)
+   *        + 2 bytes (nCharacters)
+   *        + nCharacters * (4-10 bytes) (depending on `flags')
+   *
+   *         ==>   minimum size 27 bytes
+   *
+   *      bmapCharRecord
+   *        4-7 bytes
+   *
+   *    Glyph program strings (three possible types: simpleGps, compoundGps,
+   *                           and bitmapGps; size at most 2^24 bytes)
+   *      simpleGps (size at most 2^16 bytes)
+   *        1 byte (flags)
+   *        1-2 bytes (n[XY]orus, depending on `flags')
+   *        0-(64+512*2) = 0-1088 bytes (depending on `n[XY]orus')
+   *        0-? (structure too complicated to be shown here; depending on
+   *             `flags')
+   *        1-? glyph data (faintly resembling PS Type 1 charstrings)
+   *
+   *         ==>   minimum size 3 bytes
+   *
+   *      compoundGps (size at most 2^16 bytes)
+   *        1 byte (nElements <= 63, flags)
+   *        + 0-(1+255*(2+255)) = 0-65536 (depending on `flags')
+   *        + nElements * (6-14 bytes)
+   *
+   *      bitmapGps (size at most 2^16 bytes)
+   *        1 byte (flags)
+   *        3-13 bytes (position info, depending on `flags')
+   *        0-? bitmap data
+   *
+   *         ==>   minimum size 4 bytes
+   *
+   *    PFR trailer
+   *        8 bytes
+   *
+   *
+   * ==>   minimum size of a valid PFR:
+   *         58 (header)
+   *         + 2 (nLogFonts)
+   *         + 27 (1 physFontRecord)
+   *         + 8 (trailer)
+   *        -----
+   *         95 bytes
+   *
+   */
+
+
   /*************************************************************************/
   /*************************************************************************/
   /*****                                                               *****/
@@ -212,6 +299,16 @@
          FT_READ_USHORT( count )          )
       goto Exit;
 
+    /* check maximum value and a rough minimum size */
+    if ( count > ( ( 1 << 16 ) - 2 ) / 5                ||
+         2 + count * 5 >= stream->size - section_offset )
+    {
+      FT_ERROR(( "pfr_log_font_count:"
+                 " invalid number of logical fonts\n" ));
+      error = FT_THROW( Invalid_Table );
+      goto Exit;
+    }
+
     result = count;
 
   Exit:
@@ -530,8 +627,6 @@
     FT_Memory     memory = phy_font->memory;
 
 
-    FT_TRACE2(( "pfr_extra_item_load_kerning_pairs()\n" ));
-
     if ( FT_NEW( item ) )
       goto Exit;
 
@@ -782,7 +877,7 @@
       FT_Byte*  q2;
 
 
-      PFR_CHECK( num_aux );
+      PFR_CHECK_SIZE( num_aux );
       p += num_aux;
 
       while ( num_aux > 0 )
@@ -871,9 +966,6 @@
       phy_font->num_chars    = count = PFR_NEXT_USHORT( p );
       phy_font->chars_offset = offset + (FT_Offset)( p - stream->cursor );
 
-      if ( FT_NEW_ARRAY( phy_font->chars, count ) )
-        goto Fail;
-
       Size = 1 + 1 + 2;
       if ( flags & PFR_PHY_2BYTE_CHARCODE )
         Size += 1;
@@ -890,7 +982,10 @@
       if ( flags & PFR_PHY_3BYTE_GPS_OFFSET )
         Size += 1;
 
-      PFR_CHECK( count * Size );
+      PFR_CHECK_SIZE( count * Size );
+
+      if ( FT_NEW_ARRAY( phy_font->chars, count ) )
+        goto Fail;
 
       for ( n = 0; n < count; n++ )
       {
diff --git a/src/pfr/pfrload.h b/src/pfr/pfrload.h
index 0a51234..867e632 100644
--- a/src/pfr/pfrload.h
+++ b/src/pfr/pfrload.h
@@ -25,14 +25,19 @@
 
 FT_BEGIN_HEADER
 
+  /* some size checks should be always done (mainly to prevent */
+  /* excessive allocation for malformed data), ...             */
+#define PFR_CHECK_SIZE( x )  do                       \
+                             {                        \
+                               if ( p + (x) > limit ) \
+                                 goto Too_Short;      \
+                             } while ( 0 )
+
+  /* ... and some only if intensive checking is explicitly requested */
 #ifdef PFR_CONFIG_NO_CHECKS
 #define PFR_CHECK( x )  do { } while ( 0 )
 #else
-#define PFR_CHECK( x )  do                       \
-                        {                        \
-                          if ( p + (x) > limit ) \
-                            goto Too_Short;      \
-                        } while ( 0 )
+#define PFR_CHECK  PFR_CHECK_SIZE
 #endif
 
 #define PFR_NEXT_BYTE( p )    FT_NEXT_BYTE( p )
diff --git a/src/pfr/pfrsbit.c b/src/pfr/pfrsbit.c
index bed082e..a219636 100644
--- a/src/pfr/pfrsbit.c
+++ b/src/pfr/pfrsbit.c
@@ -510,8 +510,7 @@
         break;
 
       default:
-        FT_ERROR(( "pfr_read_bitmap_data: invalid image type\n" ));
-        error = FT_THROW( Invalid_File_Format );
+        ;
       }
     }
 
@@ -633,6 +632,53 @@
                                        &advance, &format );
 
       /*
+       * Before allocating the target bitmap, we check whether the given
+       * bitmap dimensions are valid, depending on the image format.
+       *
+       * Format 0: We have a stream of pixels (with 8 pixels per byte).
+       *
+       *             (xsize * ysize + 7) / 8 <= gps_size
+       *
+       * Format 1: Run-length encoding; the high nibble holds the number of
+       *           white bits, the low nibble the number of black bits.  In
+       *           other words, a single byte can represent at most 15
+       *           pixels.
+       *
+       *             xsize * ysize <= 15 * gps_size
+       *
+       * Format 2: Run-length encoding; the high byte holds the number of
+       *           white bits, the low byte the number of black bits.  In
+       *           other words, two bytes can represent at most 255 pixels.
+       *
+       *             xsize * ysize <= 255 * (gps_size + 1) / 2
+       */
+      switch ( format )
+      {
+      case 0:
+        if ( ( (FT_ULong)xsize * ysize + 7 ) / 8 > gps_size )
+          error = FT_THROW( Invalid_Table );
+        break;
+      case 1:
+        if ( (FT_ULong)xsize * ysize > 15 * gps_size )
+          error = FT_THROW( Invalid_Table );
+        break;
+      case 2:
+        if ( (FT_ULong)xsize * ysize > 255 * ( ( gps_size + 1 ) / 2 ) )
+          error = FT_THROW( Invalid_Table );
+        break;
+      default:
+        FT_ERROR(( "pfr_slot_load_bitmap: invalid image type\n" ));
+        error = FT_THROW( Invalid_Table );
+      }
+
+      if ( error )
+      {
+        if ( FT_ERR_EQ( error, Invalid_Table ) )
+          FT_ERROR(( "pfr_slot_load_bitmap: invalid bitmap dimensions\n" ));
+        goto Exit;
+      }
+
+      /*
        * XXX: on 16bit systems we return an error for huge bitmaps
        *      that cause size truncation, because truncated
        *      size properties make bitmap glyphs broken.
-- 
2.6.2

From 017db03ec5e77a81910e5e5bc41d5d16eae14f64 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 29 Oct 2015 05:52:09 +0100
Subject: [PATCH 091/110] * CMakeLists.txt: Remove code to set MSVC's /FD
 compiler switch.

Problem reported by David Capello <davidcapello@gmail.com>; see

  http://lists.nongnu.org/archive/html/freetype-devel/2015-10/msg00108.html

for details.
---
 CMakeLists.txt |  6 ------
 ChangeLog      | 10 ++++++++++
 2 files changed, 10 insertions(+), 6 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4d0766d..1a96ef6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -330,12 +330,6 @@ if (BUILD_FRAMEWORK)
 endif ()
 
 
-if (MSVC)
-  set_target_properties(freetype PROPERTIES
-    COMPILE_FLAGS /Fd"$(IntDir)$(TargetName).pdb")
-endif ()
-
-
 if (ZLIB_FOUND)
   target_link_libraries(freetype ${ZLIB_LIBRARIES})
   include_directories(${ZLIB_INCLUDE_DIRS})
diff --git a/ChangeLog b/ChangeLog
index 8c618cc..dd0d091 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,13 @@
+2015-10-29  Werner Lemberg  <wl@gnu.org>
+
+	* CMakeLists.txt: Remove code to set MSVC's /FD compiler switch.
+
+	Problem reported by David Capello <davidcapello@gmail.com>; see
+
+	  http://lists.nongnu.org/archive/html/freetype-devel/2015-10/msg00108.html
+
+	for details.
+
 2015-10-27  Werner Lemberg  <wl@gnu.org>
 
 	[pfr] Add some safety guards (#46302).
-- 
2.6.2

From 02cfd71498fda2fca19a8fc70a4c9b7a912425a0 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 29 Oct 2015 20:50:57 +0100
Subject: [PATCH 092/110] * src/autofit/afhints.c (af_glyph_hints_dump_points):
 Minor.

---
 ChangeLog             | 4 ++++
 src/autofit/afhints.c | 5 +++--
 2 files changed, 7 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index dd0d091..a03116b 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,9 @@
 2015-10-29  Werner Lemberg  <wl@gnu.org>
 
+	* src/autofit/afhints.c (af_glyph_hints_dump_points): Minor.
+
+2015-10-29  Werner Lemberg  <wl@gnu.org>
+
 	* CMakeLists.txt: Remove code to set MSVC's /FD compiler switch.
 
 	Problem reported by David Capello <davidcapello@gmail.com>; see
diff --git a/src/autofit/afhints.c b/src/autofit/afhints.c
index dbb34ac..6743878 100644
--- a/src/autofit/afhints.c
+++ b/src/autofit/afhints.c
@@ -312,7 +312,7 @@
       char  buf1[16], buf2[16], buf3[16], buf4[16];
 
 
-      AF_DUMP(( "  %5d  %5s %5s  %5s %5s    %c  "
+      AF_DUMP(( "  %5d  %5s %5s  %5s %5s  %s "
                 " %5d %5d %7.2f %7.2f %7.2f %7.2f\n",
                 point_idx,
                 af_print_idx( buf1,
@@ -321,7 +321,8 @@
                 af_print_idx( buf3,
                               af_get_edge_index( hints, segment_idx_0, 0 ) ),
                 af_print_idx( buf4, segment_idx_0 ),
-                ( point->flags & AF_FLAG_WEAK_INTERPOLATION ) ? 'w' : '-',
+                ( point->flags & AF_FLAG_WEAK_INTERPOLATION ) ? "weak"
+                                                              : " -- ",
 
                 point->fx,
                 point->fy,
-- 
2.6.2

From 4188deacf3ca89bbd8fb74707f7b70d0c3f8469d Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Fri, 30 Oct 2015 08:07:56 +0100
Subject: [PATCH 093/110] Comments.

---
 src/autofit/afmodule.c  |  4 ++--
 src/bdf/bdfdrivr.c      |  4 ++--
 src/cff/cffdrivr.c      | 33 +++++++++++++++++++--------------
 src/cid/cidriver.c      | 24 +++++++++++++++---------
 src/gxvalid/gxvmod.c    |  4 ++--
 src/otvalid/otvmod.c    |  2 +-
 src/pcf/pcfdrivr.c      |  4 ++--
 src/pfr/pfrdrivr.c      |  6 +++---
 src/psnames/psmodule.c  | 32 ++++++++++++++++----------------
 src/sfnt/sfdriver.c     | 18 +++++++++---------
 src/truetype/ttdriver.c | 19 +++++++++++--------
 src/type1/t1driver.c    | 28 ++++++++++++++--------------
 src/type42/t42drivr.c   | 17 +++++++++--------
 src/winfonts/winfnt.c   |  2 +-
 14 files changed, 106 insertions(+), 91 deletions(-)

diff --git a/src/autofit/afmodule.c b/src/autofit/afmodule.c
index bbf1372..2c759da 100644
--- a/src/autofit/afmodule.c
+++ b/src/autofit/afmodule.c
@@ -262,8 +262,8 @@
 
   FT_DEFINE_SERVICE_PROPERTIESREC(
     af_service_properties,
-    (FT_Properties_SetFunc)af_property_set,
-    (FT_Properties_GetFunc)af_property_get )
+    (FT_Properties_SetFunc)af_property_set,        /* set_property */
+    (FT_Properties_GetFunc)af_property_get )       /* get_property */
 
 
   FT_DEFINE_SERVICEDESCREC1(
diff --git a/src/bdf/bdfdrivr.c b/src/bdf/bdfdrivr.c
index 915299b..a381cf6 100644
--- a/src/bdf/bdfdrivr.c
+++ b/src/bdf/bdfdrivr.c
@@ -824,8 +824,8 @@ THE SOFTWARE.
 
   static const FT_Service_BDFRec  bdf_service_bdf =
   {
-    (FT_BDF_GetCharsetIdFunc)bdf_get_charset_id,
-    (FT_BDF_GetPropertyFunc) bdf_get_bdf_property
+    (FT_BDF_GetCharsetIdFunc)bdf_get_charset_id,       /* get_charset_id */
+    (FT_BDF_GetPropertyFunc) bdf_get_bdf_property      /* get_property   */
   };
 
 
diff --git a/src/cff/cffdrivr.c b/src/cff/cffdrivr.c
index 4028ab2..9fbc1eb 100644
--- a/src/cff/cffdrivr.c
+++ b/src/cff/cffdrivr.c
@@ -358,8 +358,8 @@
 
   FT_DEFINE_SERVICE_GLYPHDICTREC(
     cff_service_glyph_dict,
-    (FT_GlyphDict_GetNameFunc)  cff_get_glyph_name,
-    (FT_GlyphDict_NameIndexFunc)cff_get_name_index
+    (FT_GlyphDict_GetNameFunc)  cff_get_glyph_name,      /* get_name   */
+    (FT_GlyphDict_NameIndexFunc)cff_get_name_index       /* name_index */
   )
 
 
@@ -421,11 +421,13 @@
 
   FT_DEFINE_SERVICE_PSINFOREC(
     cff_service_ps_info,
-    (PS_GetFontInfoFunc)   cff_ps_get_font_info,
-    (PS_GetFontExtraFunc)  NULL,
-    (PS_HasGlyphNamesFunc) cff_ps_has_glyph_names,
-    (PS_GetFontPrivateFunc)NULL,        /* unsupported with CFF fonts */
-    (PS_GetFontValueFunc)  NULL         /* not implemented            */
+    (PS_GetFontInfoFunc)   cff_ps_get_font_info,    /* ps_get_font_info    */
+    (PS_GetFontExtraFunc)  NULL,                    /* ps_get_font_extra   */
+    (PS_HasGlyphNamesFunc) cff_ps_has_glyph_names,  /* ps_has_glyph_names  */
+    /* unsupported with CFF fonts */
+    (PS_GetFontPrivateFunc)NULL,                    /* ps_get_font_private */
+    /* not implemented            */
+    (PS_GetFontValueFunc)  NULL                     /* ps_get_font_value   */
   )
 
 
@@ -464,7 +466,7 @@
 
   FT_DEFINE_SERVICE_PSFONTNAMEREC(
     cff_service_ps_name,
-    (FT_PsName_GetFunc)cff_get_ps_name
+    (FT_PsName_GetFunc)cff_get_ps_name      /* get_ps_font_name */
   )
 
 
@@ -511,7 +513,7 @@
 
   FT_DEFINE_SERVICE_TTCMAPSREC(
     cff_service_get_cmap_info,
-    (TT_CMap_Info_GetFunc)cff_get_cmap_info
+    (TT_CMap_Info_GetFunc)cff_get_cmap_info    /* get_cmap_info */
   )
 
 
@@ -641,9 +643,12 @@
 
   FT_DEFINE_SERVICE_CIDREC(
     cff_service_cid_info,
-    (FT_CID_GetRegistryOrderingSupplementFunc)cff_get_ros,
-    (FT_CID_GetIsInternallyCIDKeyedFunc)      cff_get_is_cid,
-    (FT_CID_GetCIDFromGlyphIndexFunc)         cff_get_cid_from_glyph_index
+    (FT_CID_GetRegistryOrderingSupplementFunc)
+      cff_get_ros,                             /* get_ros                  */
+    (FT_CID_GetIsInternallyCIDKeyedFunc)
+      cff_get_is_cid,                          /* get_is_cid               */
+    (FT_CID_GetCIDFromGlyphIndexFunc)
+      cff_get_cid_from_glyph_index             /* get_cid_from_glyph_index */
   )
 
 
@@ -776,8 +781,8 @@
 
   FT_DEFINE_SERVICE_PROPERTIESREC(
     cff_service_properties,
-    (FT_Properties_SetFunc)cff_property_set,
-    (FT_Properties_GetFunc)cff_property_get )
+    (FT_Properties_SetFunc)cff_property_set,      /* set_property */
+    (FT_Properties_GetFunc)cff_property_get )     /* get_property */
 
 
   /*************************************************************************/
diff --git a/src/cid/cidriver.c b/src/cid/cidriver.c
index aca1f25..17935d0 100644
--- a/src/cid/cidriver.c
+++ b/src/cid/cidriver.c
@@ -59,7 +59,7 @@
 
   static const FT_Service_PsFontNameRec  cid_service_ps_name =
   {
-    (FT_PsName_GetFunc) cid_get_postscript_name
+    (FT_PsName_GetFunc)cid_get_postscript_name    /* get_ps_font_name */
   };
 
 
@@ -88,11 +88,14 @@
 
   static const FT_Service_PsInfoRec  cid_service_ps_info =
   {
-    (PS_GetFontInfoFunc)   cid_ps_get_font_info,
-    (PS_GetFontExtraFunc)  cid_ps_get_font_extra,
-    (PS_HasGlyphNamesFunc) NULL,        /* unsupported with CID fonts */
-    (PS_GetFontPrivateFunc)NULL,        /* unsupported                */
-    (PS_GetFontValueFunc)  NULL         /* not implemented            */
+    (PS_GetFontInfoFunc)   cid_ps_get_font_info,   /* ps_get_font_info    */
+    (PS_GetFontExtraFunc)  cid_ps_get_font_extra,  /* ps_get_font_extra   */
+    /* unsupported with CID fonts */
+    (PS_HasGlyphNamesFunc) NULL,                   /* ps_has_glyph_names  */
+    /* unsupported                */
+    (PS_GetFontPrivateFunc)NULL,                   /* ps_get_font_private */
+    /* not implemented            */
+    (PS_GetFontValueFunc)  NULL                    /* ps_get_font_value   */
   };
 
 
@@ -155,9 +158,12 @@
 
   static const FT_Service_CIDRec  cid_service_cid_info =
   {
-     (FT_CID_GetRegistryOrderingSupplementFunc)cid_get_ros,
-     (FT_CID_GetIsInternallyCIDKeyedFunc)      cid_get_is_cid,
-     (FT_CID_GetCIDFromGlyphIndexFunc)         cid_get_cid_from_glyph_index
+    (FT_CID_GetRegistryOrderingSupplementFunc)
+      cid_get_ros,                             /* get_ros                  */
+    (FT_CID_GetIsInternallyCIDKeyedFunc)
+      cid_get_is_cid,                          /* get_is_cid               */
+    (FT_CID_GetCIDFromGlyphIndexFunc)
+      cid_get_cid_from_glyph_index             /* get_cid_from_glyph_index */
   };
 
 
diff --git a/src/gxvalid/gxvmod.c b/src/gxvalid/gxvmod.c
index 17a02e7..fe8efdf 100644
--- a/src/gxvalid/gxvmod.c
+++ b/src/gxvalid/gxvmod.c
@@ -235,14 +235,14 @@
   static
   const FT_Service_GXvalidateRec  gxvalid_interface =
   {
-    gxv_validate
+    gxv_validate              /* validate */
   };
 
 
   static
   const FT_Service_CKERNvalidateRec  ckernvalid_interface =
   {
-    classic_kern_validate
+    classic_kern_validate     /* validate */
   };
 
 
diff --git a/src/otvalid/otvmod.c b/src/otvalid/otvmod.c
index 92f8513..5eb691a 100644
--- a/src/otvalid/otvmod.c
+++ b/src/otvalid/otvmod.c
@@ -240,7 +240,7 @@
   static
   const FT_Service_OTvalidateRec  otvalid_interface =
   {
-    otv_validate
+    otv_validate        /* validate */
   };
 
 
diff --git a/src/pcf/pcfdrivr.c b/src/pcf/pcfdrivr.c
index 1c2725f..0996d10 100644
--- a/src/pcf/pcfdrivr.c
+++ b/src/pcf/pcfdrivr.c
@@ -659,8 +659,8 @@ THE SOFTWARE.
 
   static const FT_Service_BDFRec  pcf_service_bdf =
   {
-    (FT_BDF_GetCharsetIdFunc)pcf_get_charset_id,
-    (FT_BDF_GetPropertyFunc) pcf_get_bdf_property
+    (FT_BDF_GetCharsetIdFunc)pcf_get_charset_id,     /* get_charset_id */
+    (FT_BDF_GetPropertyFunc) pcf_get_bdf_property    /* get_property   */
   };
 
 
diff --git a/src/pfr/pfrdrivr.c b/src/pfr/pfrdrivr.c
index adbcac5..b079416 100644
--- a/src/pfr/pfrdrivr.c
+++ b/src/pfr/pfrdrivr.c
@@ -139,9 +139,9 @@
   static
   const FT_Service_PfrMetricsRec  pfr_metrics_service_rec =
   {
-    pfr_get_metrics,
-    pfr_face_get_kerning,
-    pfr_get_advance
+    pfr_get_metrics,          /* get_metrics */
+    pfr_face_get_kerning,     /* get_kerning */
+    pfr_get_advance           /* get_advance */
   };
 
 
diff --git a/src/psnames/psmodule.c b/src/psnames/psmodule.c
index 0f04c2f..5406098 100644
--- a/src/psnames/psmodule.c
+++ b/src/psnames/psmodule.c
@@ -525,31 +525,31 @@
 
   FT_DEFINE_SERVICE_PSCMAPSREC(
     pscmaps_interface,
-    (PS_Unicode_ValueFunc)     ps_unicode_value,
-    (PS_Unicodes_InitFunc)     ps_unicodes_init,
-    (PS_Unicodes_CharIndexFunc)ps_unicodes_char_index,
-    (PS_Unicodes_CharNextFunc) ps_unicodes_char_next,
+    (PS_Unicode_ValueFunc)     ps_unicode_value,        /* unicode_value         */
+    (PS_Unicodes_InitFunc)     ps_unicodes_init,        /* unicodes_init         */
+    (PS_Unicodes_CharIndexFunc)ps_unicodes_char_index,  /* unicodes_char_index   */
+    (PS_Unicodes_CharNextFunc) ps_unicodes_char_next,   /* unicodes_char_next    */
 
-    (PS_Macintosh_NameFunc)    ps_get_macintosh_name,
-    (PS_Adobe_Std_StringsFunc) ps_get_standard_strings,
+    (PS_Macintosh_NameFunc)    ps_get_macintosh_name,   /* macintosh_name        */
+    (PS_Adobe_Std_StringsFunc) ps_get_standard_strings, /* adobe_std_strings     */
 
-    t1_standard_encoding,
-    t1_expert_encoding )
+    t1_standard_encoding,                               /* adobe_std_encoding    */
+    t1_expert_encoding )                                /* adobe_expert_encoding */
 
 #else
 
   FT_DEFINE_SERVICE_PSCMAPSREC(
     pscmaps_interface,
-    NULL,
-    NULL,
-    NULL,
-    NULL,
+    NULL,                                               /* unicode_value         */
+    NULL,                                               /* unicodes_init         */
+    NULL,                                               /* unicodes_char_index   */
+    NULL,                                               /* unicodes_char_next    */
 
-    (PS_Macintosh_NameFunc)    ps_get_macintosh_name,
-    (PS_Adobe_Std_StringsFunc) ps_get_standard_strings,
+    (PS_Macintosh_NameFunc)    ps_get_macintosh_name,   /* macintosh_name        */
+    (PS_Adobe_Std_StringsFunc) ps_get_standard_strings, /* adobe_std_strings     */
 
-    t1_standard_encoding,
-    t1_expert_encoding )
+    t1_standard_encoding,                               /* adobe_std_encoding    */
+    t1_expert_encoding )                                /* adobe_expert_encoding */
 
 #endif /* FT_CONFIG_OPTION_ADOBE_GLYPH_LIST */
 
diff --git a/src/sfnt/sfdriver.c b/src/sfnt/sfdriver.c
index 6a3f0d9..5dd8449 100644
--- a/src/sfnt/sfdriver.c
+++ b/src/sfnt/sfdriver.c
@@ -139,9 +139,9 @@
 
   FT_DEFINE_SERVICE_SFNT_TABLEREC(
     sfnt_service_sfnt_table,
-    (FT_SFNT_TableLoadFunc)tt_face_load_any,
-    (FT_SFNT_TableGetFunc) get_sfnt_table,
-    (FT_SFNT_TableInfoFunc)sfnt_table_info )
+    (FT_SFNT_TableLoadFunc)tt_face_load_any,     /* load_table */
+    (FT_SFNT_TableGetFunc) get_sfnt_table,       /* get_table  */
+    (FT_SFNT_TableInfoFunc)sfnt_table_info )     /* table_info */
 
 
 #ifdef TT_CONFIG_OPTION_POSTSCRIPT_NAMES
@@ -205,8 +205,8 @@
 
   FT_DEFINE_SERVICE_GLYPHDICTREC(
     sfnt_service_glyph_dict,
-    (FT_GlyphDict_GetNameFunc)  sfnt_get_glyph_name,
-    (FT_GlyphDict_NameIndexFunc)sfnt_get_name_index )
+    (FT_GlyphDict_GetNameFunc)  sfnt_get_glyph_name,    /* get_name   */
+    (FT_GlyphDict_NameIndexFunc)sfnt_get_name_index )   /* name_index */
 
 
 #endif /* TT_CONFIG_OPTION_POSTSCRIPT_NAMES */
@@ -330,7 +330,7 @@
 
   FT_DEFINE_SERVICE_PSFONTNAMEREC(
     sfnt_service_ps_name,
-    (FT_PsName_GetFunc)sfnt_get_ps_name )
+    (FT_PsName_GetFunc)sfnt_get_ps_name )     /* get_ps_font_name */
 
 
   /*
@@ -338,7 +338,7 @@
    */
   FT_DEFINE_SERVICE_TTCMAPSREC(
     tt_service_get_cmap_info,
-    (TT_CMap_Info_GetFunc)tt_get_cmap_info )
+    (TT_CMap_Info_GetFunc)tt_get_cmap_info )  /* get_cmap_info */
 
 
 #ifdef TT_CONFIG_OPTION_BDF
@@ -381,8 +381,8 @@
 
   FT_DEFINE_SERVICE_BDFRec(
     sfnt_service_bdf,
-    (FT_BDF_GetCharsetIdFunc)sfnt_get_charset_id,
-    (FT_BDF_GetPropertyFunc) tt_face_find_bdf_prop )
+    (FT_BDF_GetCharsetIdFunc)sfnt_get_charset_id,     /* get_charset_id */
+    (FT_BDF_GetPropertyFunc) tt_face_find_bdf_prop )  /* get_property   */
 
 
 #endif /* TT_CONFIG_OPTION_BDF */
diff --git a/src/truetype/ttdriver.c b/src/truetype/ttdriver.c
index 8b88b7e..1ba71f0 100644
--- a/src/truetype/ttdriver.c
+++ b/src/truetype/ttdriver.c
@@ -117,8 +117,8 @@
 
   FT_DEFINE_SERVICE_PROPERTIESREC(
     tt_service_properties,
-    (FT_Properties_SetFunc)tt_property_set,
-    (FT_Properties_GetFunc)tt_property_get )
+    (FT_Properties_SetFunc)tt_property_set,     /* set_property */
+    (FT_Properties_GetFunc)tt_property_get )    /* get_property */
 
 
   /*************************************************************************/
@@ -417,13 +417,14 @@
 #ifdef TT_CONFIG_OPTION_GX_VAR_SUPPORT
   FT_DEFINE_SERVICE_MULTIMASTERSREC(
     tt_service_gx_multi_masters,
-    (FT_Get_MM_Func)        NULL,
-    (FT_Set_MM_Design_Func) NULL,
-    (FT_Set_MM_Blend_Func)  TT_Set_MM_Blend,
-    (FT_Get_MM_Var_Func)    TT_Get_MM_Var,
-    (FT_Set_Var_Design_Func)TT_Set_Var_Design )
+    (FT_Get_MM_Func)        NULL,                   /* get_mm         */
+    (FT_Set_MM_Design_Func) NULL,                   /* set_mm_design  */
+    (FT_Set_MM_Blend_Func)  TT_Set_MM_Blend,        /* set_mm_blend   */
+    (FT_Get_MM_Var_Func)    TT_Get_MM_Var,          /* get_mm_var     */
+    (FT_Set_Var_Design_Func)TT_Set_Var_Design )     /* set_var_design */
 #endif
 
+
   static const FT_Service_TrueTypeEngineRec  tt_service_truetype_engine =
   {
 #ifdef TT_USE_BYTECODE_INTERPRETER
@@ -441,9 +442,11 @@
 #endif /* TT_USE_BYTECODE_INTERPRETER */
   };
 
+
   FT_DEFINE_SERVICE_TTGLYFREC(
     tt_service_truetype_glyf,
-    (TT_Glyf_GetLocationFunc)tt_face_get_location )
+    (TT_Glyf_GetLocationFunc)tt_face_get_location )    /* get_location */
+
 
 #ifdef TT_CONFIG_OPTION_GX_VAR_SUPPORT
   FT_DEFINE_SERVICEDESCREC5(
diff --git a/src/type1/t1driver.c b/src/type1/t1driver.c
index c0ca1e8..716dd55 100644
--- a/src/type1/t1driver.c
+++ b/src/type1/t1driver.c
@@ -87,8 +87,8 @@
 
   static const FT_Service_GlyphDictRec  t1_service_glyph_dict =
   {
-    (FT_GlyphDict_GetNameFunc)  t1_get_glyph_name,
-    (FT_GlyphDict_NameIndexFunc)t1_get_name_index
+    (FT_GlyphDict_GetNameFunc)  t1_get_glyph_name,    /* get_name   */
+    (FT_GlyphDict_NameIndexFunc)t1_get_name_index     /* name_index */
   };
 
 
@@ -106,7 +106,7 @@
 
   static const FT_Service_PsFontNameRec  t1_service_ps_name =
   {
-    (FT_PsName_GetFunc)t1_get_ps_name
+    (FT_PsName_GetFunc)t1_get_ps_name     /* get_ps_font_name */
   };
 
 
@@ -118,11 +118,11 @@
 #ifndef T1_CONFIG_OPTION_NO_MM_SUPPORT
   static const FT_Service_MultiMastersRec  t1_service_multi_masters =
   {
-    (FT_Get_MM_Func)        T1_Get_Multi_Master,
-    (FT_Set_MM_Design_Func) T1_Set_MM_Design,
-    (FT_Set_MM_Blend_Func)  T1_Set_MM_Blend,
-    (FT_Get_MM_Var_Func)    T1_Get_MM_Var,
-    (FT_Set_Var_Design_Func)T1_Set_Var_Design
+    (FT_Get_MM_Func)        T1_Get_Multi_Master,   /* get_mm         */
+    (FT_Set_MM_Design_Func) T1_Set_MM_Design,      /* set_mm_design  */
+    (FT_Set_MM_Blend_Func)  T1_Set_MM_Blend,       /* set_mm_blend   */
+    (FT_Get_MM_Var_Func)    T1_Get_MM_Var,         /* get_mm_var     */
+    (FT_Set_Var_Design_Func)T1_Set_Var_Design      /* set_var_design */
   };
 #endif
 
@@ -567,18 +567,18 @@
 
   static const FT_Service_PsInfoRec  t1_service_ps_info =
   {
-    (PS_GetFontInfoFunc)   t1_ps_get_font_info,
-    (PS_GetFontExtraFunc)  t1_ps_get_font_extra,
-    (PS_HasGlyphNamesFunc) t1_ps_has_glyph_names,
-    (PS_GetFontPrivateFunc)t1_ps_get_font_private,
-    (PS_GetFontValueFunc)  t1_ps_get_font_value,
+    (PS_GetFontInfoFunc)   t1_ps_get_font_info,    /* ps_get_font_info    */
+    (PS_GetFontExtraFunc)  t1_ps_get_font_extra,   /* ps_get_font_extra   */
+    (PS_HasGlyphNamesFunc) t1_ps_has_glyph_names,  /* ps_has_glyph_names  */
+    (PS_GetFontPrivateFunc)t1_ps_get_font_private, /* ps_get_font_private */
+    (PS_GetFontValueFunc)  t1_ps_get_font_value,   /* ps_get_font_value   */
   };
 
 
 #ifndef T1_CONFIG_OPTION_NO_AFM
   static const FT_Service_KerningRec  t1_service_kerning =
   {
-    T1_Get_Track_Kerning,
+    T1_Get_Track_Kerning,       /* get_track */
   };
 #endif
 
diff --git a/src/type42/t42drivr.c b/src/type42/t42drivr.c
index da7d8e5..45ad0df 100644
--- a/src/type42/t42drivr.c
+++ b/src/type42/t42drivr.c
@@ -90,8 +90,8 @@
 
   static const FT_Service_GlyphDictRec  t42_service_glyph_dict =
   {
-    (FT_GlyphDict_GetNameFunc)  t42_get_glyph_name,
-    (FT_GlyphDict_NameIndexFunc)t42_get_name_index
+    (FT_GlyphDict_GetNameFunc)  t42_get_glyph_name,    /* get_name   */
+    (FT_GlyphDict_NameIndexFunc)t42_get_name_index     /* name_index */
   };
 
 
@@ -110,7 +110,7 @@
 
   static const FT_Service_PsFontNameRec  t42_service_ps_font_name =
   {
-    (FT_PsName_GetFunc)t42_get_ps_font_name
+    (FT_PsName_GetFunc)t42_get_ps_font_name   /* get_ps_font_name */
   };
 
 
@@ -161,11 +161,12 @@
 
   static const FT_Service_PsInfoRec  t42_service_ps_info =
   {
-    (PS_GetFontInfoFunc)   t42_ps_get_font_info,
-    (PS_GetFontExtraFunc)  t42_ps_get_font_extra,
-    (PS_HasGlyphNamesFunc) t42_ps_has_glyph_names,
-    (PS_GetFontPrivateFunc)t42_ps_get_font_private,
-    (PS_GetFontValueFunc)  NULL             /* not implemented */
+    (PS_GetFontInfoFunc)   t42_ps_get_font_info,    /* ps_get_font_info    */
+    (PS_GetFontExtraFunc)  t42_ps_get_font_extra,   /* ps_get_font_extra   */
+    (PS_HasGlyphNamesFunc) t42_ps_has_glyph_names,  /* ps_has_glyph_names  */
+    (PS_GetFontPrivateFunc)t42_ps_get_font_private, /* ps_get_font_private */
+    /* not implemented */
+    (PS_GetFontValueFunc)  NULL                     /* ps_get_font_value   */
   };
 
 
diff --git a/src/winfonts/winfnt.c b/src/winfonts/winfnt.c
index 1005a12..acd31b1 100644
--- a/src/winfonts/winfnt.c
+++ b/src/winfonts/winfnt.c
@@ -1121,7 +1121,7 @@
 
   static const FT_Service_WinFntRec  winfnt_service_rec =
   {
-    winfnt_get_header
+    winfnt_get_header       /* get_header */
   };
 
  /*
-- 
2.6.2

From 009cc15035160eb412cf7d73df34a84af5738c9b Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 31 Oct 2015 17:52:56 +0100
Subject: [PATCH 094/110] [sfnt] Handle infinite recursion in bitmap strikes
 (#46344).

* src/sfnt/ttsbit.c (TT_SBitDecoder_LoadFunc,
tt_sbit_decoder_load_bitmap, tt_sbit_decoder_load_byte_aligned,
tt_sbit_decoder_load_bit_aligned, tt_sbit_decoder_load_png): Add
argument for recursion depth.
(tt_sbit_decoder_load_compound): Add argument for recursion depth.
Increase recursion counter for recursive call.
(tt_sbit_decoder_load_image): Add argument for recursion depth.
Check recurse depth.
(tt_face_load_sbit_image): Updated.
---
 ChangeLog         | 14 ++++++++++++
 src/sfnt/ttsbit.c | 68 ++++++++++++++++++++++++++++++++++++++-----------------
 2 files changed, 61 insertions(+), 21 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index a03116b..3804dfa 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,17 @@
+2015-10-31  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Handle infinite recursion in bitmap strikes (#46344).
+
+	* src/sfnt/ttsbit.c (TT_SBitDecoder_LoadFunc,
+	tt_sbit_decoder_load_bitmap, tt_sbit_decoder_load_byte_aligned,
+	tt_sbit_decoder_load_bit_aligned, tt_sbit_decoder_load_png): Add
+	argument for recursion depth.
+	(tt_sbit_decoder_load_compound): Add argument for recursion depth.
+	Increase recursion counter for recursive call.
+	(tt_sbit_decoder_load_image): Add argument for recursion depth.
+	Check recurse depth.
+	(tt_face_load_sbit_image): Updated.
+
 2015-10-29  Werner Lemberg  <wl@gnu.org>
 
 	* src/autofit/afhints.c (af_glyph_hints_dump_points): Minor.
diff --git a/src/sfnt/ttsbit.c b/src/sfnt/ttsbit.c
index 6de8757..c0540f3 100644
--- a/src/sfnt/ttsbit.c
+++ b/src/sfnt/ttsbit.c
@@ -608,13 +608,16 @@
   tt_sbit_decoder_load_image( TT_SBitDecoder  decoder,
                               FT_UInt         glyph_index,
                               FT_Int          x_pos,
-                              FT_Int          y_pos );
+                              FT_Int          y_pos,
+                              FT_UInt         recurse_count );
 
-  typedef FT_Error  (*TT_SBitDecoder_LoadFunc)( TT_SBitDecoder  decoder,
-                                                FT_Byte*        p,
-                                                FT_Byte*        plimit,
-                                                FT_Int          x_pos,
-                                                FT_Int          y_pos );
+  typedef FT_Error  (*TT_SBitDecoder_LoadFunc)(
+                      TT_SBitDecoder  decoder,
+                      FT_Byte*        p,
+                      FT_Byte*        plimit,
+                      FT_Int          x_pos,
+                      FT_Int          y_pos,
+                      FT_UInt         recurse_count );
 
 
   static FT_Error
@@ -622,7 +625,8 @@
                                      FT_Byte*        p,
                                      FT_Byte*        limit,
                                      FT_Int          x_pos,
-                                     FT_Int          y_pos )
+                                     FT_Int          y_pos,
+                                     FT_UInt         recurse_count )
   {
     FT_Error    error = FT_Err_Ok;
     FT_Byte*    line;
@@ -630,6 +634,8 @@
     FT_UInt     bit_height, bit_width;
     FT_Bitmap*  bitmap;
 
+    FT_UNUSED( recurse_count );
+
 
     /* check that we can write the glyph into the bitmap */
     bitmap     = decoder->bitmap;
@@ -761,7 +767,8 @@
                                     FT_Byte*        p,
                                     FT_Byte*        limit,
                                     FT_Int          x_pos,
-                                    FT_Int          y_pos )
+                                    FT_Int          y_pos,
+                                    FT_UInt         recurse_count )
   {
     FT_Error    error = FT_Err_Ok;
     FT_Byte*    line;
@@ -770,6 +777,8 @@
     FT_Bitmap*  bitmap;
     FT_UShort   rval;
 
+    FT_UNUSED( recurse_count );
+
 
     /* check that we can write the glyph into the bitmap */
     bitmap     = decoder->bitmap;
@@ -885,7 +894,8 @@
                                  FT_Byte*        p,
                                  FT_Byte*        limit,
                                  FT_Int          x_pos,
-                                 FT_Int          y_pos )
+                                 FT_Int          y_pos,
+                                 FT_UInt         recurse_count )
   {
     FT_Error  error = FT_Err_Ok;
     FT_UInt   num_components, nn;
@@ -919,8 +929,11 @@
 
 
       /* NB: a recursive call */
-      error = tt_sbit_decoder_load_image( decoder, gindex,
-                                          x_pos + dx, y_pos + dy );
+      error = tt_sbit_decoder_load_image( decoder,
+                                          gindex,
+                                          x_pos + dx,
+                                          y_pos + dy,
+                                          recurse_count + 1 );
       if ( error )
         break;
     }
@@ -952,11 +965,14 @@
                             FT_Byte*        p,
                             FT_Byte*        limit,
                             FT_Int          x_pos,
-                            FT_Int          y_pos )
+                            FT_Int          y_pos,
+                            FT_UInt         recurse_count )
   {
     FT_Error  error = FT_Err_Ok;
     FT_ULong  png_len;
 
+    FT_UNUSED( recurse_count );
+
 
     if ( limit - p < 4 )
     {
@@ -998,7 +1014,8 @@
                                FT_ULong        glyph_start,
                                FT_ULong        glyph_size,
                                FT_Int          x_pos,
-                               FT_Int          y_pos )
+                               FT_Int          y_pos,
+                               FT_UInt         recurse_count )
   {
     FT_Error   error;
     FT_Stream  stream = decoder->stream;
@@ -1124,7 +1141,7 @@
           goto Fail;
       }
 
-      error = loader( decoder, p, p_limit, x_pos, y_pos );
+      error = loader( decoder, p, p_limit, x_pos, y_pos, recurse_count );
     }
 
   Fail:
@@ -1139,13 +1156,9 @@
   tt_sbit_decoder_load_image( TT_SBitDecoder  decoder,
                               FT_UInt         glyph_index,
                               FT_Int          x_pos,
-                              FT_Int          y_pos )
+                              FT_Int          y_pos,
+                              FT_UInt         recurse_count )
   {
-    /*
-     *  First, we find the correct strike range that applies to this
-     *  glyph index.
-     */
-
     FT_Byte*  p          = decoder->eblc_base + decoder->strike_index_array;
     FT_Byte*  p_limit    = decoder->eblc_limit;
     FT_ULong  num_ranges = decoder->strike_index_count;
@@ -1153,6 +1166,17 @@
     FT_ULong  image_start = 0, image_end = 0, image_offset;
 
 
+    /* arbitrary recursion limit */
+    if ( recurse_count > 100 )
+    {
+      FT_TRACE4(( "tt_sbit_decoder_load_image:"
+                  " recursion depth exceeded\n" ));
+      goto Failure;
+    }
+
+
+    /* First, we find the correct strike range that applies to this */
+    /* glyph index.                                                 */
     for ( ; num_ranges > 0; num_ranges-- )
     {
       start = FT_NEXT_USHORT( p );
@@ -1317,7 +1341,8 @@
                                         image_start,
                                         image_end,
                                         x_pos,
-                                        y_pos );
+                                        y_pos,
+                                        recurse_count );
 
   Failure:
     return FT_THROW( Invalid_Table );
@@ -1480,6 +1505,7 @@
           error = tt_sbit_decoder_load_image( decoder,
                                               glyph_index,
                                               0,
+                                              0,
                                               0 );
           tt_sbit_decoder_done( decoder );
         }
-- 
2.6.2

From 57cbb8c148999ba8f14ed53435fc071ac9953afd Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 31 Oct 2015 18:47:26 +0100
Subject: [PATCH 095/110] [sfnt] Fix cmap 14 validation (#46346).

* src/sfnt/ttcmap.c (tt_cmap14_validate): Check limit before
accessing `numRanges' and `numMappings'.
Fix size check for non-default UVS table.
---
 ChangeLog         |  8 ++++++++
 src/sfnt/ttcmap.c | 26 ++++++++++++++++++--------
 2 files changed, 26 insertions(+), 8 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 3804dfa..44fc7de 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,13 @@
 2015-10-31  Werner Lemberg  <wl@gnu.org>
 
+	[sfnt] Fix cmap 14 validation (#46346).
+
+	* src/sfnt/ttcmap.c (tt_cmap14_validate): Check limit before
+	accessing `numRanges' and `numMappings'.
+	Fix size check for non-default UVS table.
+
+2015-10-31  Werner Lemberg  <wl@gnu.org>
+
 	[sfnt] Handle infinite recursion in bitmap strikes (#46344).
 
 	* src/sfnt/ttsbit.c (TT_SBitDecoder_LoadFunc,
diff --git a/src/sfnt/ttcmap.c b/src/sfnt/ttcmap.c
index f572508..579f64a 100644
--- a/src/sfnt/ttcmap.c
+++ b/src/sfnt/ttcmap.c
@@ -2968,12 +2968,17 @@
         /* through the normal Unicode cmap, no GIDs, just check order) */
         if ( defOff != 0 )
         {
-          FT_Byte*  defp      = table + defOff;
-          FT_ULong  numRanges = TT_NEXT_ULONG( defp );
+          FT_Byte*  defp     = table + defOff;
+          FT_ULong  numRanges;
           FT_ULong  i;
-          FT_ULong  lastBase  = 0;
+          FT_ULong  lastBase = 0;
 
 
+          if ( defp + 4 > valid->limit )
+            FT_INVALID_TOO_SHORT;
+
+          numRanges = TT_NEXT_ULONG( defp );
+
           /* defp + numRanges * 4 > valid->limit ? */
           if ( numRanges > (FT_ULong)( valid->limit - defp ) / 4 )
             FT_INVALID_TOO_SHORT;
@@ -2997,13 +3002,18 @@
         /* and the non-default table (these glyphs are specified here) */
         if ( nondefOff != 0 )
         {
-          FT_Byte*  ndp         = table + nondefOff;
-          FT_ULong  numMappings = TT_NEXT_ULONG( ndp );
-          FT_ULong  i, lastUni  = 0;
+          FT_Byte*  ndp        = table + nondefOff;
+          FT_ULong  numMappings;
+          FT_ULong  i, lastUni = 0;
+
+
+          if ( ndp + 4 > valid->limit )
+            FT_INVALID_TOO_SHORT;
 
+          numMappings = TT_NEXT_ULONG( ndp );
 
-          /* numMappings * 4 > (FT_ULong)( valid->limit - ndp ) ? */
-          if ( numMappings > ( (FT_ULong)( valid->limit - ndp ) ) / 4 )
+          /* numMappings * 5 > (FT_ULong)( valid->limit - ndp ) ? */
+          if ( numMappings > ( (FT_ULong)( valid->limit - ndp ) ) / 5 )
             FT_INVALID_TOO_SHORT;
 
           for ( i = 0; i < numMappings; ++i )
-- 
2.6.2

From 40cb1dc3ac2c152593703d4f534a8de5af19ae1e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 31 Oct 2015 19:08:27 +0100
Subject: [PATCH 096/110] Formatting.

---
 src/base/ftdbgmem.c  | 2 +-
 src/cache/ftccache.c | 2 +-
 src/sfnt/ttcmap.c    | 4 ++--
 3 files changed, 4 insertions(+), 4 deletions(-)

diff --git a/src/base/ftdbgmem.c b/src/base/ftdbgmem.c
index 6f20313..02eeb01 100644
--- a/src/base/ftdbgmem.c
+++ b/src/base/ftdbgmem.c
@@ -462,7 +462,7 @@
               (FT_UInt32)( 5 * _ft_debug_lineno );
     pnode = &table->sources[hash % FT_MEM_SOURCE_BUCKETS];
 
-    for ( ;; )
+    for (;;)
     {
       node = *pnode;
       if ( node == NULL )
diff --git a/src/cache/ftccache.c b/src/cache/ftccache.c
index d8c5b99..b82a789 100644
--- a/src/cache/ftccache.c
+++ b/src/cache/ftccache.c
@@ -576,7 +576,7 @@
       FTC_Node*  pnode  = bucket;
 
 
-      for ( ;; )
+      for (;;)
       {
         FTC_Node  node = *pnode;
         FT_Bool   list_changed = FALSE;
diff --git a/src/sfnt/ttcmap.c b/src/sfnt/ttcmap.c
index 579f64a..2b1337f 100644
--- a/src/sfnt/ttcmap.c
+++ b/src/sfnt/ttcmap.c
@@ -774,7 +774,7 @@
     if ( charcode < cmap->cur_start )
       charcode = cmap->cur_start;
 
-    for ( ;; )
+    for (;;)
     {
       FT_Byte*  values = cmap->cur_values;
       FT_UInt   end    = cmap->cur_end;
@@ -3458,7 +3458,7 @@
       ni   = 1;
       i    = 0;
 
-      for ( ;; )
+      for (;;)
       {
         if ( nuni > duni + dcnt )
         {
-- 
2.6.2

From bcf618b256c101e9f4a47af77541a559bb8bb44d Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Mon, 2 Nov 2015 06:50:49 +0100
Subject: [PATCH 097/110] [ftfuzzer] Add support for multiple files (patch
 #8779).

Currently, libFuzzer only supports mutation of a single file.  We
circumvent this problem by using an uncompressed tar archive as
multiple-file input for the fuzzer.

This patch enables tests of `FT_Attach_Stream' and AFM/PFM parsing;
a constructed tarball should contain a font file as the first
element, and files to be attached as further elements.

* src/tools/ftfuzzer/ftfuzzer.cc: Include libarchive headers.
(archive_read_entry_data, parse_data): New functions.
(LLVMFuzzerTestOneInput): Updated.

* src/tools/ftfuzzer/ftmutator.cc: New file, providing a custom
mutator for libFuzzer that can mutate tarballs in a sensible way.
---
 ChangeLog                       |  19 +++
 src/tools/ftfuzzer/ftfuzzer.cc  | 119 ++++++++++++++--
 src/tools/ftfuzzer/ftmutator.cc | 301 ++++++++++++++++++++++++++++++++++++++++
 3 files changed, 430 insertions(+), 9 deletions(-)
 create mode 100644 src/tools/ftfuzzer/ftmutator.cc

diff --git a/ChangeLog b/ChangeLog
index 44fc7de..ee5e5e9 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,22 @@
+2015-11-02  Bungeman  <bungeman@gmail.com>
+
+	[ftfuzzer] Add support for multiple files (patch #8779).
+
+	Currently, libFuzzer only supports mutation of a single file.  We
+	circumvent this problem by using an uncompressed tar archive as
+	multiple-file input for the fuzzer.
+
+	This patch enables tests of `FT_Attach_Stream' and AFM/PFM parsing;
+	a constructed tarball should contain a font file as the first
+	element, and files to be attached as further elements.
+
+	* src/tools/ftfuzzer/ftfuzzer.cc: Include libarchive headers.
+	(archive_read_entry_data, parse_data): New functions.
+	(LLVMFuzzerTestOneInput): Updated.
+
+	* src/tools/ftfuzzer/ftmutator.cc: New file, providing a custom
+	mutator for libFuzzer that can mutate tarballs in a sensible way.
+
 2015-10-31  Werner Lemberg  <wl@gnu.org>
 
 	[sfnt] Fix cmap 14 validation (#46346).
diff --git a/src/tools/ftfuzzer/ftfuzzer.cc b/src/tools/ftfuzzer/ftfuzzer.cc
index e5ab293..a232c68 100644
--- a/src/tools/ftfuzzer/ftfuzzer.cc
+++ b/src/tools/ftfuzzer/ftfuzzer.cc
@@ -1,8 +1,11 @@
-// we use `unique_ptr' and `decltype', defined since C++11
+// we use `unique_ptr', `decltype', and other gimmicks defined since C++11
 #if __cplusplus < 201103L
 #  error "a C++11 compiler is needed"
 #endif
 
+#include <archive.h>
+#include <archive_entry.h>
+
 #include <assert.h>
 #include <stdint.h>
 
@@ -10,7 +13,7 @@
 #include <vector>
 
 
-using namespace std;
+  using namespace std;
 
 
 #include <ft2build.h>
@@ -34,6 +37,7 @@ using namespace std;
   static FT_Library  library;
   static int         InitResult;
 
+
   struct FT_Global {
     FT_Global() {
       InitResult = FT_Init_FreeType( &library );
@@ -46,6 +50,81 @@ using namespace std;
   FT_Global  global_ft;
 
 
+  static int
+  archive_read_entry_data( struct archive   *ar,
+                           vector<FT_Byte>  *vw )
+  {
+    int             r;
+    const FT_Byte*  buff;
+    size_t          size;
+    int64_t         offset;
+
+    for (;;)
+    {
+      r = archive_read_data_block( ar,
+                                   reinterpret_cast<const void**>( &buff ),
+                                   &size,
+                                   &offset );
+      if ( r == ARCHIVE_EOF )
+        return ARCHIVE_OK;
+      if ( r != ARCHIVE_OK )
+        return r;
+
+      vw->insert( vw->end(), buff, buff + size );
+    }
+  }
+
+
+  static vector<vector<FT_Byte>>
+  parse_data( const uint8_t*  data,
+              size_t          size )
+  {
+    struct archive_entry*    entry;
+    int                      r;
+    vector<vector<FT_Byte>>  files;
+
+    unique_ptr<struct  archive,
+               decltype ( archive_read_free )*>  a( archive_read_new(),
+                                                    archive_read_free );
+
+    // activate reading of uncompressed tar archives
+    archive_read_support_format_tar( a.get() );
+
+    // the need for `const_cast' was removed with libarchive commit be4d4dd
+    if ( !( r = archive_read_open_memory(
+                  a.get(),
+                  const_cast<void*>(static_cast<const void*>( data ) ),
+                  size ) ) )
+    {
+      unique_ptr<struct  archive,
+                 decltype ( archive_read_close )*>  a_open( a.get(),
+                                                            archive_read_close );
+
+      // read files contained in archive
+      for (;;)
+      {
+        r = archive_read_next_header( a_open.get(), &entry );
+        if ( r == ARCHIVE_EOF )
+          break;
+        if ( r != ARCHIVE_OK )
+          break;
+
+        vector<FT_Byte>  entry_data;
+        r = archive_read_entry_data( a.get(), &entry_data );
+        if ( r != ARCHIVE_OK )
+          break;
+
+        files.push_back( move( entry_data ) );
+      }
+    }
+
+    if ( files.size() == 0 )
+      files.emplace_back( data, data + size );
+
+    return files;
+  }
+
+
   static void
   setIntermediateAxis( FT_Face  face )
   {
@@ -74,6 +153,7 @@ using namespace std;
   }
 
 
+  // the interface function to the libFuzzer library
   extern "C" int
   LLVMFuzzerTestOneInput( const uint8_t*  data,
                           size_t          size_ )
@@ -83,7 +163,7 @@ using namespace std;
     if ( size_ < 1 )
       return 0;
 
-    long  size = (long)size_;
+    const vector<vector<FT_Byte>>&  files = parse_data( data, size_ );
 
     FT_Face         face;
     FT_Int32        load_flags  = FT_LOAD_DEFAULT;
@@ -99,7 +179,11 @@ using namespace std;
     // more than a single font.
 
     // get number of faces
-    if ( FT_New_Memory_Face( library, data, size, -1, &face ) )
+    if ( FT_New_Memory_Face( library,
+                             files[0].data(),
+                             (FT_Long)files[0].size(),
+                             -1,
+                             &face ) )
       return 0;
     long  num_faces = face->num_faces;
     FT_Done_Face( face );
@@ -111,8 +195,8 @@ using namespace std;
     {
       // get number of instances
       if ( FT_New_Memory_Face( library,
-                               data,
-                               size,
+                               files[0].data(),
+                               (FT_Long)files[0].size(),
                                -( face_index + 1 ),
                                &face ) )
         continue;
@@ -125,12 +209,29 @@ using namespace std;
             instance_index++ )
       {
         if ( FT_New_Memory_Face( library,
-                                 data,
-                                 size,
+                                 files[0].data(),
+                                 (FT_Long)files[0].size(),
                                  ( instance_index << 16 ) + face_index,
                                  &face ) )
           continue;
 
+        // if we have more than a single input file coming from an archive,
+        // attach them (starting with the second file) using the order given
+        // in the archive
+        for ( size_t  files_index = 1;
+              files_index < files.size();
+              files_index++ )
+        {
+          FT_Open_Args  open_args = {};
+          open_args.flags         = FT_OPEN_MEMORY;
+          open_args.memory_base   = files[files_index].data();
+          open_args.memory_size   = (FT_Long)files[files_index].size();
+
+          // the last archive element will be eventually used as the
+          // attachment
+          FT_Attach_Stream( face, &open_args );
+        }
+
         // loop over all bitmap stroke sizes
         // and an arbitrary size for outlines
         for ( long  fixed_sizes_index = 0;
@@ -192,4 +293,4 @@ using namespace std;
   }
 
 
-/* END */
+// END
diff --git a/src/tools/ftfuzzer/ftmutator.cc b/src/tools/ftfuzzer/ftmutator.cc
new file mode 100644
index 0000000..1223ba2
--- /dev/null
+++ b/src/tools/ftfuzzer/ftmutator.cc
@@ -0,0 +1,301 @@
+// A custom fuzzer mutator for FreeType.
+//
+// Since `tar' is not a valid format for input to FreeType, treat any input
+// that looks like `tar' as multiple files and mutate them separately.
+//
+// In the future, a variation of this may be used to guide mutation on a
+// logically higher level.
+
+// we use `unique_ptr', `decltype', and other gimmicks defined since C++11
+#if __cplusplus < 201103L
+#  error "a C++11 compiler is needed"
+#endif
+
+#include <cstdint>
+#include <cassert>
+#include <cstdio>
+#include <cstdlib>
+#include <cstddef>
+#include <cstring>
+#include <iostream>
+
+#include <memory>
+#include <vector>
+
+#include <archive.h>
+#include <archive_entry.h>
+
+#include "FuzzerInterface.h"
+
+
+  using namespace std;
+
+
+  // This function should be defined by `ftfuzzer.cc'.
+  extern "C" int
+  LLVMFuzzerTestOneInput( const uint8_t*  Data,
+                          size_t          Size );
+
+
+  static void
+  check_result( struct archive*  a,
+                int              r )
+  {
+    if ( r == ARCHIVE_OK )
+      return;
+
+    const char*  m = archive_error_string( a );
+    write( 1, m, strlen( m ) );
+    exit( 1 );
+  }
+
+
+  static int
+  archive_read_entry_data( struct archive   *ar,
+                           vector<uint8_t>  *vw )
+  {
+    int             r;
+    const uint8_t*  buff;
+    size_t          size;
+    int64_t         offset;
+
+    for (;;)
+    {
+      r = archive_read_data_block( ar,
+                                   reinterpret_cast<const void**>( &buff ),
+                                   &size,
+                                   &offset );
+      if ( r == ARCHIVE_EOF )
+        return ARCHIVE_OK;
+      if ( r != ARCHIVE_OK )
+        return r;
+
+      vw->insert( vw->end(), buff, buff + size );
+    }
+  }
+
+
+  static vector<vector<uint8_t>>
+  parse_data( const uint8_t*  data,
+              size_t          size )
+  {
+    struct archive_entry*    entry;
+    int                      r;
+    vector<vector<uint8_t>>  files;
+
+    unique_ptr<struct  archive,
+               decltype ( archive_read_free )*>  a( archive_read_new(),
+                                                    archive_read_free );
+
+    // activate reading of uncompressed tar archives
+    archive_read_support_format_tar( a.get() );
+
+    // the need for `const_cast' was removed with libarchive commit be4d4dd
+    if ( !( r = archive_read_open_memory(
+                  a.get(),
+                  const_cast<void*>(static_cast<const void*>( data ) ),
+                  size ) ) )
+    {
+      unique_ptr<struct  archive,
+                 decltype ( archive_read_close )*>  a_open( a.get(),
+                                                            archive_read_close );
+
+      // read files contained in archive
+      for (;;)
+      {
+        r = archive_read_next_header( a_open.get(), &entry );
+        if ( r == ARCHIVE_EOF )
+          break;
+        if ( r != ARCHIVE_OK )
+          break;
+
+        vector<uint8_t>  entry_data;
+        r = archive_read_entry_data( a.get(), &entry_data );
+        if ( entry_data.size() == 0 )
+          continue;
+
+        files.push_back( move( entry_data ) );
+        if ( r != ARCHIVE_OK )
+          break;
+      }
+    }
+
+    return files;
+  }
+
+
+  class FTFuzzer
+  : public fuzzer::UserSuppliedFuzzer
+  {
+
+  public:
+    FTFuzzer( fuzzer::FuzzerRandomBase*  Rand )
+    : fuzzer::UserSuppliedFuzzer( Rand ) {}
+
+
+    int
+    TargetFunction( const uint8_t*  Data,
+                    size_t          Size )
+    {
+      return LLVMFuzzerTestOneInput( Data, Size );
+    }
+
+
+    // Custom mutator.
+    virtual size_t
+    Mutate( uint8_t*  Data,
+            size_t    Size,
+            size_t    MaxSize )
+    {
+      vector<vector<uint8_t>>  files = parse_data( Data, Size );
+
+      // If the file was not recognized as a tar file, treat it as non-tar.
+      if ( files.size() == 0 )
+        return fuzzer::UserSuppliedFuzzer::Mutate( Data, Size, MaxSize );
+
+      // This is somewhat `white box' on tar.  The tar format uses 512 byte
+      // blocks.  One block as header for each file, two empty blocks of 0's
+      // at the end.  File data is padded to fill its last block.
+      size_t  used_blocks = files.size() + 2;
+      for ( const auto&  file : files )
+        used_blocks += ( file.size() + 511 ) / 512;
+
+      size_t  max_blocks = MaxSize / 512;
+
+      // If the input is big, it will need to be downsized.  If the original
+      // tar file was too big, it may have been clipped to fit.  In this
+      // case it may not be possible to properly write out the data, as
+      // there may not be enough space for the trailing two blocks.  Start
+      // dropping file data or files from the end.
+      for ( size_t  i = files.size();
+            i-- > 1 && used_blocks > max_blocks; )
+      {
+        size_t  blocks_to_free = used_blocks - max_blocks;
+        size_t  blocks_currently_used_by_file_data =
+                  ( files[i].size() + 511 ) / 512;
+
+        if ( blocks_currently_used_by_file_data >= blocks_to_free )
+        {
+          files[i].resize( ( blocks_currently_used_by_file_data -
+                               blocks_to_free ) * 512 );
+          used_blocks -= blocks_to_free;
+          continue;
+        }
+
+        files.pop_back();
+        used_blocks -= blocks_currently_used_by_file_data + 1;
+      }
+
+      // If we get down to one file, don't use tar.
+      if ( files.size() == 1 )
+      {
+        memcpy( Data, files[0].data(), files[0].size() );
+        return fuzzer::UserSuppliedFuzzer::Mutate( Data,
+                                                   files[0].size(),
+                                                   MaxSize );
+      }
+
+      size_t  free_blocks = max_blocks - used_blocks;
+
+      // Allow each file to use up as much of the currently available space
+      // it can.  If it uses or gives up blocks, add them or remove them
+      // from the pool.
+      for ( auto&&  file : files )
+      {
+        size_t  blocks_currently_used_by_file = ( file.size() + 511 ) / 512;
+        size_t  blocks_available = blocks_currently_used_by_file +
+                                     free_blocks;
+        size_t  max_size = blocks_available * 512;
+        size_t  data_size = file.size();
+
+        file.resize( max_size );
+        file.resize( fuzzer::UserSuppliedFuzzer::Mutate( file.data(),
+                                                         data_size,
+                                                         max_size ) );
+
+        size_t  blocks_now_used_by_file = ( file.size() + 511 ) / 512;
+        free_blocks = free_blocks +
+                        blocks_currently_used_by_file -
+                        blocks_now_used_by_file;
+      }
+
+      unique_ptr<struct  archive,
+                 decltype ( archive_write_free )*>  a( archive_write_new(),
+                                                       archive_write_free );
+
+      check_result( a.get(), archive_write_add_filter_none( a.get() ) );
+      check_result( a.get(), archive_write_set_format_ustar( a.get() ) );
+
+      // `used' may not be correct until after the archive is closed.
+      size_t  used = 0xbadbeef;
+      check_result( a.get(), archive_write_open_memory( a.get(),
+                                                        Data,
+                                                        MaxSize,
+                                                        &used ) );
+
+      {
+        unique_ptr<struct  archive,
+                   decltype ( archive_write_close )*>  a_open( a.get(),
+                                                               archive_write_close );
+
+        int  file_index = 0;
+        for ( const auto&  file : files )
+        {
+          unique_ptr<struct  archive_entry,
+                     decltype ( archive_entry_free )*>
+            e( archive_entry_new2( a_open.get() ),
+                                   archive_entry_free );
+
+          char  name_buffer[100];
+          snprintf( name_buffer, 100, "file%d", file_index++ );
+
+          archive_entry_set_pathname( e.get(), name_buffer );
+          archive_entry_set_size( e.get(), file.size() );
+          archive_entry_set_filetype( e.get(), AE_IFREG );
+          archive_entry_set_perm( e.get(), 0644 );
+
+          check_result( a_open.get(),
+                        archive_write_header( a_open.get(), e.get() ) );
+          archive_write_data( a_open.get(), file.data(), file.size() );
+          check_result( a_open.get(),
+                        archive_write_finish_entry( a_open.get() ) );
+        }
+      }
+
+      return used;
+    }
+
+
+    // Cross `Data1' and `Data2', write up to `MaxOutSize' bytes into `Out',
+    // return the number of bytes written, which should be positive.
+    virtual size_t
+    CrossOver( const uint8_t*  Data1,
+               size_t          Size1,
+               const uint8_t*  Data2,
+               size_t          Size2,
+               uint8_t*        Out,
+               size_t          MaxOutSize )
+    {
+      return fuzzer::UserSuppliedFuzzer::CrossOver( Data1,
+                                                    Size1,
+                                                    Data2,
+                                                    Size2,
+                                                    Out,
+                                                    MaxOutSize );
+    }
+
+  }; // end of FTFuzzer class
+
+
+  int
+  main( int     argc,
+        char*  *argv )
+  {
+    fuzzer::FuzzerRandomLibc  Rand( 0 );
+    FTFuzzer                  F( &Rand );
+
+    fuzzer::FuzzerDriver( argc, argv, F );
+  }
+
+
+// END
-- 
2.6.2

From 6bda921da0f996fc389caac77950d39cd05c855e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Mon, 2 Nov 2015 06:53:48 +0100
Subject: [PATCH 098/110] [ftfuzzer] Update README file.

---
 src/tools/ftfuzzer/README | 67 ++++++++++++++++++++++++++++++++++++-----------
 1 file changed, 52 insertions(+), 15 deletions(-)

diff --git a/src/tools/ftfuzzer/README b/src/tools/ftfuzzer/README
index 7248bb7..f827d5e 100644
--- a/src/tools/ftfuzzer/README
+++ b/src/tools/ftfuzzer/README
@@ -1,23 +1,60 @@
 ftfuzzer
---------
+========
 
-ftfuzzer.cc contains a target function for FreeType fuzzing.
-It can be used with libFuzzer (http://llvm.org/docs/LibFuzzer.html)
-or potentially any other similar fuzzer.
+
+ftfuzzer.cc
+-----------
+
+This file contains a target function for FreeType fuzzing.  It can be used
+with libFuzzer (http://llvm.org/docs/LibFuzzer.html) or potentially any
+other similar fuzzer.
 
 Usage:
-  1. Build libfreetype.a and ftfuzzer.cc using the most recent clang compiler
-     with these flags:
-     -fsanitize-coverage=edge,8bit-counters # for fuzzer coverage feedback
-     -fsanitize=address,signed-integer-overflow,shift  # for bug checking
-  2. Link with libFuzzer (it contains main()).
+
+  1. Build `libfreetype.a' and `ftfuzzer.cc' using the most recent clang
+     compiler with these flags:
+
+       -fsanitize-coverage=edge,8bit-counters # for fuzzer coverage feedback
+       -fsanitize=address,signed-integer-overflow,shift  # for bug checking
+
+     You also need the header files from `libarchive' for handling tar files
+     (see `ftmutator.cc' below for more).
+
+  2. Link with `libFuzzer' (it contains main()) and `libarchive'.
+
   3. Run the fuzzer on some test corpus.
 
 The exact flags and commands may vary.
-There is a continuous fuzzing bot that runs ftfuzzer:
-https://github.com/google/libfuzzer-bot/tree/master/freetype.
-Check the bot confituration for the most current settings.
 
-runinput.cc contains a convenience main() function to run the target function
-on a set of input files. Link it with ftfuzzer.cc and libfreetype.a
-and run like "./a.out my_tests_inputs/*"
+
+There is a continuous fuzzing bot that runs ftfuzzer.
+
+  https://github.com/google/libfuzzer-bot/tree/master/freetype
+
+Check the bot configuration for the most current settings.
+
+
+ftmutator.cc
+------------
+
+FreeType has the ability to `attach' auxiliary files to a font file,
+providing additional information.  The main usage is to load AFM files for
+PostScript Type 1 fonts.
+
+However, libFuzzer currently only supports mutation of a single input file. 
+For this reason, `ftmutator.cc' contains a custom fuzzer mutator that uses
+an uncompressed tar file archive as the input.  The first file in such a
+tarball gets opened by FreeType as a font, all other files are treated as
+input for `FT_Attach_Stream'.
+
+Compilation is similar to `ftfuzzer.c'.
+
+
+runinput.cc
+-----------
+
+To run the target function on a set of input files, this file contains a
+convenience main() function.  Link it with `ftfuzzer.cc', `libfreetype.a',
+and `libarchive' and run like
+
+  ./a.out my_tests_inputs/*
-- 
2.6.2

From d682e510627086df010b0677003f8ac5e612e913 Mon Sep 17 00:00:00 2001
From: Nikolaus Waxweiler <madigens@gmail.com>
Date: Mon, 2 Nov 2015 09:06:36 +0100
Subject: [PATCH 099/110] [autofit] Add stem-darkening properties.

Actual code follows in a later commit.

* include/freetype/ftautoh.h: Document `no-stem-darkening' and
`darkening-parameters'.

* src/autofit/afmodule.h: New fields `no_stem_darkening' and
`darken_params'.

* src/autofit/afmodule.c (af_property_set, af_property_get):
Handle them.
(af_autofitter_init): Initialize them.
---
 ChangeLog                  | 16 +++++++++
 include/freetype/ftautoh.h | 52 +++++++++++++++++++++++++++++
 src/autofit/afmodule.c     | 83 ++++++++++++++++++++++++++++++++++++++++++++--
 src/autofit/afmodule.h     |  2 ++
 4 files changed, 150 insertions(+), 3 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index ee5e5e9..5286c87 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,19 @@
+2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
+
+	[autofit] Add stem-darkening properties.
+
+	Actual code follows in a later commit.
+
+	* include/freetype/ftautoh.h: Document `no-stem-darkening' and
+	`darkening-parameters'.
+
+	* src/autofit/afmodule.h: New fields `no_stem_darkening' and
+	`darken_params'.
+
+	* src/autofit/afmodule.c (af_property_set, af_property_get):
+	Handle them.
+	(af_autofitter_init): Initialize them.
+
 2015-11-02  Bungeman  <bungeman@gmail.com>
 
 	[ftfuzzer] Add support for multiple files (patch #8779).
diff --git a/include/freetype/ftautoh.h b/include/freetype/ftautoh.h
index ab39c21..e4c1eae 100644
--- a/include/freetype/ftautoh.h
+++ b/include/freetype/ftautoh.h
@@ -439,6 +439,58 @@ FT_BEGIN_HEADER
    */
 
 
+  /**************************************************************************
+   *
+   * @property:
+   *   no-stem-darkening
+   *
+   * @description:
+   *   *Experimental* *only*
+   *
+   *   The main purpose of emboldening glyphs or `stem darkening' is to
+   *   enhance readability at smaller sizes.  The smaller the size, the more
+   *   emboldening is applied to keep glyphs from `thinning out'.  All
+   *   glyphs that pass through the autohinter will be emboldened unless
+   *   this property is set to TRUE.
+   *
+   *   See the description of the CFF driver for algorithmic details.  Total
+   *   consistency with the CFF driver is currently not achieved because the
+   *   emboldening method differs and glyphs must be scaled down on the
+   *   Y-axis to keep outline points inside their precomputed blue zones.
+   *   The smaller the size (especially 9ppem and down), the higher the loss
+   *   of emboldening versus the CFF driver.
+   *
+   *   *ATTENTION*: This feature has been developed with linear alpha
+   *   blending and gamma correction of glyphs in mind: A rendering library
+   *   must apply linear alpha blending while compositing glyph bitmaps onto
+   *   a surface and then apply gamma correction to the glyph pixels to get
+   *   from linear space to display space (unless the display works in
+   *   linear space).  Internal testing at Adobe found that a gamma
+   *   correction value of 1.8 gives good results across a wide range of
+   *   displays with a sRGB gamma curve or a similar one.
+   *
+   *   If this is not possible, it might be better to disable stem
+   *   darkening.  Currently, this can only be done globally.
+   *
+   */
+
+
+  /**************************************************************************
+   *
+   * @property:
+   *   darkening-parameters
+   *
+   * @description:
+   *   *Experimental* *only*
+   *
+   *   See the description of the CFF driver for details.  This
+   *   implementation appropriates the
+   *   CFF_CONFIG_OPTION_DARKENING_PARAMETER_* #defines for consistency.
+   *   Note the differences described in @no-stem-darkening.
+   *
+   */
+
+
   /* */
 
 
diff --git a/src/autofit/afmodule.c b/src/autofit/afmodule.c
index 2c759da..6bb8193 100644
--- a/src/autofit/afmodule.c
+++ b/src/autofit/afmodule.c
@@ -177,6 +177,46 @@
       return error;
     }
 #endif /* AF_CONFIG_OPTION_USE_WARPER */
+    else if ( !ft_strcmp( property_name, "darkening-parameters" ) )
+    {
+      FT_Int*  darken_params = (FT_Int*)value;
+
+      FT_Int  x1 = darken_params[0];
+      FT_Int  y1 = darken_params[1];
+      FT_Int  x2 = darken_params[2];
+      FT_Int  y2 = darken_params[3];
+      FT_Int  x3 = darken_params[4];
+      FT_Int  y3 = darken_params[5];
+      FT_Int  x4 = darken_params[6];
+      FT_Int  y4 = darken_params[7];
+
+
+      if ( x1 < 0   || x2 < 0   || x3 < 0   || x4 < 0   ||
+           y1 < 0   || y2 < 0   || y3 < 0   || y4 < 0   ||
+           x1 > x2  || x2 > x3  || x3 > x4              ||
+           y1 > 500 || y2 > 500 || y3 > 500 || y4 > 500 )
+        return FT_THROW( Invalid_Argument );
+
+      module->darken_params[0] = x1;
+      module->darken_params[1] = y1;
+      module->darken_params[2] = x2;
+      module->darken_params[3] = y2;
+      module->darken_params[4] = x3;
+      module->darken_params[5] = y3;
+      module->darken_params[6] = x4;
+      module->darken_params[7] = y4;
+
+      return error;
+    }
+    else if ( !ft_strcmp( property_name, "no-stem-darkening" ) )
+    {
+      FT_Bool*  no_stem_darkening = (FT_Bool*)value;
+
+
+      module->no_stem_darkening = *no_stem_darkening;
+
+      return error;
+    }
 
     FT_TRACE0(( "af_property_set: missing property `%s'\n",
                 property_name ));
@@ -253,6 +293,33 @@
       return error;
     }
 #endif /* AF_CONFIG_OPTION_USE_WARPER */
+    else if ( !ft_strcmp( property_name, "darkening-parameters" ) )
+    {
+      FT_Int*  darken_params = module->darken_params;
+      FT_Int*  val           = (FT_Int*)value;
+
+
+      val[0] = darken_params[0];
+      val[1] = darken_params[1];
+      val[2] = darken_params[2];
+      val[3] = darken_params[3];
+      val[4] = darken_params[4];
+      val[5] = darken_params[5];
+      val[6] = darken_params[6];
+      val[7] = darken_params[7];
+
+      return error;
+    }
+    else if ( !ft_strcmp( property_name, "no-stem-darkening" ) )
+    {
+      FT_Bool   no_stem_darkening = module->no_stem_darkening;
+      FT_Bool*  val               = (FT_Bool*)value;
+
+
+      *val = no_stem_darkening;
+
+      return error;
+    }
 
     FT_TRACE0(( "af_property_get: missing property `%s'\n",
                 property_name ));
@@ -299,11 +366,21 @@
     AF_Module  module = (AF_Module)ft_module;
 
 
-    module->fallback_style = AF_STYLE_FALLBACK;
-    module->default_script = AF_SCRIPT_DEFAULT;
+    module->fallback_style    = AF_STYLE_FALLBACK;
+    module->default_script    = AF_SCRIPT_DEFAULT;
 #ifdef AF_CONFIG_OPTION_USE_WARPER
-    module->warping        = 0;
+    module->warping           = 0;
 #endif
+    module->no_stem_darkening = FALSE;
+
+    module->darken_params[0]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_X1;
+    module->darken_params[1]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y1;
+    module->darken_params[2]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_X2;
+    module->darken_params[3]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y2;
+    module->darken_params[4]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_X3;
+    module->darken_params[5]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y3;
+    module->darken_params[6]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_X4;
+    module->darken_params[7]  = CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y4;
 
     return FT_Err_Ok;
   }
diff --git a/src/autofit/afmodule.h b/src/autofit/afmodule.h
index b9c2fd8..3c61d89 100644
--- a/src/autofit/afmodule.h
+++ b/src/autofit/afmodule.h
@@ -41,6 +41,8 @@ FT_BEGIN_HEADER
 #ifdef AF_CONFIG_OPTION_USE_WARPER
     FT_Bool       warping;
 #endif
+    FT_Bool       no_stem_darkening;
+    FT_Int        darken_params[8];
 
   } AF_ModuleRec, *AF_Module;
 
-- 
2.6.2

From b2a85ad32b1f62fd186c018d681baa5adef925c6 Mon Sep 17 00:00:00 2001
From: Nikolaus Waxweiler <madigens@gmail.com>
Date: Mon, 2 Nov 2015 09:20:32 +0100
Subject: [PATCH 100/110] [autofit] Extend `AF_FaceGlobalsRec' to hold
 emboldening data.

* src/autofit/afglobal.h (AF_FaceGlobalsRec): Add fields.

* src/autofit/afglobal.c (af_face_globals_new): Initialize new
fields.
(af_face_globals_free): Reset new fields.
---
 ChangeLog              | 10 ++++++++++
 src/autofit/afglobal.c | 27 ++++++++++++++++++++-------
 src/autofit/afglobal.h | 16 ++++++++++++++++
 3 files changed, 46 insertions(+), 7 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 5286c87..697167b 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,15 @@
 2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
 
+	[autofit] Extend `AF_FaceGlobalsRec' to hold emboldening data.
+
+	* src/autofit/afglobal.h (AF_FaceGlobalsRec): Add fields.
+
+	* src/autofit/afglobal.c (af_face_globals_new): Initialize new
+	fields.
+	(af_face_globals_free): Reset new fields.
+
+2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
+
 	[autofit] Add stem-darkening properties.
 
 	Actual code follows in a later commit.
diff --git a/src/autofit/afglobal.c b/src/autofit/afglobal.c
index b071cc7..f5a3957 100644
--- a/src/autofit/afglobal.c
+++ b/src/autofit/afglobal.c
@@ -350,11 +350,17 @@
                      (FT_ULong)face->num_glyphs * sizeof ( FT_UShort ) ) )
       goto Exit;
 
-    globals->face         = face;
-    globals->glyph_count  = face->num_glyphs;
+    globals->face                      = face;
+    globals->glyph_count               = face->num_glyphs;
     /* right after the globals structure come the glyph styles */
-    globals->glyph_styles = (FT_UShort*)( globals + 1 );
-    globals->module       = module;
+    globals->glyph_styles              = (FT_UShort*)( globals + 1 );
+    globals->module                    = module;
+    globals->stem_darkening_for_ppem   = 0;
+    globals->darken_x                  = 0;
+    globals->darken_y                  = 0;
+    globals->standard_vertical_width   = 0;
+    globals->standard_horizontal_width = 0;
+    globals->scale_down_factor         = 0;
 
 #ifdef FT_CONFIG_OPTION_USE_HARFBUZZ
     globals->hb_font = hb_ft_font_create( face, NULL );
@@ -406,9 +412,16 @@
       globals->hb_font = NULL;
 #endif
 
-      globals->glyph_count  = 0;
-      globals->glyph_styles = NULL;  /* no need to free this one! */
-      globals->face         = NULL;
+      globals->glyph_count               = 0;
+      globals->stem_darkening_for_ppem   = 0;
+      globals->darken_x                  = 0;
+      globals->darken_y                  = 0;
+      globals->standard_vertical_width   = 0;
+      globals->standard_horizontal_width = 0;
+      globals->scale_down_factor         = 0;
+      /* no need to free this one! */
+      globals->glyph_styles              = NULL;
+      globals->face                      = NULL;
 
       FT_FREE( globals );
     }
diff --git a/src/autofit/afglobal.h b/src/autofit/afglobal.h
index ffb2f86..a3112de 100644
--- a/src/autofit/afglobal.h
+++ b/src/autofit/afglobal.h
@@ -117,6 +117,22 @@ FT_BEGIN_HEADER
 
     AF_StyleMetrics  metrics[AF_STYLE_MAX];
 
+    /* Compute darkening amount once per size.  Use this to check whether */
+    /* darken_{x,y} needs to be recomputed.                               */
+    FT_UShort        stem_darkening_for_ppem;
+    /* Copy from e.g. AF_LatinMetrics.axis[AF_DIMENSION_HORZ] */
+    /* to compute the darkening amount.                       */
+    FT_Pos           standard_vertical_width;
+    /* Copy from e.g. AF_LatinMetrics.axis[AF_DIMENSION_VERT] */
+    /* to compute the darkening amount.                       */
+    FT_Pos           standard_horizontal_width;
+    /* The actual amount to darken a glyph along the X axis. */
+    FT_Pos           darken_x;
+    /* The actual amount to darken a glyph along the Y axis. */
+    FT_Pos           darken_y;
+    /* Amount to scale down by to keep emboldened points */
+    /* on the Y-axis in pre-computed blue zones.         */
+    FT_Fixed         scale_down_factor;
     AF_Module        module;         /* to access global properties */
 
   } AF_FaceGlobalsRec;
-- 
2.6.2

From 37c401ac0a62b2abb0a12df87881fa3f05159582 Mon Sep 17 00:00:00 2001
From: Nikolaus Waxweiler <madigens@gmail.com>
Date: Mon, 2 Nov 2015 09:32:26 +0100
Subject: [PATCH 101/110] [autofit] Add functions to get standard widths for
 writing systems.

We need the computed standard horizontal and vertical widths for the
emboldening calculation.  This method provides a convenient way to
extract it from writing-system-specific metrics structures, which
all script definitions must implement.

* src/autofit/aftypes.h (AF_WritingSystem_GetStdWidthsFunc): New
function type.
(AF_WritingSystemClassRec): New member `style_metrics_getstdw'.
(AF_DEFINE_WRITING_SYSTEM_CLASS): Updated.

* src/autofit/afcjk.c (af_cjk_get_standard_width): New function.
(af_cjk_writing_system_class): Updated.
* src/autofit/afdummy.c	(af_dummy_writing_system_class): Updated.
* src/autofit/afindic.c (af_cjk_get_standard_width): New function.
(af_indic_writing_system_class): Updated.
* src/autofit/aflatin.c (af_latin_get_standard_width): New function.
(af_indic_writing_system_class): Updated.
* src/autofit/aflatin.c (af_latin_get_standard_width): New function.
(af_indic_writing_system_class): Updated.
---
 ChangeLog              | 24 ++++++++++++++++++++++++
 src/autofit/afcjk.c    | 18 ++++++++++++++++++
 src/autofit/afdummy.c  |  1 +
 src/autofit/afindic.c  | 18 ++++++++++++++++++
 src/autofit/aflatin.c  | 17 +++++++++++++++++
 src/autofit/aflatin2.c | 17 +++++++++++++++++
 src/autofit/aftypes.h  | 23 ++++++++++++++++-------
 7 files changed, 111 insertions(+), 7 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 697167b..c380fb5 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,29 @@
 2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
 
+	[autofit] Add functions to get standard widths for writing systems.
+
+	We need the computed standard horizontal and vertical widths for the
+	emboldening calculation.  This method provides a convenient way to
+	extract it from writing-system-specific metrics structures, which
+	all script definitions must implement.
+
+	* src/autofit/aftypes.h (AF_WritingSystem_GetStdWidthsFunc): New
+	function type.
+	(AF_WritingSystemClassRec): New member `style_metrics_getstdw'.
+	(AF_DEFINE_WRITING_SYSTEM_CLASS): Updated.
+
+	* src/autofit/afcjk.c (af_cjk_get_standard_width): New function.
+	(af_cjk_writing_system_class): Updated.
+	* src/autofit/afdummy.c	(af_dummy_writing_system_class): Updated.
+	* src/autofit/afindic.c (af_cjk_get_standard_width): New function.
+	(af_indic_writing_system_class): Updated.
+	* src/autofit/aflatin.c (af_latin_get_standard_width): New function.
+	(af_indic_writing_system_class): Updated.
+	* src/autofit/aflatin.c (af_latin_get_standard_width): New function.
+	(af_indic_writing_system_class): Updated.
+
+2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
+
 	[autofit] Extend `AF_FaceGlobalsRec' to hold emboldening data.
 
 	* src/autofit/afglobal.h (AF_FaceGlobalsRec): Add fields.
diff --git a/src/autofit/afcjk.c b/src/autofit/afcjk.c
index 0ade4be..792950d 100644
--- a/src/autofit/afcjk.c
+++ b/src/autofit/afcjk.c
@@ -688,6 +688,22 @@
   }
 
 
+  /* Extract standard_width from writing system/script specific */
+  /* metrics class.                                             */
+
+  FT_LOCAL_DEF( void )
+  af_cjk_get_standard_widths( AF_CJKMetrics  metrics,
+                              FT_Pos*        stdHW,
+                              FT_Pos*        stdVW )
+  {
+    if ( stdHW )
+      *stdHW = metrics->axis[AF_DIMENSION_VERT].standard_width;
+
+    if ( stdVW )
+      *stdVW = metrics->axis[AF_DIMENSION_HORZ].standard_width;
+  }
+
+
   /*************************************************************************/
   /*************************************************************************/
   /*****                                                               *****/
@@ -2280,6 +2296,7 @@
     (AF_WritingSystem_InitMetricsFunc) af_cjk_metrics_init,
     (AF_WritingSystem_ScaleMetricsFunc)af_cjk_metrics_scale,
     (AF_WritingSystem_DoneMetricsFunc) NULL,
+    (AF_WritingSystem_GetStdWidthsFunc)af_cjk_get_standard_widths,
 
     (AF_WritingSystem_InitHintsFunc)   af_cjk_hints_init,
     (AF_WritingSystem_ApplyHintsFunc)  af_cjk_hints_apply
@@ -2299,6 +2316,7 @@
     (AF_WritingSystem_InitMetricsFunc) NULL,
     (AF_WritingSystem_ScaleMetricsFunc)NULL,
     (AF_WritingSystem_DoneMetricsFunc) NULL,
+    (AF_WritingSystem_GetStdWidthsFunc)NULL,
 
     (AF_WritingSystem_InitHintsFunc)   NULL,
     (AF_WritingSystem_ApplyHintsFunc)  NULL
diff --git a/src/autofit/afdummy.c b/src/autofit/afdummy.c
index 18dd301..9142c78 100644
--- a/src/autofit/afdummy.c
+++ b/src/autofit/afdummy.c
@@ -65,6 +65,7 @@
     (AF_WritingSystem_InitMetricsFunc) NULL,
     (AF_WritingSystem_ScaleMetricsFunc)NULL,
     (AF_WritingSystem_DoneMetricsFunc) NULL,
+    (AF_WritingSystem_GetStdWidthsFunc)NULL,
 
     (AF_WritingSystem_InitHintsFunc)   af_dummy_hints_init,
     (AF_WritingSystem_ApplyHintsFunc)  af_dummy_hints_apply
diff --git a/src/autofit/afindic.c b/src/autofit/afindic.c
index 05b6bdd..59b14d7 100644
--- a/src/autofit/afindic.c
+++ b/src/autofit/afindic.c
@@ -89,6 +89,22 @@
   }
 
 
+  /* Extract standard_width from writing system/script specific */
+  /* metrics class.                                             */
+
+  static void
+  af_indic_get_standard_widths( AF_CJKMetrics  metrics,
+                                FT_Pos*        stdHW,
+                                FT_Pos*        stdVW )
+  {
+    if ( stdHW )
+      *stdHW = metrics->axis[AF_DIMENSION_VERT].standard_width;
+
+    if ( stdVW )
+      *stdVW = metrics->axis[AF_DIMENSION_HORZ].standard_width;
+  }
+
+
   /*************************************************************************/
   /*************************************************************************/
   /*****                                                               *****/
@@ -108,6 +124,7 @@
     (AF_WritingSystem_InitMetricsFunc) af_indic_metrics_init,
     (AF_WritingSystem_ScaleMetricsFunc)af_indic_metrics_scale,
     (AF_WritingSystem_DoneMetricsFunc) NULL,
+    (AF_WritingSystem_GetStdWidthsFunc)af_indic_get_standard_widths,
 
     (AF_WritingSystem_InitHintsFunc)   af_indic_hints_init,
     (AF_WritingSystem_ApplyHintsFunc)  af_indic_hints_apply
@@ -127,6 +144,7 @@
     (AF_WritingSystem_InitMetricsFunc) NULL,
     (AF_WritingSystem_ScaleMetricsFunc)NULL,
     (AF_WritingSystem_DoneMetricsFunc) NULL,
+    (AF_WritingSystem_GetStdWidthsFunc)NULL,
 
     (AF_WritingSystem_InitHintsFunc)   NULL,
     (AF_WritingSystem_ApplyHintsFunc)  NULL
diff --git a/src/autofit/aflatin.c b/src/autofit/aflatin.c
index 363f721..5645aaf 100644
--- a/src/autofit/aflatin.c
+++ b/src/autofit/aflatin.c
@@ -1149,6 +1149,22 @@
   }
 
 
+  /* Extract standard_width from writing system/script specific */
+  /* metrics class.                                             */
+
+  FT_LOCAL_DEF( void )
+  af_latin_get_standard_widths( AF_LatinMetrics  metrics,
+                                FT_Pos*          stdHW,
+                                FT_Pos*          stdVW )
+  {
+    if ( stdHW )
+      *stdHW = metrics->axis[AF_DIMENSION_VERT].standard_width;
+
+    if ( stdVW )
+      *stdVW = metrics->axis[AF_DIMENSION_HORZ].standard_width;
+  }
+
+
   /*************************************************************************/
   /*************************************************************************/
   /*****                                                               *****/
@@ -2944,6 +2960,7 @@
     (AF_WritingSystem_InitMetricsFunc) af_latin_metrics_init,
     (AF_WritingSystem_ScaleMetricsFunc)af_latin_metrics_scale,
     (AF_WritingSystem_DoneMetricsFunc) NULL,
+    (AF_WritingSystem_GetStdWidthsFunc)af_latin_get_standard_widths,
 
     (AF_WritingSystem_InitHintsFunc)   af_latin_hints_init,
     (AF_WritingSystem_ApplyHintsFunc)  af_latin_hints_apply
diff --git a/src/autofit/aflatin2.c b/src/autofit/aflatin2.c
index 0380ffc..2fb7d1d 100644
--- a/src/autofit/aflatin2.c
+++ b/src/autofit/aflatin2.c
@@ -693,6 +693,22 @@
   }
 
 
+  /* Extract standard_width from writing system/script specific */
+  /* metrics class.                                             */
+
+  FT_LOCAL_DEF( void )
+  af_latin2_get_standard_widths( AF_LatinMetrics  metrics,
+                                 FT_Pos*          stdHW,
+                                 FT_Pos*          stdVW )
+  {
+    if ( stdHW )
+      *stdHW = metrics->axis[AF_DIMENSION_VERT].standard_width;
+
+    if ( stdVW )
+      *stdVW = metrics->axis[AF_DIMENSION_HORZ].standard_width;
+  }
+
+
   /*************************************************************************/
   /*************************************************************************/
   /*****                                                               *****/
@@ -2392,6 +2408,7 @@
     (AF_WritingSystem_InitMetricsFunc) af_latin2_metrics_init,
     (AF_WritingSystem_ScaleMetricsFunc)af_latin2_metrics_scale,
     (AF_WritingSystem_DoneMetricsFunc) NULL,
+    (AF_WritingSystem_GetStdWidthsFunc)af_latin2_get_standard_widths,
 
     (AF_WritingSystem_InitHintsFunc)   af_latin2_hints_init,
     (AF_WritingSystem_ApplyHintsFunc)  af_latin2_hints_apply
diff --git a/src/autofit/aftypes.h b/src/autofit/aftypes.h
index 43b3800..cbe8bc2 100644
--- a/src/autofit/aftypes.h
+++ b/src/autofit/aftypes.h
@@ -211,6 +211,11 @@ extern void*  _af_debug_hints;
   typedef void
   (*AF_WritingSystem_DoneMetricsFunc)( AF_StyleMetrics  metrics );
 
+  typedef void
+  (*AF_WritingSystem_GetStdWidthsFunc)( AF_StyleMetrics  metrics,
+                                        FT_Pos*          stdHW,
+                                        FT_Pos*          stdVW );
+
 
   typedef FT_Error
   (*AF_WritingSystem_InitHintsFunc)( AF_GlyphHints    hints,
@@ -276,6 +281,7 @@ extern void*  _af_debug_hints;
     AF_WritingSystem_InitMetricsFunc   style_metrics_init;
     AF_WritingSystem_ScaleMetricsFunc  style_metrics_scale;
     AF_WritingSystem_DoneMetricsFunc   style_metrics_done;
+    AF_WritingSystem_GetStdWidthsFunc  style_metrics_getstdw;
 
     AF_WritingSystem_InitHintsFunc     style_hints_init;
     AF_WritingSystem_ApplyHintsFunc    style_hints_apply;
@@ -489,6 +495,7 @@ extern void*  _af_debug_hints;
           m_init,                                        \
           m_scale,                                       \
           m_done,                                        \
+          m_stdw,                                        \
           h_init,                                        \
           h_apply )                                      \
   FT_CALLBACK_TABLE_DEF                                  \
@@ -501,6 +508,7 @@ extern void*  _af_debug_hints;
     m_init,                                              \
     m_scale,                                             \
     m_done,                                              \
+    m_stdw,                                              \
                                                          \
     h_init,                                              \
     h_apply                                              \
@@ -570,16 +578,17 @@ extern void*  _af_debug_hints;
   FT_LOCAL_DEF( void )                                                    \
   FT_Init_Class_ ## writing_system_class( AF_WritingSystemClassRec*  ac ) \
   {                                                                       \
-    ac->writing_system      = system;                                     \
+    ac->writing_system        = system;                                   \
                                                                           \
-    ac->style_metrics_size  = m_size;                                     \
+    ac->style_metrics_size    = m_size;                                   \
                                                                           \
-    ac->style_metrics_init  = m_init;                                     \
-    ac->style_metrics_scale = m_scale;                                    \
-    ac->style_metrics_done  = m_done;                                     \
+    ac->style_metrics_init    = m_init;                                   \
+    ac->style_metrics_scale   = m_scale;                                  \
+    ac->style_metrics_done    = m_done;                                   \
+    ac->style_metrics_getstdw = m_stdw;                                   \
                                                                           \
-    ac->style_hints_init    = h_init;                                     \
-    ac->style_hints_apply   = h_apply;                                    \
+    ac->style_hints_init      = h_init;                                   \
+    ac->style_hints_apply     = h_apply;                                  \
   }
 
 
-- 
2.6.2

From bf2ba9e3d43ae4dacbdd4e1ab5648cbbb81cb885 Mon Sep 17 00:00:00 2001
From: Nikolaus Waxweiler <madigens@gmail.com>
Date: Mon, 2 Nov 2015 13:12:34 +0100
Subject: [PATCH 102/110] [autofit] Implement darkening computation function.

This is a crude adaption of the original `cf2_computeDarkening'
function.

* src/autofit/afloader.c (af_intToFixed, af_fixedToInt,
af_floatToFixed): New macros, taken from `cf2fixed.h'.
(af_loader_compute_darkening): New function.
* src/autofit/afloader.h: Updated.
---
 ChangeLog              |  12 +++++
 src/autofit/afloader.c | 137 +++++++++++++++++++++++++++++++++++++++++++++++++
 src/autofit/afloader.h |   5 ++
 3 files changed, 154 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index c380fb5..e9aaefe 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,17 @@
 2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
 
+	[autofit] Implement darkening computation function.
+
+	This is a crude adaption of the original `cf2_computeDarkening'
+	function.
+
+	* src/autofit/afloader.c (af_intToFixed, af_fixedToInt,
+	af_floatToFixed): New macros, taken from `cf2fixed.h'.
+	(af_loader_compute_darkening): New function.
+	* src/autofit/afloader.h: Updated.
+
+2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
+
 	[autofit] Add functions to get standard widths for writing systems.
 
 	We need the computed standard horizontal and vertical widths for the
diff --git a/src/autofit/afloader.c b/src/autofit/afloader.c
index 722ffd3..615743e 100644
--- a/src/autofit/afloader.c
+++ b/src/autofit/afloader.c
@@ -405,4 +405,141 @@
   }
 
 
+  /*
+   * Compute amount of font units the face should be emboldened by, in
+   * analogy to the CFF driver's `cf2_computeDarkening' function.  See there
+   * for details of the algorithm.
+   *
+   * XXX: Currently a crude adaption of the original algorithm.  Do better?
+   */
+#define af_intToFixed( i ) \
+          ( (FT_Fixed)( (FT_UInt32)(i) << 16 ) )
+#define af_fixedToInt( x ) \
+          ( (FT_Short)( ( (FT_UInt32)(x) + 0x8000U ) >> 16 ) )
+#define af_floatToFixed( f ) \
+          ( (FT_Fixed)( (f) * 65536.0 + 0.5 ) )
+
+  FT_LOCAL_DEF( FT_Int32 )
+  af_loader_compute_darkening( AF_Loader  loader,
+                               FT_Face    face,
+                               FT_Pos     standard_width )
+  {
+    AF_Module  module = loader->globals->module;
+
+    FT_UShort  units_per_EM;
+    FT_Fixed   ppem, em_ratio;
+    FT_Fixed   stem_width, stem_width_per_1000, scaled_stem, darken_amount;
+    FT_Int     log_base_2;
+    FT_Int     x1, y1, x2, y2, x3, y3, x4, y4;
+
+
+    ppem         = FT_MAX( af_intToFixed( 4 ),
+                           af_intToFixed( face->size->metrics.x_ppem ) );
+    units_per_EM = face->units_per_EM;
+
+    em_ratio = FT_DivFix( af_intToFixed( 1000 ),
+                          af_intToFixed ( units_per_EM ) );
+    if ( em_ratio < af_floatToFixed( .01 ) )
+    {
+      /* If something goes wrong, don't embolden. */
+      return 0;
+    }
+
+    x1 = module->darken_params[0];
+    y1 = module->darken_params[1];
+    x2 = module->darken_params[2];
+    y2 = module->darken_params[3];
+    x3 = module->darken_params[4];
+    y3 = module->darken_params[5];
+    x4 = module->darken_params[6];
+    y4 = module->darken_params[7];
+
+    if ( standard_width <= 0 )
+    {
+      stem_width          = af_intToFixed( 75 ); /* taken from cf2font.c */
+      stem_width_per_1000 = stem_width;
+    }
+    else
+    {
+      stem_width          = af_intToFixed( standard_width );
+      stem_width_per_1000 = FT_MulFix( stem_width, em_ratio );
+    }
+
+    log_base_2 = FT_MSB( (FT_UInt32)stem_width_per_1000 ) +
+                 FT_MSB( (FT_UInt32)ppem );
+
+    if ( log_base_2 >= 46 )
+    {
+      /* possible overflow */
+      scaled_stem = af_intToFixed( x4 );
+    }
+    else
+      scaled_stem = FT_MulFix( stem_width_per_1000, ppem );
+
+    /* now apply the darkening parameters */
+    if ( scaled_stem < af_intToFixed( x1 ) )
+      darken_amount = FT_DivFix( af_intToFixed( y1 ), ppem );
+
+    else if ( scaled_stem < af_intToFixed( x2 ) )
+    {
+      FT_Int  xdelta = x2 - x1;
+      FT_Int  ydelta = y2 - y1;
+      FT_Int  x      = stem_width_per_1000 -
+                       FT_DivFix( af_intToFixed( x1 ), ppem );
+
+
+      if ( !xdelta )
+        goto Try_x3;
+
+      darken_amount = FT_MulDiv( x, ydelta, xdelta ) +
+                      FT_DivFix( af_intToFixed( y1 ), ppem );
+    }
+
+    else if ( scaled_stem < af_intToFixed( x3 ) )
+    {
+    Try_x3:
+      {
+        FT_Int  xdelta = x3 - x2;
+        FT_Int  ydelta = y3 - y2;
+        FT_Int  x      = stem_width_per_1000 -
+                         FT_DivFix( af_intToFixed( x2 ), ppem );
+
+
+        if ( !xdelta )
+          goto Try_x4;
+
+        darken_amount = FT_MulDiv( x, ydelta, xdelta ) +
+                        FT_DivFix( af_intToFixed( y2 ), ppem );
+      }
+    }
+
+    else if ( scaled_stem < af_intToFixed( x4 ) )
+    {
+    Try_x4:
+      {
+        FT_Int  xdelta = x4 - x3;
+        FT_Int  ydelta = y4 - y3;
+        FT_Int  x      = stem_width_per_1000 -
+                         FT_DivFix( af_intToFixed( x3 ), ppem );
+
+
+        if ( !xdelta )
+          goto Use_y4;
+
+        darken_amount = FT_MulDiv( x, ydelta, xdelta ) +
+                        FT_DivFix( af_intToFixed( y3 ), ppem );
+      }
+    }
+
+    else
+    {
+    Use_y4:
+      darken_amount = FT_DivFix( af_intToFixed( y4 ), ppem );
+    }
+
+    /* Convert darken_amount from per 1000 em to true character space. */
+    return af_fixedToInt( FT_DivFix( darken_amount, em_ratio ) );
+  }
+
+
 /* END */
diff --git a/src/autofit/afloader.h b/src/autofit/afloader.h
index 37cfd14..4c4affc 100644
--- a/src/autofit/afloader.h
+++ b/src/autofit/afloader.h
@@ -75,6 +75,11 @@ FT_BEGIN_HEADER
                         FT_UInt    gindex,
                         FT_Int32   load_flags );
 
+  FT_LOCAL_DEF( FT_Int32 )
+  af_loader_compute_darkening( AF_Loader  loader,
+                               FT_Face    face,
+                               FT_Pos     standard_width );
+
 /* */
 
 
-- 
2.6.2

From b6fd5bc06c4434a832328c4682544c436484265e Mon Sep 17 00:00:00 2001
From: Nikolaus Waxweiler <madigens@gmail.com>
Date: Tue, 3 Nov 2015 10:40:58 +0100
Subject: [PATCH 103/110] * src/autofit/afloader.c (af_loader_load_g):
 Implement emboldening.

---
 ChangeLog              |   4 ++
 src/autofit/afloader.c | 143 ++++++++++++++++++++++++++++++++++++++++++++++---
 2 files changed, 140 insertions(+), 7 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index e9aaefe..80b0b2f 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,9 @@
 2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
 
+	* src/autofit/afloader.c (af_loader_load_g): Implement emboldening.
+
+2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
+
 	[autofit] Implement darkening computation function.
 
 	This is a crude adaption of the original `cf2_computeDarkening'
diff --git a/src/autofit/afloader.c b/src/autofit/afloader.c
index 615743e..f37530d 100644
--- a/src/autofit/afloader.c
+++ b/src/autofit/afloader.c
@@ -76,6 +76,14 @@
   }
 
 
+#define af_intToFixed( i ) \
+          ( (FT_Fixed)( (FT_UInt32)(i) << 16 ) )
+#define af_fixedToInt( x ) \
+          ( (FT_Short)( ( (FT_UInt32)(x) + 0x8000U ) >> 16 ) )
+#define af_floatToFixed( f ) \
+          ( (FT_Fixed)( (f) * 65536.0 + 0.5 ) )
+
+
   /* Do the main work of `af_loader_load_glyph'.  Note that we never   */
   /* have to deal with composite glyphs as those get loaded into       */
   /* FT_GLYPH_FORMAT_OUTLINE by the recursed `FT_Load_Glyph' function. */
@@ -88,6 +96,8 @@
                     FT_UInt    glyph_index,
                     FT_Int32   load_flags )
   {
+    AF_Module  module = loader->globals->module;
+
     FT_Error          error;
     FT_Face           face     = loader->face;
     AF_StyleMetrics   metrics  = loader->metrics;
@@ -103,6 +113,132 @@
     if ( error )
       goto Exit;
 
+    /*
+     * Apply stem darkening (emboldening) here before hints are applied to
+     * the outline.  Glyphs are scaled down proportionally to the
+     * emboldening so that curve points don't fall outside their precomputed
+     * blue zones.
+     *
+     * Any emboldening done by the font driver (e.g., the CFF driver)
+     * doesn't reach here because the autohinter loads the unprocessed
+     * glyphs in font units for analysis (functions `af_*_metrics_init_*')
+     * and then above to prepare it for the rasterizers by itself,
+     * independently of the font driver.  So emboldening must be done here,
+     * within the autohinter.
+     *
+     * All glyphs to be autohinted pass through here one by one.  The
+     * standard widths can therefore change from one glyph to the next,
+     * depending on what script a glyph is assigned to (each script has its
+     * own set of standard widths and other metrics).  The darkening amount
+     * must therefore be recomputed for each size and
+     * `standard_{vertical,horizontal}_width' change.
+     */
+    if ( !module->no_stem_darkening )
+    {
+      AF_FaceGlobals         globals = loader->globals;
+      AF_WritingSystemClass  writing_system_class;
+
+      FT_Pos  stdVW = 0;
+      FT_Pos  stdHW = 0;
+
+      FT_Bool  size_changed = face->size->metrics.x_ppem
+                                != globals->stem_darkening_for_ppem;
+
+      FT_Fixed  em_size  = af_intToFixed( face->units_per_EM );
+      FT_Fixed  em_ratio = FT_DivFix( af_intToFixed( 1000 ), em_size );
+
+      FT_Matrix  scale_down_matrix = { 0x10000L, 0, 0, 0x10000L };
+
+
+      /* Skip stem darkening for broken fonts. */
+      if ( !face->units_per_EM )
+        goto After_Emboldening;
+
+      /*
+       * We depend on the writing system (script analyzers) to supply
+       * standard widths for the script of the glyph we are looking at.  If
+       * it can't deliver, stem darkening is effectively disabled.
+       */
+      writing_system_class =
+        AF_WRITING_SYSTEM_CLASSES_GET[metrics->style_class->writing_system];
+
+      if ( writing_system_class->style_metrics_getstdw )
+        writing_system_class->style_metrics_getstdw( metrics,
+                                                     &stdHW,
+                                                     &stdVW );
+      else
+        goto After_Emboldening;
+
+
+      if ( size_changed                                               ||
+           ( stdVW > 0 && stdVW != globals->standard_vertical_width ) )
+      {
+        FT_Fixed  darken_by_font_units_x, darken_x;
+
+
+        darken_by_font_units_x =
+          af_intToFixed( af_loader_compute_darkening( loader,
+                                                      face,
+                                                      stdVW ) );
+        darken_x = FT_DivFix( FT_MulFix( darken_by_font_units_x,
+                                         face->size->metrics.x_scale ),
+                              em_ratio );
+
+        globals->standard_vertical_width = stdVW;
+        globals->stem_darkening_for_ppem = face->size->metrics.x_ppem;
+        globals->darken_x                = af_fixedToInt( darken_x );
+      }
+
+      if ( size_changed                                                 ||
+           ( stdHW > 0 && stdHW != globals->standard_horizontal_width ) )
+      {
+        FT_Fixed  darken_by_font_units_y, darken_y;
+
+
+        darken_by_font_units_y =
+          af_intToFixed( af_loader_compute_darkening( loader,
+                                                      face,
+                                                      stdHW ) );
+        darken_y = FT_DivFix( FT_MulFix( darken_by_font_units_y,
+                                         face->size->metrics.y_scale ),
+                              em_ratio );
+
+        globals->standard_horizontal_width = stdHW;
+        globals->stem_darkening_for_ppem   = face->size->metrics.x_ppem;
+        globals->darken_y                  = af_fixedToInt( darken_y );
+
+        /*
+         * Scale outlines down on the Y-axis to keep them inside their blue
+         * zones.  The stronger the emboldening, the stronger the
+         * downscaling (plus heuristical padding to prevent outlines still
+         * falling out their zones due to rounding).
+         *
+         * Reason: `FT_Outline_Embolden' works by shifting the rightmost
+         * points of stems farther to the right, and topmost points farther
+         * up.  This positions points on the Y-axis outside their
+         * pre-computed blue zones and leads to distortion when applying the
+         * hints in the code further below.  Code outside this emboldening
+         * block doesn't know we are presenting it with modified outlines
+         * the analyzer didn't see!
+         *
+         * An unfortunate side effect of downscaling is that the emboldening
+         * effect is slightly decreased.  The loss becomes more pronounced
+         * versus the CFF driver at smaller sizes, e.g., at 9ppem and below.
+         */
+        globals->scale_down_factor =
+          FT_DivFix( em_size - ( darken_by_font_units_y + af_intToFixed( 8 ) ),
+                     em_size );
+      }
+
+      FT_Outline_EmboldenXY( &slot->outline,
+                             globals->darken_x,
+                             globals->darken_y );
+
+      scale_down_matrix.yy = globals->scale_down_factor;
+      FT_Outline_Transform( &slot->outline, &scale_down_matrix );
+    }
+
+  After_Emboldening:
     loader->transformed = internal->glyph_transformed;
     if ( loader->transformed )
     {
@@ -412,13 +548,6 @@
    *
    * XXX: Currently a crude adaption of the original algorithm.  Do better?
    */
-#define af_intToFixed( i ) \
-          ( (FT_Fixed)( (FT_UInt32)(i) << 16 ) )
-#define af_fixedToInt( x ) \
-          ( (FT_Short)( ( (FT_UInt32)(x) + 0x8000U ) >> 16 ) )
-#define af_floatToFixed( f ) \
-          ( (FT_Fixed)( (f) * 65536.0 + 0.5 ) )
-
   FT_LOCAL_DEF( FT_Int32 )
   af_loader_compute_darkening( AF_Loader  loader,
                                FT_Face    face,
-- 
2.6.2

From aae8808780d4b73cf51f80ba40c4b7b854ca1487 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Tue, 3 Nov 2015 17:30:36 +0100
Subject: [PATCH 104/110] [sfnt] Protect against zero-size bitmaps (#46345).

* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap): Check
`glyph_size'.
---
 ChangeLog         | 7 +++++++
 src/sfnt/ttsbit.c | 3 ++-
 2 files changed, 9 insertions(+), 1 deletion(-)

diff --git a/ChangeLog b/ChangeLog
index 80b0b2f..fb612da 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-11-03  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Protect against zero-size bitmaps (#46345).
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bitmap): Check
+	`glyph_size'.
+
 2015-11-02  Nikolaus Waxweiler  <madigens@gmail.com>
 
 	* src/autofit/afloader.c (af_loader_load_g): Implement emboldening.
diff --git a/src/sfnt/ttsbit.c b/src/sfnt/ttsbit.c
index c0540f3..acc18f0 100644
--- a/src/sfnt/ttsbit.c
+++ b/src/sfnt/ttsbit.c
@@ -1025,7 +1025,8 @@
 
 
     /* seek into the EBDT table now */
-    if ( glyph_start + glyph_size > decoder->ebdt_size )
+    if ( !glyph_size                                   ||
+         glyph_start + glyph_size > decoder->ebdt_size )
     {
       error = FT_THROW( Invalid_Argument );
       goto Exit;
-- 
2.6.2

From 040edaf5fb6eea9d6b784a187e9880a8e6348fff Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 4 Nov 2015 07:35:51 +0100
Subject: [PATCH 105/110] [truetype] Better tracing of composite glyphs.

* src/truetype/ttgload.c (TT_Load_Composite_Glyph,
load_truetype_glyph): Implement it.
---
 ChangeLog              | 7 +++++++
 src/truetype/ttgload.c | 6 ++++++
 2 files changed, 13 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index fb612da..8c39fbf 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-11-04  Werner Lemberg  <wl@gnu.org>
+
+	[truetype] Better tracing of composite glyphs.
+
+	* src/truetype/ttgload.c (TT_Load_Composite_Glyph,
+	load_truetype_glyph): Implement it.
+
 2015-11-03  Werner Lemberg  <wl@gnu.org>
 
 	[sfnt] Protect against zero-size bitmaps (#46345).
diff --git a/src/truetype/ttgload.c b/src/truetype/ttgload.c
index a792ad4..93647de 100644
--- a/src/truetype/ttgload.c
+++ b/src/truetype/ttgload.c
@@ -659,6 +659,7 @@
     } while ( subglyph->flags & MORE_COMPONENTS );
 
     gloader->current.num_subglyphs = num_subglyphs;
+    FT_TRACE5(( "  %d components\n", num_subglyphs ));
 
 #ifdef TT_USE_BYTECODE_INTERPRETER
 
@@ -1395,6 +1396,11 @@
 #endif
 
 
+#ifdef FT_DEBUG_LEVEL_TRACE
+    if ( recurse_count )
+      FT_TRACE5(( "  nesting level: %d\n", recurse_count ));
+#endif
+
     /* some fonts have an incorrect value of `maxComponentDepth', */
     /* thus we allow depth 1 to catch the majority of them        */
     if ( recurse_count > 1                                   &&
-- 
2.6.2

From 758d55e522eb426dad2f15adc1d945f7896d7b29 Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Wed, 4 Nov 2015 11:44:47 +0100
Subject: [PATCH 106/110] [truetype] Catch infinite recursion in subglyphs
 (#46372).

* include/freetype/internal/tttypes.h (TT_LoaderRec): New field
`composites'.

* src/truetype/ttgload.c: Include FT_LIST_H.
(load_truetype_glyph): Add composite subglyph index to a list;
abort if index is already in list.
(tt_loader_init): Updated.
(tt_loader_done): New function.
(TT_Load_Glyph): Call `tt_loader_done'.
---
 ChangeLog                           | 14 +++++++++++++
 include/freetype/internal/tttypes.h |  3 +++
 src/truetype/ttgload.c              | 40 +++++++++++++++++++++++++++++++++++--
 3 files changed, 55 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 8c39fbf..558a669 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,5 +1,19 @@
 2015-11-04  Werner Lemberg  <wl@gnu.org>
 
+	[truetype] Catch infinite recursion in subglyphs (#46372).
+
+	* include/freetype/internal/tttypes.h (TT_LoaderRec): New field
+	`composites'.
+
+	* src/truetype/ttgload.c: Include FT_LIST_H.
+	(load_truetype_glyph): Add composite subglyph index to a list;
+	abort if index is already in list.
+	(tt_loader_init): Updated.
+	(tt_loader_done): New function.
+	(TT_Load_Glyph): Call `tt_loader_done'.
+
+2015-11-04  Werner Lemberg  <wl@gnu.org>
+
 	[truetype] Better tracing of composite glyphs.
 
 	* src/truetype/ttgload.c (TT_Load_Composite_Glyph,
diff --git a/include/freetype/internal/tttypes.h b/include/freetype/internal/tttypes.h
index 1507a7c..000c5a8 100644
--- a/include/freetype/internal/tttypes.h
+++ b/include/freetype/internal/tttypes.h
@@ -1515,6 +1515,9 @@ FT_BEGIN_HEADER
     FT_Byte*         cursor;
     FT_Byte*         limit;
 
+    /* since version 2.6.2 */
+    FT_ListRec       composites;
+
   } TT_LoaderRec;
 
 
diff --git a/src/truetype/ttgload.c b/src/truetype/ttgload.c
index 93647de..9a8b458 100644
--- a/src/truetype/ttgload.c
+++ b/src/truetype/ttgload.c
@@ -24,6 +24,7 @@
 #include FT_TRUETYPE_TAGS_H
 #include FT_OUTLINE_H
 #include FT_TRUETYPE_DRIVER_H
+#include FT_LIST_H
 
 #include "ttgload.h"
 #include "ttpload.h"
@@ -1633,11 +1634,32 @@
     /* otherwise, load a composite! */
     else if ( loader->n_contours == -1 )
     {
+      FT_Memory  memory = face->root.memory;
+
       FT_UInt   start_point;
       FT_UInt   start_contour;
       FT_ULong  ins_pos;  /* position of composite instructions, if any */
 
 
+      /* check whether we already have a composite glyph with this index */
+      if ( FT_List_Find( &loader->composites, (void*)glyph_index ) )
+      {
+        FT_TRACE1(( "TT_Load_Composite_Glyph:"
+                    " infinite recursion detected\n" ));
+        error = FT_THROW( Invalid_Composite );
+        goto Exit;
+      }
+      else
+      {
+        FT_ListNode  node;
+
+
+        if ( FT_NEW( node ) )
+          goto Exit;
+        node->data = (void*)glyph_index;
+        FT_List_Add( &loader->composites, node );
+      }
+
       start_point   = (FT_UInt)gloader->base.outline.n_points;
       start_contour = (FT_UInt)gloader->base.outline.n_contours;
 
@@ -1665,8 +1687,6 @@
         char*       tags     = NULL;
         short*      contours = NULL;
 
-        FT_Memory  memory = face->root.memory;
-
 
         limit = (short)gloader->current.num_subglyphs;
 
@@ -2399,10 +2419,23 @@
     loader->glyph  = (FT_GlyphSlot)glyph;
     loader->stream = stream;
 
+    loader->composites.head = NULL;
+    loader->composites.tail = NULL;
+
     return FT_Err_Ok;
   }
 
 
+  static void
+  tt_loader_done( TT_Loader  loader )
+  {
+    FT_List_Finalize( &loader->composites,
+                      NULL,
+                      loader->face->root.memory,
+                      NULL );
+  }
+
+
   /*************************************************************************/
   /*                                                                       */
   /* <Function>                                                            */
@@ -2459,6 +2492,7 @@
           /* for the bbox we need the header only */
           (void)tt_loader_init( &loader, size, glyph, load_flags, TRUE );
           (void)load_truetype_glyph( &loader, glyph_index, 0, TRUE );
+          tt_loader_done( &loader );
           glyph->linearHoriAdvance = loader.linear;
           glyph->linearVertAdvance = loader.vadvance;
 
@@ -2554,6 +2588,8 @@
       error = compute_glyph_metrics( &loader, glyph_index );
     }
 
+    tt_loader_done( &loader );
+
     /* Set the `high precision' bit flag.                           */
     /* This is _critical_ to get correct output for monochrome      */
     /* TrueType glyphs at all sizes using the bytecode interpreter. */
-- 
2.6.2

From 0f0a6bb8aaae07c4105ac4d6ee26fd8eda946b3e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Thu, 5 Nov 2015 13:48:11 +0100
Subject: [PATCH 107/110] [sfnt] Ignore embedded bitmaps with zero size
 (#46379).

* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bit_aligned): Implement
it.
---
 ChangeLog         | 7 +++++++
 src/sfnt/ttsbit.c | 6 ++++++
 2 files changed, 13 insertions(+)

diff --git a/ChangeLog b/ChangeLog
index 558a669..cc8ba89 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,10 @@
+2015-11-05  Werner Lemberg  <wl@gnu.org>
+
+	[sfnt] Ignore embedded bitmaps with zero size (#46379).
+
+	* src/sfnt/ttsbit.c (tt_sbit_decoder_load_bit_aligned): Implement
+	it.
+
 2015-11-04  Werner Lemberg  <wl@gnu.org>
 
 	[truetype] Catch infinite recursion in subglyphs (#46372).
diff --git a/src/sfnt/ttsbit.c b/src/sfnt/ttsbit.c
index acc18f0..62bce3c 100644
--- a/src/sfnt/ttsbit.c
+++ b/src/sfnt/ttsbit.c
@@ -808,6 +808,12 @@
       goto Exit;
     }
 
+    if ( !line_bits || !height )
+    {
+      /* nothing to do */
+      goto Exit;
+    }
+
     /* now do the blit */
 
     /* adjust `line' to point to the first byte of the bitmap */
-- 
2.6.2

From 7363414b9d77eff0fb4d22645cda8e2a0606d66e Mon Sep 17 00:00:00 2001
From: Werner Lemberg <wl@gnu.org>
Date: Sat, 7 Nov 2015 06:32:46 +0100
Subject: [PATCH 108/110] [ftfuzzer] Add copyright notices; do some formatting.

---
 src/tools/ftfuzzer/README       | 59 ++++++++++++++++++++++++++---------------
 src/tools/ftfuzzer/ftfuzzer.cc  | 14 ++++++++++
 src/tools/ftfuzzer/ftmutator.cc | 15 ++++++++++-
 src/tools/ftfuzzer/runinput.cc  | 16 ++++++++++-
 4 files changed, 81 insertions(+), 23 deletions(-)

diff --git a/src/tools/ftfuzzer/README b/src/tools/ftfuzzer/README
index f827d5e..b781237 100644
--- a/src/tools/ftfuzzer/README
+++ b/src/tools/ftfuzzer/README
@@ -5,22 +5,25 @@ ftfuzzer
 ftfuzzer.cc
 -----------
 
-This file contains a target function for FreeType fuzzing.  It can be used
-with libFuzzer (http://llvm.org/docs/LibFuzzer.html) or potentially any
-other similar fuzzer.
+This file contains a target function  for FreeType fuzzing.  It can be
+used    with   libFuzzer    (http://llvm.org/docs/LibFuzzer.html)   or
+potentially any other similar fuzzer.
 
 Usage:
 
-  1. Build `libfreetype.a' and `ftfuzzer.cc' using the most recent clang
-     compiler with these flags:
+  1. Build  `libfreetype.a' and  `ftfuzzer.cc' using  the most  recent
+     clang compiler with these flags:
 
-       -fsanitize-coverage=edge,8bit-counters # for fuzzer coverage feedback
-       -fsanitize=address,signed-integer-overflow,shift  # for bug checking
+       # for fuzzer coverage feedback
+       -fsanitize-coverage=edge,8bit-counters
+       # for bug checking
+       -fsanitize=address,signed-integer-overflow,shift
 
-     You also need the header files from `libarchive' for handling tar files
-     (see `ftmutator.cc' below for more).
+     You  also need  the header  files from  the `libarchive'  library
+     (http://www.libarchive.org/)  for handling  tar  files (see  file
+     `ftmutator.cc' below for more).
 
-  2. Link with `libFuzzer' (it contains main()) and `libarchive'.
+  2. Link with `libFuzzer' (it contains `main') and `libarchive'.
 
   3. Run the fuzzer on some test corpus.
 
@@ -37,15 +40,15 @@ Check the bot configuration for the most current settings.
 ftmutator.cc
 ------------
 
-FreeType has the ability to `attach' auxiliary files to a font file,
-providing additional information.  The main usage is to load AFM files for
-PostScript Type 1 fonts.
+FreeType has the  ability to `attach' auxiliary files to  a font file,
+providing additional information.  The main usage is to load AFM files
+for PostScript Type 1 fonts.
 
-However, libFuzzer currently only supports mutation of a single input file. 
-For this reason, `ftmutator.cc' contains a custom fuzzer mutator that uses
-an uncompressed tar file archive as the input.  The first file in such a
-tarball gets opened by FreeType as a font, all other files are treated as
-input for `FT_Attach_Stream'.
+However, libFuzzer currently only supports  mutation of a single input
+file.   For  this  reason,  `ftmutator.cc' contains  a  custom  fuzzer
+mutator that uses an uncompressed tar  file archive as the input.  The
+first file in  such a tarball gets  opened by FreeType as  a font, all
+other files are treated as input for `FT_Attach_Stream'.
 
 Compilation is similar to `ftfuzzer.c'.
 
@@ -53,8 +56,22 @@ Compilation is similar to `ftfuzzer.c'.
 runinput.cc
 -----------
 
-To run the target function on a set of input files, this file contains a
-convenience main() function.  Link it with `ftfuzzer.cc', `libfreetype.a',
-and `libarchive' and run like
+To run the target function on a set of input files, this file contains
+a   convenience  `main'   function.   Link   it  with   `ftfuzzer.cc',
+`libfreetype.a', and `libarchive' and run like
 
   ./a.out my_tests_inputs/*
+
+----------------------------------------------------------------------
+
+Copyright 2015 by
+David Turner, Robert Wilhelm, and Werner Lemberg.
+
+This  file is  part of  the FreeType  project, and  may only  be used,
+modified,  and distributed  under the  terms of  the  FreeType project
+license,  LICENSE.TXT.  By  continuing to  use, modify,  or distribute
+this file you  indicate that you have read  the license and understand
+and accept it fully.
+
+
+--- end of README ---
diff --git a/src/tools/ftfuzzer/ftfuzzer.cc b/src/tools/ftfuzzer/ftfuzzer.cc
index a232c68..b33ed22 100644
--- a/src/tools/ftfuzzer/ftfuzzer.cc
+++ b/src/tools/ftfuzzer/ftfuzzer.cc
@@ -1,3 +1,17 @@
+// ftfuzzer.cc
+//
+//   A fuzzing function to test FreeType with libFuzzer.
+//
+// Copyright 2015 by
+// David Turner, Robert Wilhelm, and Werner Lemberg.
+//
+// This file is part of the FreeType project, and may only be used,
+// modified, and distributed under the terms of the FreeType project
+// license, LICENSE.TXT.  By continuing to use, modify, or distribute
+// this file you indicate that you have read the license and
+// understand and accept it fully.
+
+
 // we use `unique_ptr', `decltype', and other gimmicks defined since C++11
 #if __cplusplus < 201103L
 #  error "a C++11 compiler is needed"
diff --git a/src/tools/ftfuzzer/ftmutator.cc b/src/tools/ftfuzzer/ftmutator.cc
index 1223ba2..a7a4e08 100644
--- a/src/tools/ftfuzzer/ftmutator.cc
+++ b/src/tools/ftfuzzer/ftmutator.cc
@@ -1,11 +1,24 @@
-// A custom fuzzer mutator for FreeType.
+// ftmutator.cc
 //
+//   A custom fuzzer mutator to test for FreeType with libFuzzer.
+//
+// Copyright 2015 by
+// David Turner, Robert Wilhelm, and Werner Lemberg.
+//
+// This file is part of the FreeType project, and may only be used,
+// modified, and distributed under the terms of the FreeType project
+// license, LICENSE.TXT.  By continuing to use, modify, or distribute
+// this file you indicate that you have read the license and
+// understand and accept it fully.
+
+
 // Since `tar' is not a valid format for input to FreeType, treat any input
 // that looks like `tar' as multiple files and mutate them separately.
 //
 // In the future, a variation of this may be used to guide mutation on a
 // logically higher level.
 
+
 // we use `unique_ptr', `decltype', and other gimmicks defined since C++11
 #if __cplusplus < 201103L
 #  error "a C++11 compiler is needed"
diff --git a/src/tools/ftfuzzer/runinput.cc b/src/tools/ftfuzzer/runinput.cc
index 9de6fb6..d46e9e5 100644
--- a/src/tools/ftfuzzer/runinput.cc
+++ b/src/tools/ftfuzzer/runinput.cc
@@ -1,3 +1,17 @@
+// runinput.cc
+//
+//   A `main' function for `ftfuzzer.cc'.
+//
+// Copyright 2015 by
+// David Turner, Robert Wilhelm, and Werner Lemberg.
+//
+// This file is part of the FreeType project, and may only be used,
+// modified, and distributed under the terms of the FreeType project
+// license, LICENSE.TXT.  By continuing to use, modify, or distribute
+// this file you indicate that you have read the license and
+// understand and accept it fully.
+
+
 #include <assert.h>
 #include <stdio.h>
 #include <string.h>
@@ -41,4 +55,4 @@
   }
 
 
-/* END */
+// END
-- 
2.6.2

From be32b168ac42e670e1a8c5c614cce4c3f8232829 Mon Sep 17 00:00:00 2001
From: Philipp Knechtges <philipp-dev@knechtges.com>
Date: Sun, 8 Nov 2015 08:37:51 +0100
Subject: [PATCH 109/110] [autofit] Don't distort (latin) glyphs too much
 (#46195).

* src/autofit/aflatin.h (AF_LatinBlueRec): Add `ascender' and
`descender' fields.

* src/autofit/aflatin.c (af_latin_metrics_init_blues): Collect
ascender and descender data for blue zones.
(af_latin_metrics_scale_dim): Reject vertical scaling values that
change the result by more than two pixels.
---
 ChangeLog             | 12 +++++++++
 src/autofit/aflatin.c | 75 ++++++++++++++++++++++++++++++++++++++++++---------
 src/autofit/aflatin.h |  2 ++
 3 files changed, 77 insertions(+), 12 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index cc8ba89..28cec3e 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,3 +1,15 @@
+2015-11-06  Philipp Knechtges  <philipp-dev@knechtges.com>
+
+	[autofit] Don't distort (latin) glyphs too much (#46195).
+
+	* src/autofit/aflatin.h (AF_LatinBlueRec): Add `ascender' and
+	`descender' fields.
+
+	* src/autofit/aflatin.c (af_latin_metrics_init_blues): Collect
+	ascender and descender data for blue zones.
+	(af_latin_metrics_scale_dim): Reject vertical scaling values that
+	change the result by more than two pixels.
+
 2015-11-05  Werner Lemberg  <wl@gnu.org>
 
 	[sfnt] Ignore embedded bitmaps with zero size (#46379).
diff --git a/src/autofit/aflatin.c b/src/autofit/aflatin.c
index 5645aaf..53851e7 100644
--- a/src/autofit/aflatin.c
+++ b/src/autofit/aflatin.c
@@ -293,6 +293,8 @@
       const char*  p = &af_blue_strings[bs->string];
       FT_Pos*      blue_ref;
       FT_Pos*      blue_shoot;
+      FT_Pos       ascender;
+      FT_Pos       descender;
 
 
 #ifdef FT_DEBUG_LEVEL_TRACE
@@ -344,6 +346,8 @@
 
       num_flats  = 0;
       num_rounds = 0;
+      ascender   = 0;
+      descender  = 0;
 
       while ( *p )
       {
@@ -405,20 +409,30 @@
             if ( AF_LATIN_IS_TOP_BLUE( bs ) )
             {
               for ( pp = first; pp <= last; pp++ )
+              {
                 if ( best_point < 0 || points[pp].y > best_y )
                 {
                   best_point = pp;
                   best_y     = points[pp].y;
+                  ascender   = FT_MAX( ascender, best_y + y_offset );
                 }
+                else
+                  descender = FT_MIN( descender, points[pp].y + y_offset );
+              }
             }
             else
             {
               for ( pp = first; pp <= last; pp++ )
+              {
                 if ( best_point < 0 || points[pp].y < best_y )
                 {
                   best_point = pp;
                   best_y     = points[pp].y;
+                  descender  = FT_MIN( descender, best_y + y_offset );
                 }
+                else
+                  ascender = FT_MAX( ascender, points[pp].y + y_offset );
+              }
             }
 
             if ( best_point != old_best_point )
@@ -791,6 +805,9 @@
         }
       }
 
+      blue->ascender  = ascender;
+      blue->descender = descender;
+
       blue->flags = 0;
       if ( AF_LATIN_IS_TOP_BLUE( bs ) )
         blue->flags |= AF_LATIN_BLUE_TOP;
@@ -973,18 +990,52 @@
 #endif
           if ( dim == AF_DIMENSION_VERT )
           {
-            scale = FT_MulDiv( scale, fitted, scaled );
-
-            FT_TRACE5((
-              "af_latin_metrics_scale_dim:"
-              " x height alignment (style `%s'):\n"
-              "                           "
-              " vertical scaling changed from %.4f to %.4f (by %d%%)\n"
-              "\n",
-              af_style_names[metrics->root.style_class->style],
-              axis->org_scale / 65536.0,
-              scale / 65536.0,
-              ( fitted - scaled ) * 100 / scaled ));
+            FT_Pos    max_height;
+            FT_Pos    dist;
+            FT_Fixed  new_scale;
+
+
+            new_scale = FT_MulDiv( scale, fitted, scaled );
+
+            /* the scaling should not change the result by more than two pixels */
+            max_height = metrics->units_per_em;
+
+            for ( nn = 0; nn < Axis->blue_count; nn++ )
+            {
+              max_height = FT_MAX( max_height, Axis->blues[nn].ascender );
+              max_height = FT_MAX( max_height, -Axis->blues[nn].descender );
+            }
+
+            dist  = FT_ABS( FT_MulFix( max_height, new_scale - scale ) );
+            dist &= ~127;
+
+            if ( dist == 0 )
+            {
+              scale = new_scale;
+
+              FT_TRACE5((
+                "af_latin_metrics_scale_dim:"
+                " x height alignment (style `%s'):\n"
+                "                           "
+                " vertical scaling changed from %.4f to %.4f (by %d%%)\n"
+                "\n",
+                af_style_names[metrics->root.style_class->style],
+                axis->org_scale / 65536.0,
+                scale / 65536.0,
+                ( fitted - scaled ) * 100 / scaled ));
+            }
+#ifdef FT_DEBUG_LEVEL_TRACE
+            else
+            {
+              FT_TRACE5((
+                "af_latin_metrics_scale_dim:"
+                " x height alignment (style `%s'):\n"
+                "                           "
+                " excessive vertical scaling abandoned\n"
+                "\n",
+                af_style_names[metrics->root.style_class->style] ));
+            }
+#endif
           }
         }
       }
diff --git a/src/autofit/aflatin.h b/src/autofit/aflatin.h
index 6855492..dd75ef3 100644
--- a/src/autofit/aflatin.h
+++ b/src/autofit/aflatin.h
@@ -74,6 +74,8 @@ FT_BEGIN_HEADER
   {
     AF_WidthRec  ref;
     AF_WidthRec  shoot;
+    FT_Pos       ascender;
+    FT_Pos       descender;
     FT_UInt      flags;
 
   } AF_LatinBlueRec, *AF_LatinBlue;
-- 
2.6.2

From abb33121ee8fc2f3fcc5182a7e9a5be97b2e4946 Mon Sep 17 00:00:00 2001
From: Behdad Esfahbod <behdad@behdad.org>
Date: Sun, 8 Nov 2015 10:00:34 +0100
Subject: [PATCH 110/110] [sfnt] Accept version 3 of `EBLC' and `CBLC' tables
 also.

* src/sfnt/ttsbit.c (tt_face_load_sbit): Implement it.
---
 ChangeLog         | 8 +++++++-
 src/sfnt/ttsbit.c | 3 ++-
 2 files changed, 9 insertions(+), 2 deletions(-)

diff --git a/ChangeLog b/ChangeLog
index 28cec3e..e681f66 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -1,4 +1,10 @@
-2015-11-06  Philipp Knechtges  <philipp-dev@knechtges.com>
+2015-11-08  Behdad Esfahbod  <behdad@behdad.org>
+
+	[sfnt] Accept version 3 of `EBLC' and `CBLC' tables also.
+
+	* src/sfnt/ttsbit.c (tt_face_load_sbit): Implement it.
+
+2015-11-08  Philipp Knechtges  <philipp-dev@knechtges.com>
 
 	[autofit] Don't distort (latin) glyphs too much (#46195).
 
diff --git a/src/sfnt/ttsbit.c b/src/sfnt/ttsbit.c
index 62bce3c..09260b8 100644
--- a/src/sfnt/ttsbit.c
+++ b/src/sfnt/ttsbit.c
@@ -104,7 +104,8 @@
         version     = FT_NEXT_LONG( p );
         num_strikes = FT_NEXT_ULONG( p );
 
-        if ( ( (FT_ULong)version & 0xFFFF0000UL ) != 0x00020000UL )
+        if ( ( (FT_ULong)version & 0xFFFF0000UL ) != 0x00020000UL &&
+             ( (FT_ULong)version & 0xFFFF0000UL ) != 0x00030000UL )
         {
           error = FT_THROW( Unknown_File_Format );
           goto Exit;
-- 
2.6.2

